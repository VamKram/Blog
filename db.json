{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1712855353201},{"_id":"themes/cactus/gulpfile.js","hash":"23b5f0ea4c4d4319dfa8c3d3eaecb7bd70d90336","modified":1712857325816},{"_id":"themes/cactus/.jshintrc","hash":"d6ee46102ed2ff00acb555557f47241b701e99a4","modified":1712857325815},{"_id":"themes/cactus/languages/ar.yml","hash":"2f1258875dbffa89d192a1d6481c4bd3c337126b","modified":1712857325816},{"_id":"themes/cactus/languages/ca.yml","hash":"6f9897fe8c7b7bf23be7fa58c530602217aea898","modified":1712857325816},{"_id":"themes/cactus/README.md","hash":"d5790f636cec253f030cfa86b3e83728f621d4c5","modified":1712857325816},{"_id":"themes/cactus/.stylintrc","hash":"8bbbee5eae70fbe7dd53c9ce43d244b47d58385b","modified":1712857325815},{"_id":"themes/cactus/LICENSE","hash":"06806c75801c9ae870a1b47d588ef8e00d3c7c94","modified":1712857325815},{"_id":"themes/cactus/_config.yml","hash":"88ba154315a1a8d8812453366209493c94762842","modified":1712858955265},{"_id":"themes/cactus/package.json","hash":"768e4f07b7bc6406d37b84878e1d34be668f5ea4","modified":1712857325821},{"_id":"themes/cactus/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712857325816},{"_id":"themes/cactus/languages/de.yml","hash":"0734bfc33861585a12327142bf52489c882ad34f","modified":1712857325816},{"_id":"themes/cactus/.gitignore","hash":"044711463cfff978c57dbe9612deeb221269890e","modified":1712857325815},{"_id":"themes/cactus/languages/en.yml","hash":"491c87ff300815df52220f6cead8e28edea129df","modified":1712857325816},{"_id":"themes/cactus/languages/es.yml","hash":"56ddfd9081641c45272bdc2df750e41ab8b600bf","modified":1712857325817},{"_id":"themes/cactus/languages/fa.yml","hash":"05fb8dad765af2b9eec32582f5d277eb2735ffc3","modified":1712857325817},{"_id":"themes/cactus/languages/fr.yml","hash":"4604fc8f94d98f6d53c80535fbae78814f88f32d","modified":1712857325817},{"_id":"themes/cactus/languages/kr.yml","hash":"ab5be04a1b4c4d87e164b1a045e220f855e85a38","modified":1712857325817},{"_id":"themes/cactus/languages/pl.yml","hash":"3677b782edd98986bb82568c6ff6c8b77140b75a","modified":1712857325817},{"_id":"themes/cactus/languages/it.yml","hash":"501bfc9aed86964ee75354a805378740a02af799","modified":1712857325817},{"_id":"themes/cactus/languages/tr.yml","hash":"7971cbff7f90ffe1dc40402be6332890be1ed2c7","modified":1712857325817},{"_id":"themes/cactus/languages/nl.yml","hash":"4c36921322e782775ccff9aec78d4261153cf5e5","modified":1712857325817},{"_id":"themes/cactus/languages/pt-br.yml","hash":"417d25e3dae260a2503ec6a8f1b590fa00534b14","modified":1712857325817},{"_id":"themes/cactus/layout/archive.ejs","hash":"cda7b4d3f3615a9a591d7610f9e40b615ca68c73","modified":1712857325821},{"_id":"themes/cactus/layout/404.ejs","hash":"c04829c5ddc417d0b9a66cad55a838cc7eed997b","modified":1712857325818},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"d02ac645f87c5841ff35499818654df85bd872f5","modified":1712857325818},{"_id":"themes/cactus/layout/index.ejs","hash":"6e3a63db6bc43f6e4091361c52df5bcfd5be3339","modified":1712857325821},{"_id":"themes/cactus/languages/ru.yml","hash":"47fb1672f36d5adadf2f6c3a5c4d1714f5bd563b","modified":1712857325817},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d163690e48de5cf03914d69a99462d72eb040ad3","modified":1712857325818},{"_id":"themes/cactus/languages/vi.yml","hash":"1a1dfc60e952c3429c038f69a9e0ca2057784fca","modified":1712857325818},{"_id":"themes/cactus/layout/post.ejs","hash":"9b8e937375f56053f497f437c06d527761b98d1c","modified":1712857325821},{"_id":"themes/cactus/scripts/error_404.js","hash":"099d428e1b96b9c219a789da60b87703c509b2bb","modified":1712857325821},{"_id":"themes/cactus/layout/layout.ejs","hash":"c7b73f887d62fad9f14507504c4a2c036860e76c","modified":1712857325821},{"_id":"themes/cactus/layout/page.ejs","hash":"1700d4f434170e1eeb0e2a9470fc3c0732b2ba7e","modified":1712857325821},{"_id":"themes/cactus/scripts/meta.js","hash":"96b1a52af341adc741a5581ddc7335105abe780e","modified":1712857325822},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"98b79403945fa7f8dc177e6da283681677d02567","modified":1712857325821},{"_id":"themes/cactus/scripts/cdn.js","hash":"6037ad2ddbdc4d87195d91b3bd9f197c1b40467a","modified":1712857325821},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"3d841aa267026703a5cc29f4ffbb613f0a2bbd45","modified":1712857325822},{"_id":"themes/cactus/scripts/page_title.js","hash":"03b5c8b6215f0b305327e8d9b5d49add83b4b95f","modified":1712857325822},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"162fb8592903605789f516be2cd9c678a1a2d207","modified":1712857325818},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"2336c1eb473fea860f4c3e309c50bc32544d0b4e","modified":1712857325818},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"cac3ef9de11b14825599efe69b0939f42d368e25","modified":1712857325819},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"3eae6c39852c3d7cba8978ad93a5570d20580924","modified":1712857325819},{"_id":"themes/cactus/layout/_partial/google_analytics.ejs","hash":"82372a68455c05fa6a07c5ecb8defe11f769da7c","modified":1712857325818},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"46ad130a7a741ca44928116479c2004180979e40","modified":1712857325820},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"ea8692715a8ea49624638dbd7bfb911af58887ee","modified":1712857325819},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"5c1727836f5d6076a65cf91dbbeaba8d16b5132b","modified":1712857325823},{"_id":"themes/cactus/source/css/_extend.styl","hash":"1b9b2c69b894343068f3384000581a6092c4e868","modified":1712857325822},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"37093d2a554283ab652b59e5e0ff9b542edced0f","modified":1712857325831},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"42fd45758d8f8e814bfdd8b26eb676d87b8465b2","modified":1712857325820},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"12dba799ae5736dfbf1548e1923bbb7447de8a6d","modified":1712857325820},{"_id":"themes/cactus/source/css/_variables.styl","hash":"5dcbf89bd23d9dd3c45d07049a1448b0ae95426b","modified":1712857325833},{"_id":"themes/cactus/layout/_partial/umami_analytics.ejs","hash":"5a39772aa121652f9d54619282fe880006b2a677","modified":1712857325820},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1712857325833},{"_id":"themes/cactus/source/css/_util.styl","hash":"1c7bed7376f04d7b77d817e132aee08cf65e6395","modified":1712857325833},{"_id":"themes/cactus/source/js/search.js","hash":"0d2933fa97c4036805011cc219fcc43ae578e230","modified":1712857325836},{"_id":"themes/cactus/source/css/rtl.styl","hash":"105284f992de848968d818f6200d2ebbdd5342d0","modified":1712857325833},{"_id":"themes/cactus/source/js/main.js","hash":"adc9e8e86e82f6bce527d5674df0a9b298ac71a0","modified":1712857325836},{"_id":"themes/cactus/source/css/style.styl","hash":"210406274d091be115a6175929ba5671b8b8f946","modified":1712857325833},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1712857325834},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"2170a51e5b2637ef55651f29637cafcd111242b2","modified":1712857325819},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1712857325834},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"b64d37f8a2cdb3990a5f4cd686b4fa3f2607b5bb","modified":1712857325819},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"62fd0bb73eef411ae0b2d6f529a273d54fd0d277","modified":1712857325819},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"725ab823c2fb4a5e444eca3afa617d88f305ef71","modified":1712857325820},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"53d0225501f4c33abda7059293f00aa22e3d4364","modified":1712857325819},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"3d6c91b03ade77daf1ceb11c5dad48b0e35ac353","modified":1712857325822},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"d2978cb0035ba1da0a58db2ed947a72b0bd41042","modified":1712857325822},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"9b156c15c855677a50c4a27de17a8cb377b69802","modified":1712857325822},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"a20de63c1cd7ccf25b8313e2d211866a20e86fbe","modified":1712857325822},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"fc289ba8f47ead6331ec3a51533cfa93251c5634","modified":1712857325823},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1712857325823},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"4d67bdab6cc9c614486ca42f98199a04d053e7f0","modified":1712857325823},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"262167aaebcf28de7f85af7ac77a76fa1fa284f7","modified":1712857325823},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1712857325823},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"7e83c7f2acaaaa98864660afe2794745c36c8e51","modified":1712857325823},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"524ad82e6d52b91d20cded8224efb76f2fdacf0b","modified":1712857325820},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"1cecd13e0d6b24042ff86372f0596c1441bb834a","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1712857325823},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"424029d2d8e6c51c7370c5f8aabc21799418d3f1","modified":1712857325820},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"6b037d536ef89c1e7b488f34c20fa977389ae744","modified":1712857325820},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"68584ed0e99c7d0e49ef8a2e67cd4dcdad359de4","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"802979cea895a0a384645cb30a43de9572cb0e3f","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"a741eba35cdfe2cfd67dfbf109655f253d6b4795","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"f186b357dcebded89b7bcc77389b2cff76533d72","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"0d51ddc580ccb0a291271fa9632bc91dab632df6","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"bbad7a9512b4873294e73ce806e36e43973e6ed8","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1712857325824},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2f008271299042f2443bca98c9bcadbc8c45e837","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"1de45e603e2c71c7f6b0c1372a3ba00b1bc153a8","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"18dcb00ab9c62eb810d492047214331c51bb654f","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"8965ad6920601c275ca97e617beff5536925a266","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1712857325825},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"98d7884806838a0b46132d759d60ac27c0c4bd9c","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"8da83d66724f2ce508a40f21b4f6dc0d704be562","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1712857325826},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"f66403ce77dcb16b1f98a5061b72f7581630d69f","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"dd3c78c42d4a865f11623235e5e5f6829d789706","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"4906456025787de04b48a87c42bb704c5ff67065","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"efba069860181d2b709e1548dd16cf102ca267fa","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"84a27bd29d939105d65f4164c219d6cc2e09ae60","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"c3a3bfae1eb864505fbc8748db734600057af1af","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"846a06a57fa0b3db7f83ec7ac2bf34911f32cf66","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"13113af220dfed09cb49d85102babb352c3eff97","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4d4a9360c35f3c5a0c5b9b49a1f2284e7e21317b","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1712857325828},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"aa31b30069ebee39e2c3ebb75e2c96ba8678eb14","modified":1712857325827},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"95246afef181bd96f9adb1a2e84fb3ef302d4598","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"9fc9400d3a8cae97eb5761c284140acb0f847538","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"5dc9ce33cecee87fe9ca8f2ed9342602194484ec","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1712857325829},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"e6e4c009b10b9805f0c593446bf013edec47d146","modified":1712857325830},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"e6b025b247e4027fb3c1b7833588f5a5b04a549c","modified":1712857325830},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"8b16876cf205111d5d5454100de712bc3ea8f477","modified":1712857325830},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"92f4423d4964fcfe34ff7ca6cb21012b5738c697","modified":1712857325830},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1712857325830},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"eb8441364bb1664ecebde77b965dc36c91133aa0","modified":1712857325830},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1712857325830},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"301bf71b6878c965b3ea49dc19aba3f1c111cd3a","modified":1712857325831},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"92fffe2baacb9d19021b3d120d2038417ca466df","modified":1712857325831},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1712857325830},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"f63534764dd6598e81177d64714a184f98153b11","modified":1712857325831},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"abdbf82d71c7ec89c2f3ebaf8cc0606ab4ec1e03","modified":1712857325831},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"5bc59fd8cadd7cff06d989c9c7e8e4eb0d0872d8","modified":1712857325831},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"6e839bae0ddc11447579c34541e79b50d3670bbd","modified":1712857325831},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"4ff9755163aae6039bb72eac8360bc1c50fa26b6","modified":1712857325832},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"680ea535e5a20c01a31bee4d3eb680b86267a281","modified":1712857325832},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"d62dcb0905e038e69ff24ab9eef9e3306d45535e","modified":1712857325836},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"f08c8bd685ddced854cdf2183684013c0644527c","modified":1712857325832},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"6cb13a9f4a7c01aa7ab8f73739a7d385377c5465","modified":1712857325832},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"7a2f9051b21bce525ecb71799d37c4b65a4f9171","modified":1712857325832},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"4a0da5d7052204b23d390a7f76cdc903b9eef52b","modified":1712857325832},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1712857325876},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1712857325877},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1712857325879},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1712857325879},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1712857325882},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1712857325885},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1712857325881},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1712857325885},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1712857325887},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1712857325887},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1712857325889},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1712857325890},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"c25ccdd505ca1b7c74a7fb2365ad2c262f8025ba","modified":1712857325832},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"b06410ed34b5ecbcac11357aa359149e1f827aa6","modified":1712857325832},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1712857325891},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"a3dca7ea2f1fedafc2dfb687884d8ac792d15947","modified":1712857325891},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1712857325891},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1712857325839},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"4a8d364c99df8471c6a0c7192710631e605af635","modified":1712857325843},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"8d7e041394387fd523991bf827d417ade2747e35","modified":1712857325843},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1712857325839},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1712857325843},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1712857325843},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"edf8a6a066f201b1ffad32c585bd79c9982d4433","modified":1712857325843},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1712857325875},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1712857325876},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1712857325878},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1712857325879},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1712857325881},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1712857325880},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1712857325884},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1712857325883},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1712857325888},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1712857325890},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1712857325885},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1712857325891},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"2bf056f1697bf3afdf49e56573d63b114374661e","modified":1712857325837},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1712857325839},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1712857325887},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1712857325889},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1712857325838},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1712857325842},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1712857325835},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1712857325842},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1712857325865},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1712857325854},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1712857325872},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1712857325847},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1712857325859},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1712857325850},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1712857325857},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1712857325862},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1712857325870},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1712857325867},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1712857325874},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1712857325871},{"_id":"source/categories/index.md","hash":"61262bbd9c303c0e4ee1dcd294270b317fcf80bf","modified":1712771185879},{"_id":"source/_posts/Low code之路（二）.md","hash":"9989e4a3eb074a9bbd35b62b8fb5f110f17fdac3","modified":1712771185875},{"_id":"source/_posts/PROTOTYPE.md","hash":"d5ed2ab60424d7c0195709c760574c46501716b6","modified":1712771185875},{"_id":"source/_posts/MiniReact.md","hash":"949b15386bf1b17de2d7cd453a07eecf36ab9ee7","modified":1712771185875},{"_id":"source/_posts/ReactVdom.md","hash":"f1b522bb8dcdd8e5f7a88084718f12afc8aff896","modified":1712771185876},{"_id":"source/_posts/Redux Middleware.md","hash":"e0fd0ddd0f8a9a6ff11cc2e4fac101fb53c53d86","modified":1712771185876},{"_id":"source/_posts/RxDeep.md","hash":"676d5295fd427478ac44791408a7a3cdc11a42cc","modified":1712771185876},{"_id":"source/_posts/ast.md","hash":"297785605479ca823cb79f07a611e68d7ef7419a","modified":1712771185876},{"_id":"source/_posts/babel.md","hash":"44cbd29370b6b636b443d60ca20dcbe3fd20d0df","modified":1712771185877},{"_id":"source/_posts/RxjsSummary.md","hash":"3dff79b4501df9a6b3f6aee4e4032aa14ec73cea","modified":1712771185876},{"_id":"source/_posts/callbag.md","hash":"7c67e99303653a59e89d4154e4fc34c54e030f43","modified":1712771185877},{"_id":"source/_posts/closure.md","hash":"7a0f2ddd466b02ab659e3e4e00af494c7621e884","modified":1712771185877},{"_id":"source/_posts/express.md","hash":"2fff8756f1229f90bc146c8defb2d9d5f6dc8eed","modified":1712771185877},{"_id":"source/_posts/decorate.md","hash":"7d58baf38d1fac4e5f13cddd42de5e6d90a35295","modified":1712771185877},{"_id":"source/_posts/fp.md","hash":"ea1f921b588d172c3783241d0c572eebf4ce08ab","modified":1712771185877},{"_id":"source/_posts/jsdesignpartern.md","hash":"365eae4401044c4af3bb6f1b2d960e081b585b7b","modified":1712771185877},{"_id":"source/_posts/react_v16.md","hash":"6b9b290dce54ddc0df2e60ce06cc3180001603bf","modified":1712771185878},{"_id":"source/_posts/low code心路（一）.md","hash":"1204a11ab38048086d09d2c8dafaf584103d7aa8","modified":1712771185878},{"_id":"source/_posts/reactSSR.md","hash":"d393a869e8aec3e7cbf4878fa7e66e4df3bfb34e","modified":1712771185878},{"_id":"source/_posts/httpNhttps.md","hash":"abd0e48ee29ae811b3da0cadc5f7a1ef60d0d1f5","modified":1712771185877},{"_id":"source/_posts/redux源码分析.md","hash":"d8726bc336782388b87765834384615b563cb5e0","modified":1712771185878},{"_id":"source/_posts/template string.md","hash":"479a5667b7878991ceafdb6e5de564ce97c6a34c","modified":1712771185878},{"_id":"source/_posts/webcomponent.md","hash":"3b3365ec6fca2052611aee5107761e1c3f381107","modified":1712771185878},{"_id":"source/_posts/webpack.md","hash":"e43e2ef17eb49bb27a38694eb611cecd5726b0bd","modified":1712771185879},{"_id":"source/tags/index.md","hash":"94b9aa4cfaad09f49d138bddb37ab000bd4bdd21","modified":1712771185879},{"_id":"source/_posts/this.md","hash":"398512fd2a39c74ff798298fba430e1620b73f99","modified":1712771185878},{"_id":"source/_posts/webpack2.md","hash":"5d7433dd060257e4c631e956560fd8778c87aaff","modified":1712771185879},{"_id":"source/_posts/webpack3.md","hash":"177b80eff18bd6a39c3c714f757781446e362def","modified":1712771185879},{"_id":"source/_posts/webpack4.md","hash":"713d82c3737f22129c7f491f14a37242bf392b39","modified":1712771185879},{"_id":"source/_posts/websocket.md","hash":"bee2ce80d77dbcd7c145df1b4d50ae47bdb09246","modified":1712771185879},{"_id":"public/categories/index.html","hash":"e03f545c54580acb7db2b3ca3a6ee6ef0fc9dd13","modified":1712863826146},{"_id":"public/tags/index.html","hash":"bf165dd80267911bba35a53506010d0cb6c65fd4","modified":1712863826146},{"_id":"public/2019/09/17/webpack4/index.html","hash":"b682651ac6b366e7e1bda541b0fcc61900db521e","modified":1712863826146},{"_id":"public/archives/index.html","hash":"a5688fa127617e06267ac2b1a5d3b630729ffe48","modified":1712863826146},{"_id":"public/archives/page/2/index.html","hash":"71019601eb19e3b6ea8f057b3a139363d620c891","modified":1712863826146},{"_id":"public/archives/page/3/index.html","hash":"8a646d8eafff7d6083b9a2199a777266c16e2f90","modified":1712863826146},{"_id":"public/archives/2017/index.html","hash":"de3d6b8e4385b3fe6452200b89f57effbe00743e","modified":1712863826146},{"_id":"public/archives/2017/01/index.html","hash":"4335c02cf9009bd09bd5ca20e72d32cefa55cd98","modified":1712863826146},{"_id":"public/archives/2017/07/index.html","hash":"4ba67b51620986308a7ea4bfdba5b3aa140502e0","modified":1712863826146},{"_id":"public/archives/2017/09/index.html","hash":"b411d548c1e35207832fa4b7e4db6773ffeb24bd","modified":1712863826146},{"_id":"public/archives/2017/10/index.html","hash":"35c3dfad04a45cad5f7c6725d4d8a9ad331e8292","modified":1712863826146},{"_id":"public/archives/2017/11/index.html","hash":"577ce33d6e6f7e597dae9f3ffa8d0394b18866ab","modified":1712863826146},{"_id":"public/archives/2017/12/index.html","hash":"495ff97f28291ff0754640b1a1b8604e3bc36cc8","modified":1712863826146},{"_id":"public/archives/2018/index.html","hash":"64991ae520b6cd58f40cb4ee92d1026b60ddad82","modified":1712863826146},{"_id":"public/archives/2018/03/index.html","hash":"b5e197021ff8d40721001a29c3018c35ec6b09f7","modified":1712863826146},{"_id":"public/archives/2018/04/index.html","hash":"53283f11622af3aede5f0370c3444f1b786d22cd","modified":1712863826146},{"_id":"public/archives/2019/index.html","hash":"969d276d8ebabe618c02593e10f7aae8810f46eb","modified":1712863826146},{"_id":"public/archives/2019/05/index.html","hash":"94cbbcd6a6507e0a972e84989e07b52c5deafb22","modified":1712863826146},{"_id":"public/archives/2019/06/index.html","hash":"f6cebd268a74fb647f100c40619dbcc484affdfe","modified":1712863826146},{"_id":"public/archives/2019/08/index.html","hash":"8d9b6027e600c5644559421fdafa97047074a340","modified":1712863826146},{"_id":"public/archives/2019/09/index.html","hash":"c443b3e43bdbe5892a82199bff5e17f45fbaa96d","modified":1712863826146},{"_id":"public/archives/2019/11/index.html","hash":"28eb92dcaf45a781730437348002d48fbe555c1d","modified":1712863826146},{"_id":"public/archives/2019/12/index.html","hash":"9f1e2b0e1cd85f3ff39a9f67769dca3a50e95aaf","modified":1712863826146},{"_id":"public/archives/2020/index.html","hash":"f10c5395b2a97723df1022aeaaac36163f7afaba","modified":1712863826146},{"_id":"public/archives/2020/01/index.html","hash":"d5e567c282d877c667ff9fd5fb1b90ffc53c6d0c","modified":1712863826146},{"_id":"public/archives/2020/02/index.html","hash":"b9a629db84e993ff5bc342081ca5ddb3dd701977","modified":1712863826146},{"_id":"public/archives/2020/03/index.html","hash":"32bb90ebd364bf108b0ad5495bd95c4b596e2a63","modified":1712863826146},{"_id":"public/archives/2020/11/index.html","hash":"5e98e6b9183433de2de22f590100b090855f7a7b","modified":1712863826146},{"_id":"public/archives/2020/12/index.html","hash":"5a7861e0de829b984cb0465194187e289ecc01c7","modified":1712863826146},{"_id":"public/archives/2021/index.html","hash":"ee51812e56abccb7b386e6afc1008b0aeccc66f4","modified":1712863826146},{"_id":"public/archives/2021/01/index.html","hash":"704e329175c5946a9257e2c11c7efa74aea4ea29","modified":1712863826146},{"_id":"public/categories/js/index.html","hash":"0b18b9216ac6ca79d919db6ba9df348941d744b3","modified":1712863826146},{"_id":"public/categories/compiler/index.html","hash":"2e4e2d520ab21f60ac20250b320348b3c03a712a","modified":1712863826146},{"_id":"public/categories/reactive-programming/index.html","hash":"3a64d4bdfc32ff82f684389b91776729081d91be","modified":1712863826146},{"_id":"public/categories/source/index.html","hash":"39c2bf28fbe0ec45281ab7f973c93576b3c0e86d","modified":1712863826146},{"_id":"public/categories/Ecmascript/index.html","hash":"ed033dd24b01a142e55d9c1e8744769dff6fe896","modified":1712863826146},{"_id":"public/categories/tool/index.html","hash":"126631f74938762ac00ce2f6287065127d1b5d1a","modified":1712863826146},{"_id":"public/categories/react/index.html","hash":"ef59f0c98383ba64312f6beb46fbd3d1c4387546","modified":1712863826146},{"_id":"public/categories/react-redux-source/index.html","hash":"c737856d27706fbeed41b694dd714f9e3a7de5ec","modified":1712863826146},{"_id":"public/categories/protocol/index.html","hash":"5cc5aba79e8adde47f5d7db53dbacbc7a481c7ed","modified":1712863826146},{"_id":"public/categories/LowCode/index.html","hash":"7c3c59ce3db5374a11e094f90c10b6bde50f3cb8","modified":1712863826146},{"_id":"public/categories/redux/index.html","hash":"7fa9129890beffd9f72e428c2ff6cb9270d38f7f","modified":1712863826146},{"_id":"public/categories/html/index.html","hash":"9248127e24cdbe994a496c145b466ddc12b82a27","modified":1712863826146},{"_id":"public/categories/ts/index.html","hash":"a0c491d3af70933c602ce7211ecb94c858cb60ed","modified":1712863826146},{"_id":"public/index.html","hash":"50b9e672337211ff849e973619a74d1f932c3d7b","modified":1712863826146},{"_id":"public/page/2/index.html","hash":"632b281c1e9575b0d04cc46156227cae6197e6c3","modified":1712863826146},{"_id":"public/page/3/index.html","hash":"c35d40748f8fdbd0fb766332b9c838a5bf34a179","modified":1712863826146},{"_id":"public/tags/js/index.html","hash":"122f85bdc0529a8fd527940f82ef0a30cb34f43b","modified":1712863826146},{"_id":"public/tags/ast/index.html","hash":"6b3e8d6e4cf126143d188a0670562fb0b173fd63","modified":1712863826146},{"_id":"public/tags/babel/index.html","hash":"33bcb09bf5c33e9dec343d46a0895a2ec1400fdf","modified":1712863826146},{"_id":"public/tags/rxjs/index.html","hash":"b93fcb117360c488a7e56b3c421acad98647b403","modified":1712863826146},{"_id":"public/tags/callbag/index.html","hash":"32b7b88f2a636bba6b42e1ad39470520c63047ac","modified":1712863826146},{"_id":"public/tags/express/index.html","hash":"95ce770865f7a0b8df1ec76ff6eae15cbfe17bb7","modified":1712863826146},{"_id":"public/tags/decorate/index.html","hash":"849b291a5c4018304ea766898fbe38f3045f2c61","modified":1712863826146},{"_id":"public/tags/webpack/index.html","hash":"33541f7b706e4c4996b9970fa6a5c4d64c4e117f","modified":1712863826146},{"_id":"public/tags/react-source/index.html","hash":"764dd7cb74d3bf48ff064aba20514ec2ce4aa0a1","modified":1712863826146},{"_id":"public/tags/react/index.html","hash":"cdf02994488b9f99d0213728489670025e673253","modified":1712863826146},{"_id":"public/tags/redux-source/index.html","hash":"a348891eebeaf721f53c30a6619ac32023a26dea","modified":1712863826146},{"_id":"public/tags/http/index.html","hash":"f7fd44d082ce0413a7a75ff0fa60591710d2a14b","modified":1712863826146},{"_id":"public/tags/puppeteer/index.html","hash":"0031f31c789b9c3d00f2e94feac71d45afb8bd30","modified":1712863826146},{"_id":"public/tags/redux/index.html","hash":"69823f842c962172c49afdcd8bf33d99a72e1b60","modified":1712863826146},{"_id":"public/tags/form/index.html","hash":"23e600456d1c130162166364298c26d70d943463","modified":1712863826146},{"_id":"public/tags/webComponent/index.html","hash":"4197ca9fede2a687403e83cadc51bc214f5e3c93","modified":1712863826146},{"_id":"public/tags/webSocket/index.html","hash":"7462f4cba8d6aa4db33cb048d8eda7c52cdb09d2","modified":1712863826146},{"_id":"public/tags/ts/index.html","hash":"974d8cfc938229a053e1bac94f925e758ab7bf8a","modified":1712863826146},{"_id":"public/404.html","hash":"44662d1b613f999524d767030d0cb1db3fb96f77","modified":1712863826146},{"_id":"public/2021/01/27/Low code之路（二）/index.html","hash":"50e921d80724b31f7254e4702c5c4d5754de8e33","modified":1712863826146},{"_id":"public/2020/12/15/low code心路（一）/index.html","hash":"9a3c59d9e831fed350e04f051f34621d9e2022b5","modified":1712863826146},{"_id":"public/2020/11/12/template string/index.html","hash":"bb2a8fc04372e5a652be2d925ded10b20c44ab4a","modified":1712863826146},{"_id":"public/2020/03/05/babel/index.html","hash":"89a4dfe06062a269c6ad48919ae6dfa30aa1ee7f","modified":1712863826146},{"_id":"public/2020/02/05/callbag/index.html","hash":"7462bc3e46df8cce5be4289a8aa608e53e7c941f","modified":1712863826146},{"_id":"public/2020/01/28/webcomponent/index.html","hash":"aa17456afee33b6f532a70935f98ec3965d90c40","modified":1712863826146},{"_id":"public/2020/01/02/ast/index.html","hash":"1f92a39fd7b1a4b752b5516918dc360cfeaa95d5","modified":1712863826146},{"_id":"public/2019/12/25/react_v16/index.html","hash":"841c04e3725a2c0081b40cbdf8bbc157a13afff7","modified":1712863826146},{"_id":"public/2019/11/21/websocket/index.html","hash":"17430df600c1475afe5bf5d4cf2be80366471ebf","modified":1712863826146},{"_id":"public/2019/09/17/webpack3/index.html","hash":"0d551cd915e68395706c5e0f1c484780885ead39","modified":1712863826146},{"_id":"public/2019/08/15/webpack/index.html","hash":"92c73d617a44c8f1627d8b3bfb3ba21af9924e73","modified":1712863826146},{"_id":"public/2019/08/15/webpack2/index.html","hash":"c1103f812841fd18537cba0125995efdfd7411b3","modified":1712863826146},{"_id":"public/2019/06/23/reactSSR/index.html","hash":"930572355573de301626478065f0605c4e249444","modified":1712863826146},{"_id":"public/2019/06/16/express/index.html","hash":"c6ff5bc994dc58119f047e00e180529d709c7f36","modified":1712863826146},{"_id":"public/2019/05/15/httpNhttps/index.html","hash":"0c27e6764ed970062a658a0a62df678d5f5a5edc","modified":1712863826146},{"_id":"public/2018/04/12/jsdesignpartern/index.html","hash":"c656e09b68bd1e67d7a4bf87d659a2ef8e7bf7ad","modified":1712863826146},{"_id":"public/2018/03/25/redux源码分析/index.html","hash":"dd1275b68d81f4f2254f3e5c346ffed30b7a63c2","modified":1712863826146},{"_id":"public/2017/12/05/MiniReact/index.html","hash":"d798c28a5144639b55ffc302201786709b26999c","modified":1712863826146},{"_id":"public/2017/11/19/ReactVdom/index.html","hash":"f18d59a9b6c5b9c458bf3a09ebbf7e0fb49eab1e","modified":1712863826146},{"_id":"public/2017/11/15/decorate/index.html","hash":"b73ac5bc68d075f78ad2909da2bd9f73831c7811","modified":1712863826146},{"_id":"public/2017/10/03/RxDeep/index.html","hash":"75b05709574a24191a98bf6d36e7c1588924214b","modified":1712863826146},{"_id":"public/2017/09/09/RxjsSummary/index.html","hash":"471235905b8fde47f66162800e894cabfda4aac6","modified":1712863826146},{"_id":"public/2017/07/19/Redux Middleware/index.html","hash":"d6238f2c37436346d6b961adec4496902e2f5446","modified":1712863826146},{"_id":"public/2017/01/13/PROTOTYPE/index.html","hash":"887b651648b6d61c3d183d00a4f764482eb5db7f","modified":1712863826146},{"_id":"public/2017/01/12/fp/index.html","hash":"41c3a4571edfca72a16c28a7f7ac0ac8ce259002","modified":1712863826146},{"_id":"public/2017/01/12/this/index.html","hash":"375ba9bf280b5020338a01d6fca1f3485a38c625","modified":1712863826146},{"_id":"public/2017/01/04/closure/index.html","hash":"7a5191df91e248bf0ce74f4a9c216a5c81b3fab2","modified":1712863826146},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1712863826146},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1712863826146},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1712863826146},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1712863826146},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1712863826146},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1712863826146},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1712863826146},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1712863826146},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1712863826146},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1712863826146},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1712863826146},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1712863826146},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1712863826146},{"_id":"public/css/style.css","hash":"ae8b09d0edeff1816ae7544577107d6ceaa35f22","modified":1712863826146},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1712863826146},{"_id":"public/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1712863826146},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1712863826146},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1712863826146},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1712863826146},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1712863826146},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1712863826146},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1712863826146},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1712863826146},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1712863826146}],"Category":[{"name":"js","_id":"cluvjqdcg00030wpd8yet5319"},{"name":"compiler","_id":"cluvjqdcu00080wpd6zkqg79e"},{"name":"reactive programming","_id":"cluvjqdcw000j0wpdfax99u2p"},{"name":"source","_id":"cluvjqdda000t0wpdd0su4gb0"},{"name":"Ecmascript","_id":"cluvjqddb00120wpd4yy8e8kv"},{"name":"tool","_id":"cluvjqddc00170wpd32zjffc1"},{"name":"react","_id":"cluvjqddp001c0wpd6bc445z2"},{"name":"react redux source","_id":"cluvjqddu001q0wpd371w9cxj"},{"name":"protocol","_id":"cluvjqddw00250wpdh7mseuf5"},{"name":"LowCode","_id":"cluvjqddx002e0wpd9n099sad"},{"name":"redux","_id":"cluvjqddy002l0wpdh4936i0n"},{"name":"html","_id":"cluvjqddz002v0wpd7dyh6x0j"},{"name":"ts","_id":"cluvjqde000350wpd3tf51l80"}],"Data":[],"Page":[{"title":"categories","date":"2020-12-01T17:29:18.000Z","type":"categories","layout":"categories","category_img":"https://technologybook.tech/assets/img/gaoda.jpg","category_per_img":"https://technologybook.tech/assets/img/gaoda.jpg","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-12-02 01:29:18\ntype: \"categories\"\nlayout: \"categories\"\ncategory_img: https://technologybook.tech/assets/img/gaoda.jpg\ncategory_per_img: https://technologybook.tech/assets/img/gaoda.jpg\n---\n","updated":"2024-04-10T17:46:25.879Z","path":"categories/index.html","_id":"cluvjqd7w00000wpd8u0xeg3o","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-12-01T17:29:07.000Z","type":"tags","layout":"tags","tag_img":"https://technologybook.tech/assets/img/gaoda.jpg","tag_per_img":"https://technologybook.tech/assets/img/gaoda.jpg","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-12-02 01:29:07\ntype: \"tags\"\nlayout: \"tags\"\ntag_img: https://technologybook.tech/assets/img/gaoda.jpg\ntag_per_img: https://technologybook.tech/assets/img/gaoda.jpg\n---\n","updated":"2024-04-10T17:46:25.879Z","path":"tags/index.html","_id":"cluvjqdce00010wpdd6c3hbv6","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JavaScript设计模式","date":"2017-01-11T16:00:00.000Z","_content":"# JavaScript设计模式\n\n## 工厂模式\n\n1，**用函数来封装特定接口创建对象的细节**。工厂模式解决了**创建多个相似对象对象的问题**，但还没有解决**对象识别的问题**。（通过函数封装）\n\n```\nfunction createPerson(name, age, job) {\n    var o = new Object();//用以封装接口的函数\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    sayName = function () {\n        alert(this.name);\n    };\n    return o;\n}\nvar person1 = createPerson('zxj', 23, \"Software Engineer\");\nvar person2 = createPerson('sdf', 25, \"Software Engineer\");\n```\n\n## 构造函数模式\n\n1，Person()中的代码除了和createPerson()中相同的部分外，还存在以下不同之处：\n\n- 没有显式的创建对象；\n- 直接将属性和方法赋给了this对象；\n- 没有return语句；\n  2，**创建构造函数Person的实例必须使用new运算符**：\n- 创建一个新对象；\n- **将构造函数的作用域赋给新对象**（因此this就指向这个新对象）；\n- 执行构造函数中的代码（为这个新对象添加属性和方法）；\n- 返回新对象；\n\n```\nfunction Person () {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n           alert(this.name); \n   }\n}\n    var person1 = new Person(\"mark\" , 29 , 'Software Engineer');\n    var person2 = new Person(\"Greg\" , 27 , 'Doctor');\n```\n\n3,**实例化的person1 ，person2 都有一个constructor 属性指向Person**(标示对象类型用constructor 检测对象类型用instanceof)\n\n> alert(person1.constructor == Person ); //true\n> alert(person1.constructor == Person ); //true\n> 通过构造的constructor 指向Person，通过原型使用**proto** 指向原型的prototype。\n\n4，构造函数与函数\n1， 两者的调用方式不同，构造函数**只能通过new操作符来调用**\n\n```\n// 当作构造函数\nvar person = new Person('zxj', 23, \"Software Engineer\");\nperson.sayName(); //zxj \n// 当作普通函数\nPerson('sdf', 25, \"Software Engineer\"); //添加到window\nwindow.sayName(); //saf\n// 在另一个对象的作用域中调用\nvar o = new Object();\nPerson.call(o, \"qwe\", 25, \"Nurse\");\no.sayName(); //qwe\n```\n\n2，构造函数的问题\n\n```\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;//被调用的函数\n}\n//相当于定义了全局的函数在构造函数体内被调用\nfunction sayName() {\n    alert(this.name);\n};\n//每个Person 实例都包含一个不同的FUNCTION以这种方式创建函数会导致不同的作用域链和标识符解析\nvar person1 = new Person('zxj', 23, \"Software Engineer\");\nvar person2 = new Person('sdf', 25, \"Software Engineer\");\n```\n\n# 原型模式\n\n1，每个函数都有一个prototype属性这个属性**包含一个\\*_proto_\\***这个属性是**一个指针**，**指向一个父对象的prototype**属性，而这个对象可以和特定实例共享属性和方法。\n\n```\nfunction Person(){\n}\nPerson.prototype.name = 'Nicholas';\nPersaon.prototype.age = 29;\nPerson.prototype.sayName = function (){\n    alert（this.name）;\n}\nvar person1 = new Person();\nperson1.sayName();//\"Nicholas\";\nvar person2 = new Person();\nperson2.sayName();//\"Nicholas\"\nalert(person1.sayName == person2.sayName) // true\n```\n\n2，**只要创建了一个新函数**就会有一组特定的规则为该函数**创建一个prototype**属性 这个属性中的**constructor指向f父对象描述了这个函数的构造方法**，***_proto_\\*指针指向父对象的prototype**\n*可以通过isPrototypeof方法来确定对象之间是否存在这种关系该方法返回一个Boolean值*\n\n> alert(person.prototype.isPrototypeof(person1))\n> alert(person.prototype.isPrototypeof(person2))\n\n3，原型模式实现原理 每当代码读取某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从**实例**本身开始。如果在**实例**中找到了具有给定名字的属性。如果查找到则返回，否则则在父对象的prototype中寻找通过 **proto**属性。（实例）\n\n4，delete可以删除来自原型的的值然后显示出继承自父对象的属性。\n\n```\nvar person1 = new Person();\nvar person2 = new Person();\nperson1.name  = \"mark\"\nalert(person1.name) //\"mark\"\nalert(person2.name) // \"Nichloas\"\ndelete person1.name ; \nalert(person1) // \"Nichloas\"\n```\n\n5 ,**hasOwnProperty()**是检测一个属性是存在于实例中还是存在与原型中（这个方法继承自Object对象） 该方法返回一个Boolean值\n\n```\nfunction Person () {\n}\nPerson.prototype.name = \"Nichloas\"\nPerson.prototype.age = \"Software Engineer \";\nPerson.prototype.sayName = function(){\n        alert(this.name)\n}\nvar person1 = new Person();\nvar  person2 = new Person();\nperson1.name  = \"Gerg\"\nalert (person.hasOwnProperty(\"name\")); //false 属性来自实例\nalert(person2.name)\nalert(person2.hasOwnProperty(\"name\"))://true 属性来自原型\ndelete person1.name\nalert(person1.hasOwnProperty(\"name\"))//true 属性0000000来自原型\n```\n\n### 原型与in操作符\n\n> 在for in 循环中使用\n> 单独使用时in 操作符通过对象能够访问给定属性时返回true 与hasOwnProperty不同in只判断是否访问到而后者判断是否来自原型\n\n```\n*判断存在于对象中或者存在于原型中代码*\nfunction hasProtootypeProperty(){\n     return !object .hasOwnProperty (name ) && (name in object)\n}\n```\n\n#### 在使用枚举 for in 时会返回可枚举的（enumerated）所有属性\n\n*ECMAscript5 将constuctor 和 prototype 属性[Enumerable]属性设置成false 不可枚举*\n要取得对象上所有可枚举的实例属性 可以使用Object.key()方法\n\n```\nvar key = Object.key(Person.prototype);\n```\n\n要取得所有实例属性（无论可否枚举）使用Object.getOwnPropertyNames()方法\n\n```\n var key = object.getOwnPropertyNames(Person.prototype);\n```\n\n(都可以替代for in 来获取实例属性)\n\n# 更简洁的的与原型语法\n\nPerson.prototype设置成为等于一个对象字面量形式创建的对象，相当于重构了Person.prototype。得到的结果相同。但constructor不再指向Person而是指向最初的Person原型\n*重写了prototype语法*\n先创建实例后修改原型依旧运转正常（**原型中查找值的过程是一次搜索**）\n\n```\nvar friend = new Person();\nPersonPrototype.sayHi = function() {\n        alert(\"hi\")\n}\nfriend.sayHi();\n```\n\n**原型的缺点**\n\n- 实例在默认情况下取得相同的属性值，所有属性被实例共享，对于包含引用类型的属性来说是一场灾难。\n\n```\n function Person () {\n }\n Person.prototyrpe={\n//重写prototype属性\nfriends:[\"mark\",\"lee\"],\n}\nvar person1 =new Person();\nvar person2 =new Person();\nperson1.friends.push（“van”）\nalert(person2.friends)//mark lee van\n```\n\n##### ！！！prototype 的指向确定属性，constructor确定构造方法","source":"_posts/fp.md","raw":"title: JavaScript设计模式\ndate: 2017/01/12\ncategories:\n- js\ntags:\n- js\n\n---\n# JavaScript设计模式\n\n## 工厂模式\n\n1，**用函数来封装特定接口创建对象的细节**。工厂模式解决了**创建多个相似对象对象的问题**，但还没有解决**对象识别的问题**。（通过函数封装）\n\n```\nfunction createPerson(name, age, job) {\n    var o = new Object();//用以封装接口的函数\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    sayName = function () {\n        alert(this.name);\n    };\n    return o;\n}\nvar person1 = createPerson('zxj', 23, \"Software Engineer\");\nvar person2 = createPerson('sdf', 25, \"Software Engineer\");\n```\n\n## 构造函数模式\n\n1，Person()中的代码除了和createPerson()中相同的部分外，还存在以下不同之处：\n\n- 没有显式的创建对象；\n- 直接将属性和方法赋给了this对象；\n- 没有return语句；\n  2，**创建构造函数Person的实例必须使用new运算符**：\n- 创建一个新对象；\n- **将构造函数的作用域赋给新对象**（因此this就指向这个新对象）；\n- 执行构造函数中的代码（为这个新对象添加属性和方法）；\n- 返回新对象；\n\n```\nfunction Person () {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n           alert(this.name); \n   }\n}\n    var person1 = new Person(\"mark\" , 29 , 'Software Engineer');\n    var person2 = new Person(\"Greg\" , 27 , 'Doctor');\n```\n\n3,**实例化的person1 ，person2 都有一个constructor 属性指向Person**(标示对象类型用constructor 检测对象类型用instanceof)\n\n> alert(person1.constructor == Person ); //true\n> alert(person1.constructor == Person ); //true\n> 通过构造的constructor 指向Person，通过原型使用**proto** 指向原型的prototype。\n\n4，构造函数与函数\n1， 两者的调用方式不同，构造函数**只能通过new操作符来调用**\n\n```\n// 当作构造函数\nvar person = new Person('zxj', 23, \"Software Engineer\");\nperson.sayName(); //zxj \n// 当作普通函数\nPerson('sdf', 25, \"Software Engineer\"); //添加到window\nwindow.sayName(); //saf\n// 在另一个对象的作用域中调用\nvar o = new Object();\nPerson.call(o, \"qwe\", 25, \"Nurse\");\no.sayName(); //qwe\n```\n\n2，构造函数的问题\n\n```\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;//被调用的函数\n}\n//相当于定义了全局的函数在构造函数体内被调用\nfunction sayName() {\n    alert(this.name);\n};\n//每个Person 实例都包含一个不同的FUNCTION以这种方式创建函数会导致不同的作用域链和标识符解析\nvar person1 = new Person('zxj', 23, \"Software Engineer\");\nvar person2 = new Person('sdf', 25, \"Software Engineer\");\n```\n\n# 原型模式\n\n1，每个函数都有一个prototype属性这个属性**包含一个\\*_proto_\\***这个属性是**一个指针**，**指向一个父对象的prototype**属性，而这个对象可以和特定实例共享属性和方法。\n\n```\nfunction Person(){\n}\nPerson.prototype.name = 'Nicholas';\nPersaon.prototype.age = 29;\nPerson.prototype.sayName = function (){\n    alert（this.name）;\n}\nvar person1 = new Person();\nperson1.sayName();//\"Nicholas\";\nvar person2 = new Person();\nperson2.sayName();//\"Nicholas\"\nalert(person1.sayName == person2.sayName) // true\n```\n\n2，**只要创建了一个新函数**就会有一组特定的规则为该函数**创建一个prototype**属性 这个属性中的**constructor指向f父对象描述了这个函数的构造方法**，***_proto_\\*指针指向父对象的prototype**\n*可以通过isPrototypeof方法来确定对象之间是否存在这种关系该方法返回一个Boolean值*\n\n> alert(person.prototype.isPrototypeof(person1))\n> alert(person.prototype.isPrototypeof(person2))\n\n3，原型模式实现原理 每当代码读取某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从**实例**本身开始。如果在**实例**中找到了具有给定名字的属性。如果查找到则返回，否则则在父对象的prototype中寻找通过 **proto**属性。（实例）\n\n4，delete可以删除来自原型的的值然后显示出继承自父对象的属性。\n\n```\nvar person1 = new Person();\nvar person2 = new Person();\nperson1.name  = \"mark\"\nalert(person1.name) //\"mark\"\nalert(person2.name) // \"Nichloas\"\ndelete person1.name ; \nalert(person1) // \"Nichloas\"\n```\n\n5 ,**hasOwnProperty()**是检测一个属性是存在于实例中还是存在与原型中（这个方法继承自Object对象） 该方法返回一个Boolean值\n\n```\nfunction Person () {\n}\nPerson.prototype.name = \"Nichloas\"\nPerson.prototype.age = \"Software Engineer \";\nPerson.prototype.sayName = function(){\n        alert(this.name)\n}\nvar person1 = new Person();\nvar  person2 = new Person();\nperson1.name  = \"Gerg\"\nalert (person.hasOwnProperty(\"name\")); //false 属性来自实例\nalert(person2.name)\nalert(person2.hasOwnProperty(\"name\"))://true 属性来自原型\ndelete person1.name\nalert(person1.hasOwnProperty(\"name\"))//true 属性0000000来自原型\n```\n\n### 原型与in操作符\n\n> 在for in 循环中使用\n> 单独使用时in 操作符通过对象能够访问给定属性时返回true 与hasOwnProperty不同in只判断是否访问到而后者判断是否来自原型\n\n```\n*判断存在于对象中或者存在于原型中代码*\nfunction hasProtootypeProperty(){\n     return !object .hasOwnProperty (name ) && (name in object)\n}\n```\n\n#### 在使用枚举 for in 时会返回可枚举的（enumerated）所有属性\n\n*ECMAscript5 将constuctor 和 prototype 属性[Enumerable]属性设置成false 不可枚举*\n要取得对象上所有可枚举的实例属性 可以使用Object.key()方法\n\n```\nvar key = Object.key(Person.prototype);\n```\n\n要取得所有实例属性（无论可否枚举）使用Object.getOwnPropertyNames()方法\n\n```\n var key = object.getOwnPropertyNames(Person.prototype);\n```\n\n(都可以替代for in 来获取实例属性)\n\n# 更简洁的的与原型语法\n\nPerson.prototype设置成为等于一个对象字面量形式创建的对象，相当于重构了Person.prototype。得到的结果相同。但constructor不再指向Person而是指向最初的Person原型\n*重写了prototype语法*\n先创建实例后修改原型依旧运转正常（**原型中查找值的过程是一次搜索**）\n\n```\nvar friend = new Person();\nPersonPrototype.sayHi = function() {\n        alert(\"hi\")\n}\nfriend.sayHi();\n```\n\n**原型的缺点**\n\n- 实例在默认情况下取得相同的属性值，所有属性被实例共享，对于包含引用类型的属性来说是一场灾难。\n\n```\n function Person () {\n }\n Person.prototyrpe={\n//重写prototype属性\nfriends:[\"mark\",\"lee\"],\n}\nvar person1 =new Person();\nvar person2 =new Person();\nperson1.friends.push（“van”）\nalert(person2.friends)//mark lee van\n```\n\n##### ！！！prototype 的指向确定属性，constructor确定构造方法","slug":"fp","published":1,"updated":"2024-04-10T17:46:25.877Z","_id":"cluvjqdcf00020wpddpshel98","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JavaScript设计模式\"><a href=\"#JavaScript设计模式\" class=\"headerlink\" title=\"JavaScript设计模式\"></a>JavaScript设计模式</h1><h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>1，<strong>用函数来封装特定接口创建对象的细节</strong>。工厂模式解决了<strong>创建多个相似对象对象的问题</strong>，但还没有解决<strong>对象识别的问题</strong>。（通过函数封装）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age, job) &#123;</span><br><span class=\"line\">    var o = new Object();//用以封装接口的函数</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age = age;</span><br><span class=\"line\">    o.job = job;</span><br><span class=\"line\">    sayName = function () &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = createPerson(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = createPerson(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>1，Person()中的代码除了和createPerson()中相同的部分外，还存在以下不同之处：</p>\n<ul>\n<li>没有显式的创建对象；</li>\n<li>直接将属性和方法赋给了this对象；</li>\n<li>没有return语句；<br>2，<strong>创建构造函数Person的实例必须使用new运算符</strong>：</li>\n<li>创建一个新对象；</li>\n<li><strong>将构造函数的作用域赋给新对象</strong>（因此this就指向这个新对象）；</li>\n<li>执行构造函数中的代码（为这个新对象添加属性和方法）；</li>\n<li>返回新对象；</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person () &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = function()&#123;</span><br><span class=\"line\">           alert(this.name); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    var person1 = new Person(&quot;mark&quot; , 29 , &#x27;Software Engineer&#x27;);</span><br><span class=\"line\">    var person2 = new Person(&quot;Greg&quot; , 27 , &#x27;Doctor&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>3,<strong>实例化的person1 ，person2 都有一个constructor 属性指向Person</strong>(标示对象类型用constructor 检测对象类型用instanceof)</p>\n<blockquote>\n<p>alert(person1.constructor &#x3D;&#x3D; Person ); &#x2F;&#x2F;true<br>alert(person1.constructor &#x3D;&#x3D; Person ); &#x2F;&#x2F;true<br>通过构造的constructor 指向Person，通过原型使用<strong>proto</strong> 指向原型的prototype。</p>\n</blockquote>\n<p>4，构造函数与函数<br>1， 两者的调用方式不同，构造函数<strong>只能通过new操作符来调用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当作构造函数</span><br><span class=\"line\">var person = new Person(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">person.sayName(); //zxj </span><br><span class=\"line\">// 当作普通函数</span><br><span class=\"line\">Person(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;); //添加到window</span><br><span class=\"line\">window.sayName(); //saf</span><br><span class=\"line\">// 在另一个对象的作用域中调用</span><br><span class=\"line\">var o = new Object();</span><br><span class=\"line\">Person.call(o, &quot;qwe&quot;, 25, &quot;Nurse&quot;);</span><br><span class=\"line\">o.sayName(); //qwe</span><br></pre></td></tr></table></figure>\n\n<p>2，构造函数的问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = sayName;//被调用的函数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//相当于定义了全局的函数在构造函数体内被调用</span><br><span class=\"line\">function sayName() &#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//每个Person 实例都包含一个不同的FUNCTION以这种方式创建函数会导致不同的作用域链和标识符解析</span><br><span class=\"line\">var person1 = new Person(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = new Person(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><p>1，每个函数都有一个prototype属性这个属性<strong>包含一个*<em>proto</em>*<strong>这个属性是</strong>一个指针</strong>，<strong>指向一个父对象的prototype</strong>属性，而这个对象可以和特定实例共享属性和方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &#x27;Nicholas&#x27;;</span><br><span class=\"line\">Persaon.prototype.age = 29;</span><br><span class=\"line\">Person.prototype.sayName = function ()&#123;</span><br><span class=\"line\">    alert（this.name）;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">person1.sayName();//&quot;Nicholas&quot;;</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName();//&quot;Nicholas&quot;</span><br><span class=\"line\">alert(person1.sayName == person2.sayName) // true</span><br></pre></td></tr></table></figure>\n\n<p>2，<strong>只要创建了一个新函数</strong>就会有一组特定的规则为该函数<strong>创建一个prototype</strong>属性 这个属性中的<strong>constructor指向f父对象描述了这个函数的构造方法</strong>，***<em>proto</em>*指针指向父对象的prototype**<br><em>可以通过isPrototypeof方法来确定对象之间是否存在这种关系该方法返回一个Boolean值</em></p>\n<blockquote>\n<p>alert(person.prototype.isPrototypeof(person1))<br>alert(person.prototype.isPrototypeof(person2))</p>\n</blockquote>\n<p>3，原型模式实现原理 每当代码读取某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从<strong>实例</strong>本身开始。如果在<strong>实例</strong>中找到了具有给定名字的属性。如果查找到则返回，否则则在父对象的prototype中寻找通过 <strong>proto</strong>属性。（实例）</p>\n<p>4，delete可以删除来自原型的的值然后显示出继承自父对象的属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person1.name  = &quot;mark&quot;</span><br><span class=\"line\">alert(person1.name) //&quot;mark&quot;</span><br><span class=\"line\">alert(person2.name) // &quot;Nichloas&quot;</span><br><span class=\"line\">delete person1.name ; </span><br><span class=\"line\">alert(person1) // &quot;Nichloas&quot;</span><br></pre></td></tr></table></figure>\n\n<p>5 ,**hasOwnProperty()**是检测一个属性是存在于实例中还是存在与原型中（这个方法继承自Object对象） 该方法返回一个Boolean值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person () &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;Nichloas&quot;</span><br><span class=\"line\">Person.prototype.age = &quot;Software Engineer &quot;;</span><br><span class=\"line\">Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var  person2 = new Person();</span><br><span class=\"line\">person1.name  = &quot;Gerg&quot;</span><br><span class=\"line\">alert (person.hasOwnProperty(&quot;name&quot;)); //false 属性来自实例</span><br><span class=\"line\">alert(person2.name)</span><br><span class=\"line\">alert(person2.hasOwnProperty(&quot;name&quot;))://true 属性来自原型</span><br><span class=\"line\">delete person1.name</span><br><span class=\"line\">alert(person1.hasOwnProperty(&quot;name&quot;))//true 属性0000000来自原型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h3><blockquote>\n<p>在for in 循环中使用<br>单独使用时in 操作符通过对象能够访问给定属性时返回true 与hasOwnProperty不同in只判断是否访问到而后者判断是否来自原型</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*判断存在于对象中或者存在于原型中代码*</span><br><span class=\"line\">function hasProtootypeProperty()&#123;</span><br><span class=\"line\">     return !object .hasOwnProperty (name ) &amp;&amp; (name in object)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在使用枚举-for-in-时会返回可枚举的（enumerated）所有属性\"><a href=\"#在使用枚举-for-in-时会返回可枚举的（enumerated）所有属性\" class=\"headerlink\" title=\"在使用枚举 for in 时会返回可枚举的（enumerated）所有属性\"></a>在使用枚举 for in 时会返回可枚举的（enumerated）所有属性</h4><p><em>ECMAscript5 将constuctor 和 prototype 属性[Enumerable]属性设置成false 不可枚举</em><br>要取得对象上所有可枚举的实例属性 可以使用Object.key()方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var key = Object.key(Person.prototype);</span><br></pre></td></tr></table></figure>\n\n<p>要取得所有实例属性（无论可否枚举）使用Object.getOwnPropertyNames()方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var key = object.getOwnPropertyNames(Person.prototype);</span><br></pre></td></tr></table></figure>\n\n<p>(都可以替代for in 来获取实例属性)</p>\n<h1 id=\"更简洁的的与原型语法\"><a href=\"#更简洁的的与原型语法\" class=\"headerlink\" title=\"更简洁的的与原型语法\"></a>更简洁的的与原型语法</h1><p>Person.prototype设置成为等于一个对象字面量形式创建的对象，相当于重构了Person.prototype。得到的结果相同。但constructor不再指向Person而是指向最初的Person原型<br><em>重写了prototype语法</em><br>先创建实例后修改原型依旧运转正常（<strong>原型中查找值的过程是一次搜索</strong>）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var friend = new Person();</span><br><span class=\"line\">PersonPrototype.sayHi = function() &#123;</span><br><span class=\"line\">        alert(&quot;hi&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">friend.sayHi();</span><br></pre></td></tr></table></figure>\n\n<p><strong>原型的缺点</strong></p>\n<ul>\n<li>实例在默认情况下取得相同的属性值，所有属性被实例共享，对于包含引用类型的属性来说是一场灾难。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function Person () &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Person.prototyrpe=&#123;</span><br><span class=\"line\">//重写prototype属性</span><br><span class=\"line\">friends:[&quot;mark&quot;,&quot;lee&quot;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 =new Person();</span><br><span class=\"line\">var person2 =new Person();</span><br><span class=\"line\">person1.friends.push（“van”）</span><br><span class=\"line\">alert(person2.friends)//mark lee van</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"！！！prototype-的指向确定属性，constructor确定构造方法\"><a href=\"#！！！prototype-的指向确定属性，constructor确定构造方法\" class=\"headerlink\" title=\"！！！prototype 的指向确定属性，constructor确定构造方法\"></a>！！！prototype 的指向确定属性，constructor确定构造方法</h5>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript设计模式\"><a href=\"#JavaScript设计模式\" class=\"headerlink\" title=\"JavaScript设计模式\"></a>JavaScript设计模式</h1><h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>1，<strong>用函数来封装特定接口创建对象的细节</strong>。工厂模式解决了<strong>创建多个相似对象对象的问题</strong>，但还没有解决<strong>对象识别的问题</strong>。（通过函数封装）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age, job) &#123;</span><br><span class=\"line\">    var o = new Object();//用以封装接口的函数</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age = age;</span><br><span class=\"line\">    o.job = job;</span><br><span class=\"line\">    sayName = function () &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = createPerson(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = createPerson(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>1，Person()中的代码除了和createPerson()中相同的部分外，还存在以下不同之处：</p>\n<ul>\n<li>没有显式的创建对象；</li>\n<li>直接将属性和方法赋给了this对象；</li>\n<li>没有return语句；<br>2，<strong>创建构造函数Person的实例必须使用new运算符</strong>：</li>\n<li>创建一个新对象；</li>\n<li><strong>将构造函数的作用域赋给新对象</strong>（因此this就指向这个新对象）；</li>\n<li>执行构造函数中的代码（为这个新对象添加属性和方法）；</li>\n<li>返回新对象；</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person () &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = function()&#123;</span><br><span class=\"line\">           alert(this.name); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    var person1 = new Person(&quot;mark&quot; , 29 , &#x27;Software Engineer&#x27;);</span><br><span class=\"line\">    var person2 = new Person(&quot;Greg&quot; , 27 , &#x27;Doctor&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>3,<strong>实例化的person1 ，person2 都有一个constructor 属性指向Person</strong>(标示对象类型用constructor 检测对象类型用instanceof)</p>\n<blockquote>\n<p>alert(person1.constructor &#x3D;&#x3D; Person ); &#x2F;&#x2F;true<br>alert(person1.constructor &#x3D;&#x3D; Person ); &#x2F;&#x2F;true<br>通过构造的constructor 指向Person，通过原型使用<strong>proto</strong> 指向原型的prototype。</p>\n</blockquote>\n<p>4，构造函数与函数<br>1， 两者的调用方式不同，构造函数<strong>只能通过new操作符来调用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当作构造函数</span><br><span class=\"line\">var person = new Person(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">person.sayName(); //zxj </span><br><span class=\"line\">// 当作普通函数</span><br><span class=\"line\">Person(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;); //添加到window</span><br><span class=\"line\">window.sayName(); //saf</span><br><span class=\"line\">// 在另一个对象的作用域中调用</span><br><span class=\"line\">var o = new Object();</span><br><span class=\"line\">Person.call(o, &quot;qwe&quot;, 25, &quot;Nurse&quot;);</span><br><span class=\"line\">o.sayName(); //qwe</span><br></pre></td></tr></table></figure>\n\n<p>2，构造函数的问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = sayName;//被调用的函数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//相当于定义了全局的函数在构造函数体内被调用</span><br><span class=\"line\">function sayName() &#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//每个Person 实例都包含一个不同的FUNCTION以这种方式创建函数会导致不同的作用域链和标识符解析</span><br><span class=\"line\">var person1 = new Person(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = new Person(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><p>1，每个函数都有一个prototype属性这个属性<strong>包含一个*<em>proto</em>*<strong>这个属性是</strong>一个指针</strong>，<strong>指向一个父对象的prototype</strong>属性，而这个对象可以和特定实例共享属性和方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &#x27;Nicholas&#x27;;</span><br><span class=\"line\">Persaon.prototype.age = 29;</span><br><span class=\"line\">Person.prototype.sayName = function ()&#123;</span><br><span class=\"line\">    alert（this.name）;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">person1.sayName();//&quot;Nicholas&quot;;</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName();//&quot;Nicholas&quot;</span><br><span class=\"line\">alert(person1.sayName == person2.sayName) // true</span><br></pre></td></tr></table></figure>\n\n<p>2，<strong>只要创建了一个新函数</strong>就会有一组特定的规则为该函数<strong>创建一个prototype</strong>属性 这个属性中的<strong>constructor指向f父对象描述了这个函数的构造方法</strong>，***<em>proto</em>*指针指向父对象的prototype**<br><em>可以通过isPrototypeof方法来确定对象之间是否存在这种关系该方法返回一个Boolean值</em></p>\n<blockquote>\n<p>alert(person.prototype.isPrototypeof(person1))<br>alert(person.prototype.isPrototypeof(person2))</p>\n</blockquote>\n<p>3，原型模式实现原理 每当代码读取某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从<strong>实例</strong>本身开始。如果在<strong>实例</strong>中找到了具有给定名字的属性。如果查找到则返回，否则则在父对象的prototype中寻找通过 <strong>proto</strong>属性。（实例）</p>\n<p>4，delete可以删除来自原型的的值然后显示出继承自父对象的属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person1.name  = &quot;mark&quot;</span><br><span class=\"line\">alert(person1.name) //&quot;mark&quot;</span><br><span class=\"line\">alert(person2.name) // &quot;Nichloas&quot;</span><br><span class=\"line\">delete person1.name ; </span><br><span class=\"line\">alert(person1) // &quot;Nichloas&quot;</span><br></pre></td></tr></table></figure>\n\n<p>5 ,**hasOwnProperty()**是检测一个属性是存在于实例中还是存在与原型中（这个方法继承自Object对象） 该方法返回一个Boolean值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person () &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;Nichloas&quot;</span><br><span class=\"line\">Person.prototype.age = &quot;Software Engineer &quot;;</span><br><span class=\"line\">Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var  person2 = new Person();</span><br><span class=\"line\">person1.name  = &quot;Gerg&quot;</span><br><span class=\"line\">alert (person.hasOwnProperty(&quot;name&quot;)); //false 属性来自实例</span><br><span class=\"line\">alert(person2.name)</span><br><span class=\"line\">alert(person2.hasOwnProperty(&quot;name&quot;))://true 属性来自原型</span><br><span class=\"line\">delete person1.name</span><br><span class=\"line\">alert(person1.hasOwnProperty(&quot;name&quot;))//true 属性0000000来自原型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h3><blockquote>\n<p>在for in 循环中使用<br>单独使用时in 操作符通过对象能够访问给定属性时返回true 与hasOwnProperty不同in只判断是否访问到而后者判断是否来自原型</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*判断存在于对象中或者存在于原型中代码*</span><br><span class=\"line\">function hasProtootypeProperty()&#123;</span><br><span class=\"line\">     return !object .hasOwnProperty (name ) &amp;&amp; (name in object)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在使用枚举-for-in-时会返回可枚举的（enumerated）所有属性\"><a href=\"#在使用枚举-for-in-时会返回可枚举的（enumerated）所有属性\" class=\"headerlink\" title=\"在使用枚举 for in 时会返回可枚举的（enumerated）所有属性\"></a>在使用枚举 for in 时会返回可枚举的（enumerated）所有属性</h4><p><em>ECMAscript5 将constuctor 和 prototype 属性[Enumerable]属性设置成false 不可枚举</em><br>要取得对象上所有可枚举的实例属性 可以使用Object.key()方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var key = Object.key(Person.prototype);</span><br></pre></td></tr></table></figure>\n\n<p>要取得所有实例属性（无论可否枚举）使用Object.getOwnPropertyNames()方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var key = object.getOwnPropertyNames(Person.prototype);</span><br></pre></td></tr></table></figure>\n\n<p>(都可以替代for in 来获取实例属性)</p>\n<h1 id=\"更简洁的的与原型语法\"><a href=\"#更简洁的的与原型语法\" class=\"headerlink\" title=\"更简洁的的与原型语法\"></a>更简洁的的与原型语法</h1><p>Person.prototype设置成为等于一个对象字面量形式创建的对象，相当于重构了Person.prototype。得到的结果相同。但constructor不再指向Person而是指向最初的Person原型<br><em>重写了prototype语法</em><br>先创建实例后修改原型依旧运转正常（<strong>原型中查找值的过程是一次搜索</strong>）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var friend = new Person();</span><br><span class=\"line\">PersonPrototype.sayHi = function() &#123;</span><br><span class=\"line\">        alert(&quot;hi&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">friend.sayHi();</span><br></pre></td></tr></table></figure>\n\n<p><strong>原型的缺点</strong></p>\n<ul>\n<li>实例在默认情况下取得相同的属性值，所有属性被实例共享，对于包含引用类型的属性来说是一场灾难。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function Person () &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Person.prototyrpe=&#123;</span><br><span class=\"line\">//重写prototype属性</span><br><span class=\"line\">friends:[&quot;mark&quot;,&quot;lee&quot;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 =new Person();</span><br><span class=\"line\">var person2 =new Person();</span><br><span class=\"line\">person1.friends.push（“van”）</span><br><span class=\"line\">alert(person2.friends)//mark lee van</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"！！！prototype-的指向确定属性，constructor确定构造方法\"><a href=\"#！！！prototype-的指向确定属性，constructor确定构造方法\" class=\"headerlink\" title=\"！！！prototype 的指向确定属性，constructor确定构造方法\"></a>！！！prototype 的指向确定属性，constructor确定构造方法</h5>"},{"title":"A abstract S syntax T tree","date":"2020-01-01T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/ast.png","_content":"\n# AST 抽象语法树\n\n\n\n## 什么是AST？\n\n> 是[源代码](https://zh.wikipedia.org/wiki/源代码)[语法](https://zh.wikipedia.org/wiki/语法学)结构的一种抽象表示。它以[树状](https://zh.wikipedia.org/wiki/树_(图论))的形式表现[编程语言](https://zh.wikipedia.org/wiki/编程语言)的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 `if-condition-then` 这样的条件跳转语句，可以使用带有三个分支的节点来表示。 \n> -- From wiki\n\nAST是代码片段具体语义的抽象表达可以与目标代码之间相互转换的一种中间状态。\n\n## Javascript Compiler\n\n我们最常用的Javascript compiler babel首页是这样描述的。\n\n> Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Here are the main things Babel can do for you:\n>\n> - Transform syntax\n> - Polyfill features that are missing in your target environment (through [@babel/polyfill](https://babeljs.io/docs/en/babel-polyfill))\n> - Source code transformations (codemods)\n> - And more! (check out these [videos](https://babeljs.io/videos.html) for inspiration)\n\nbabel 的 parser traverse是基于Ecmascript标准实现的，很重要的一点就是其中节点类型。\n\n以下是 [ECMAScript](https://262.ecma-international.org/7.0/#sec-grammar-summary)支持的词法类型.\n\n![image-20210321210154324](https://technologybook.tech/assets/img/ast1.png)\n\n\n\n## AST的数据结构\n\n了解一个parser的结构，以及parser解析语法所依赖的规则后，接下来，我们需要了解一下一个parser所生产出来的结果——抽象语法树。在文章的开头，我有简单的解释抽象语法树即是具体代码片段的抽象表达，那它具体是长什么样的呢？\n\n```javascript\nfunction sayHi() {\n\tvar hi = \"hi!\";\n\tconsole.log(hi)\n}\n```\n\n以上的代码片段，AST树结构如下：\n\n```json\n{\n  \"type\": \"Program\",\n  \"start\": 0,\n  \"end\": 54,\n  \"body\": [\n    {\n      \"type\": \"FunctionDeclaration\",\n      \"start\": 0,\n      \"end\": 54,\n      \"id\": {\n        \"type\": \"Identifier\",\n        \"start\": 9,\n        \"end\": 14,\n        \"name\": \"sayHi\"\n      },\n      \"expression\": false,\n      \"generator\": false,\n      \"async\": false,\n      \"params\": [],\n      \"body\": {\n        \"type\": \"BlockStatement\",\n        \"start\": 17,\n        \"end\": 54,\n        \"body\": [\n          {\n            \"type\": \"VariableDeclaration\",\n            \"start\": 20,\n            \"end\": 35,\n            \"declarations\": [\n              {\n                \"type\": \"VariableDeclarator\",\n                \"start\": 24,\n                \"end\": 34,\n                \"id\": {\n                  \"type\": \"Identifier\",\n                  \"start\": 24,\n                  \"end\": 26,\n                  \"name\": \"hi\"\n                },\n                \"init\": {\n                  \"type\": \"Literal\",\n                  \"start\": 29,\n                  \"end\": 34,\n                  \"value\": \"hi!\",\n                  \"raw\": \"\\\"hi!\\\"\"\n                }\n              }\n            ],\n            \"kind\": \"var\"\n          },\n          {\n            \"type\": \"ExpressionStatement\",\n            \"start\": 37,\n            \"end\": 52,\n            \"expression\": {\n              \"type\": \"CallExpression\",\n              \"start\": 37,\n              \"end\": 52,\n              \"callee\": {\n                \"type\": \"MemberExpression\",\n                \"start\": 37,\n                \"end\": 48,\n                \"object\": {\n                  \"type\": \"Identifier\",\n                  \"start\": 37,\n                  \"end\": 44,\n                  \"name\": \"console\"\n                },\n                \"property\": {\n                  \"type\": \"Identifier\",\n                  \"start\": 45,\n                  \"end\": 48,\n                  \"name\": \"log\"\n                },\n                \"computed\": false,\n                \"optional\": false\n              },\n              \"arguments\": [\n                {\n                  \"type\": \"Identifier\",\n                  \"start\": 49,\n                  \"end\": 51,\n                  \"name\": \"hi\"\n                }\n              ],\n              \"optional\": false\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"sourceType\": \"module\"\n}\n```\n\nAST将标识符（identifier）、表达式（expression）、语句（statement）等抽象成为树状结构。\n\n## 实现一个简单的 parser\n\n![image-20210321210154324](https://technologybook.tech/assets/img/ast3.png)\n\nLever.ts\n\n```typescript\nimport {IHelper} from \"./helper\";\n\nnamespace Checker {\n    export function isBrackets(ch: string) {\n        return /[\\(\\)\\{\\}\\[\\]\\,\\;]/i.test(ch);\n    }\n    export function isWhitespace(ch: string) {\n        return \" \\t\\n\".indexOf(ch) >= 0;\n    }\n    export function isNumber(ch: string) {\n        return /[0-9]/i.test(ch);\n    }\n    export function isVarName(ch: string) {\n        return /\\w+|_|$/i.test(ch);\n    }\n    export function isStartString(ch: string) {\n        return '\"' === ch;\n    }\n    export function isOp(ch: string) {\n        return /[\\+\\-\\*\\/\\=\\&\\|\\!\\<\\>]/i.test(ch);\n    }\n}\n\nexport default class Lexer implements IHelper<{type: string, value: string|number}>{\n    currentPosVal: {type: string, value: string|number} = {} as any\n\n    current() {\n        return this.currentPosVal || (this.currentPosVal = this.readByPos());\n    }\n\n    end() {\n        return this.strHelper.end();\n    }\n\n    next() {\n        let value = this.current();\n        this.currentPosVal = null;\n        return value;\n    }\n\n    constructor(public strHelper: IHelper<string>) {\n        this.strHelper = strHelper;\n    }\n\n    pack(fn: (ch: string) => boolean) {\n        let box = \"\";\n        while (fn(this.strHelper.current()) && !this.strHelper.end()) {\n            box += this.strHelper.next();\n        }\n        return box;\n    }\n\n    handleNumber() {\n        const value = this.pack(Checker.isNumber);\n        return {\n            type: 'Number',\n            value: parseInt(value)\n        }\n    }\n\n    handleVar() {\n        const value = this.pack(Checker.isVarName);\n        return {\n            type: \"Variable\",\n            value: value\n        }\n    }\n\n    handleString(){\n        return {type: \"String\", value: this.readStringToEnd()}\n    }\n\n    handleWhitespace() {\n        this.pack(Checker.isWhitespace)\n    }\n\n    readStringToEnd() {\n        let isEnd = false,\n            str = \"\";\n        while (!this.strHelper.end()) {\n            let c = this.strHelper.next();\n            if (c === '\"') {\n                isEnd = true\n            } else {\n                str += c;\n            }\n        }\n        return str;\n    }\n\n    private handleOperation() {\n        {\n            return {\n                type: \"Operation\",\n                value: this.pack(Checker.isOp)\n            }\n        }\n    }\n\n    private handleBrackets() {\n        return {\n            type: \"Bracket\",\n            value: this.strHelper.next()\n        };\n    }\n\n    readByPos() {\n        this.handleWhitespace();\n        if (this.strHelper.end()) return {type: \"End\", value: \"End\"};\n        let c = this.strHelper.current();\n        if (Checker.isStartString(c)) return this.handleString();\n        if (Checker.isNumber(c)) return this.handleNumber()\n        if (Checker.isVarName(c)) return this.handleVar()\n        if (Checker.isBrackets(c)) return this.handleBrackets();\n        if (Checker.isOp(c)) return this.handleOperation();\n        return {type: \"Error\", value: \"Error\"};\n    }\n}\n\n```\n\nParser.ts\n\n```typescript\nimport Lexer from \"./lexer\";\n\nfunction parser(token: Lexer) {\n    const program = [];\n    if (!token) return \"\";\n    function isBracket(ch) {\n        var tok = token.current();\n        return tok && tok.type == \"Bracket\" && (!ch || tok.value == ch) && tok;\n    }\n    function isKeywords(kw) {\n        var tok = token.current();\n        return tok && tok.type == \"KeyWord\" && (!kw || tok.value == kw) && tok;\n    }\n    function isOp(op?) {\n        var tok = token.current();\n        return tok && tok.type == \"Operation\" && (!op || tok.value == op) && tok;\n    }\n    function skipBracket(ch) {\n        if (isBracket(ch)) token.next();\n    }\n    function skipKeywords(kw) {\n        if (isKeywords(kw)) token.next();\n    }\n    function skipOp(op) {\n        if (isOp(op)) token.next();\n    }\n    function parseBlock() {\n        var body = [];\n        skipBracket(\"{\");\n\n        while (!isBracket(\"}\")) {\n            var sts = parse()\n            sts && body.push(sts);\n        }\n        skipBracket(\"}\");\n        return {\n            type: \"BlockStatement\",\n            body: body\n        }\n    }\n    function parseVariable() {\n        skipKeywords(\"var\");\n        return {\n            type  : \"VariableDeclaration\",\n            declarations: parseDeclarator(),\n            kind  : \"var\"\n        }\n    }\n\n    function parseDeclarator() {\n        var id = parseIdentifier();\n        skipOp(\"=\");\n        return {\n            type: \"VariableDeclarator\",\n            id: id,\n            init: parseExpression()\n        }\n    }\n\n\n    function parseExpression() {\n        return maybeCall(function(){\n            return maybeBinary(parseAtom(), 0);\n        });\n    }\n\n    function maybeBinary(left, le) {\n        var tok = isOp();\n        if (tok) {\n            var prec = {\n                \"=\": 1,\n                \"||\": 2,\n                \"&&\": 3,\n                \"<\": 7,\n                \">\": 7,\n                \"<=\": 7,\n                \">=\": 7,\n                \"==\": 7,\n                \"!=\": 7,\n                \"+\": 10,\n                \"-\": 10,\n                \"*\": 20,\n                \"/\": 20,\n                \"%\": 20,\n            }[tok.value];\n            if (prec > le) {\n                token.next();\n                return maybeBinary({\n                    type     : tok.value == \"=\" ? \"assign\" : \"binary\",\n                    operator : tok.value,\n                    left     : left,\n                    right    : maybeBinary(parseAtom(), prec)\n                }, le);\n            }\n        }\n        return left;\n    }\n\n    function parseAtom() {\n        return maybeCall(function(){\n            if (isBracket(\"(\")) {\n                token.next();\n                var exp = parseExpression();\n  \n\n    function parse() {\n        if(isBracket(\";\")) skipBracket(\";\");\n        else if (isBracket(\"{\")) return parseBlock();\n        else if (isKeywords(\"var\")) return parseVariable();\n        else if (isKeywords(\"if\")) return parseIf();\n        else return parseExpression();\n    }\n\n    while (!token.end()) {\n        program.push(parse())\n    }\n    return {type: \"Program\", value: []}\n}\n```\n\n","source":"_posts/ast.md","raw":"title: A abstract S syntax T tree\ndate: 2020/01/02\ncover: https://technologybook.tech/assets/img/ast.png\ncategories:\n- compiler\ntags:\n- ast\n\n---\n\n# AST 抽象语法树\n\n\n\n## 什么是AST？\n\n> 是[源代码](https://zh.wikipedia.org/wiki/源代码)[语法](https://zh.wikipedia.org/wiki/语法学)结构的一种抽象表示。它以[树状](https://zh.wikipedia.org/wiki/树_(图论))的形式表现[编程语言](https://zh.wikipedia.org/wiki/编程语言)的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 `if-condition-then` 这样的条件跳转语句，可以使用带有三个分支的节点来表示。 \n> -- From wiki\n\nAST是代码片段具体语义的抽象表达可以与目标代码之间相互转换的一种中间状态。\n\n## Javascript Compiler\n\n我们最常用的Javascript compiler babel首页是这样描述的。\n\n> Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Here are the main things Babel can do for you:\n>\n> - Transform syntax\n> - Polyfill features that are missing in your target environment (through [@babel/polyfill](https://babeljs.io/docs/en/babel-polyfill))\n> - Source code transformations (codemods)\n> - And more! (check out these [videos](https://babeljs.io/videos.html) for inspiration)\n\nbabel 的 parser traverse是基于Ecmascript标准实现的，很重要的一点就是其中节点类型。\n\n以下是 [ECMAScript](https://262.ecma-international.org/7.0/#sec-grammar-summary)支持的词法类型.\n\n![image-20210321210154324](https://technologybook.tech/assets/img/ast1.png)\n\n\n\n## AST的数据结构\n\n了解一个parser的结构，以及parser解析语法所依赖的规则后，接下来，我们需要了解一下一个parser所生产出来的结果——抽象语法树。在文章的开头，我有简单的解释抽象语法树即是具体代码片段的抽象表达，那它具体是长什么样的呢？\n\n```javascript\nfunction sayHi() {\n\tvar hi = \"hi!\";\n\tconsole.log(hi)\n}\n```\n\n以上的代码片段，AST树结构如下：\n\n```json\n{\n  \"type\": \"Program\",\n  \"start\": 0,\n  \"end\": 54,\n  \"body\": [\n    {\n      \"type\": \"FunctionDeclaration\",\n      \"start\": 0,\n      \"end\": 54,\n      \"id\": {\n        \"type\": \"Identifier\",\n        \"start\": 9,\n        \"end\": 14,\n        \"name\": \"sayHi\"\n      },\n      \"expression\": false,\n      \"generator\": false,\n      \"async\": false,\n      \"params\": [],\n      \"body\": {\n        \"type\": \"BlockStatement\",\n        \"start\": 17,\n        \"end\": 54,\n        \"body\": [\n          {\n            \"type\": \"VariableDeclaration\",\n            \"start\": 20,\n            \"end\": 35,\n            \"declarations\": [\n              {\n                \"type\": \"VariableDeclarator\",\n                \"start\": 24,\n                \"end\": 34,\n                \"id\": {\n                  \"type\": \"Identifier\",\n                  \"start\": 24,\n                  \"end\": 26,\n                  \"name\": \"hi\"\n                },\n                \"init\": {\n                  \"type\": \"Literal\",\n                  \"start\": 29,\n                  \"end\": 34,\n                  \"value\": \"hi!\",\n                  \"raw\": \"\\\"hi!\\\"\"\n                }\n              }\n            ],\n            \"kind\": \"var\"\n          },\n          {\n            \"type\": \"ExpressionStatement\",\n            \"start\": 37,\n            \"end\": 52,\n            \"expression\": {\n              \"type\": \"CallExpression\",\n              \"start\": 37,\n              \"end\": 52,\n              \"callee\": {\n                \"type\": \"MemberExpression\",\n                \"start\": 37,\n                \"end\": 48,\n                \"object\": {\n                  \"type\": \"Identifier\",\n                  \"start\": 37,\n                  \"end\": 44,\n                  \"name\": \"console\"\n                },\n                \"property\": {\n                  \"type\": \"Identifier\",\n                  \"start\": 45,\n                  \"end\": 48,\n                  \"name\": \"log\"\n                },\n                \"computed\": false,\n                \"optional\": false\n              },\n              \"arguments\": [\n                {\n                  \"type\": \"Identifier\",\n                  \"start\": 49,\n                  \"end\": 51,\n                  \"name\": \"hi\"\n                }\n              ],\n              \"optional\": false\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"sourceType\": \"module\"\n}\n```\n\nAST将标识符（identifier）、表达式（expression）、语句（statement）等抽象成为树状结构。\n\n## 实现一个简单的 parser\n\n![image-20210321210154324](https://technologybook.tech/assets/img/ast3.png)\n\nLever.ts\n\n```typescript\nimport {IHelper} from \"./helper\";\n\nnamespace Checker {\n    export function isBrackets(ch: string) {\n        return /[\\(\\)\\{\\}\\[\\]\\,\\;]/i.test(ch);\n    }\n    export function isWhitespace(ch: string) {\n        return \" \\t\\n\".indexOf(ch) >= 0;\n    }\n    export function isNumber(ch: string) {\n        return /[0-9]/i.test(ch);\n    }\n    export function isVarName(ch: string) {\n        return /\\w+|_|$/i.test(ch);\n    }\n    export function isStartString(ch: string) {\n        return '\"' === ch;\n    }\n    export function isOp(ch: string) {\n        return /[\\+\\-\\*\\/\\=\\&\\|\\!\\<\\>]/i.test(ch);\n    }\n}\n\nexport default class Lexer implements IHelper<{type: string, value: string|number}>{\n    currentPosVal: {type: string, value: string|number} = {} as any\n\n    current() {\n        return this.currentPosVal || (this.currentPosVal = this.readByPos());\n    }\n\n    end() {\n        return this.strHelper.end();\n    }\n\n    next() {\n        let value = this.current();\n        this.currentPosVal = null;\n        return value;\n    }\n\n    constructor(public strHelper: IHelper<string>) {\n        this.strHelper = strHelper;\n    }\n\n    pack(fn: (ch: string) => boolean) {\n        let box = \"\";\n        while (fn(this.strHelper.current()) && !this.strHelper.end()) {\n            box += this.strHelper.next();\n        }\n        return box;\n    }\n\n    handleNumber() {\n        const value = this.pack(Checker.isNumber);\n        return {\n            type: 'Number',\n            value: parseInt(value)\n        }\n    }\n\n    handleVar() {\n        const value = this.pack(Checker.isVarName);\n        return {\n            type: \"Variable\",\n            value: value\n        }\n    }\n\n    handleString(){\n        return {type: \"String\", value: this.readStringToEnd()}\n    }\n\n    handleWhitespace() {\n        this.pack(Checker.isWhitespace)\n    }\n\n    readStringToEnd() {\n        let isEnd = false,\n            str = \"\";\n        while (!this.strHelper.end()) {\n            let c = this.strHelper.next();\n            if (c === '\"') {\n                isEnd = true\n            } else {\n                str += c;\n            }\n        }\n        return str;\n    }\n\n    private handleOperation() {\n        {\n            return {\n                type: \"Operation\",\n                value: this.pack(Checker.isOp)\n            }\n        }\n    }\n\n    private handleBrackets() {\n        return {\n            type: \"Bracket\",\n            value: this.strHelper.next()\n        };\n    }\n\n    readByPos() {\n        this.handleWhitespace();\n        if (this.strHelper.end()) return {type: \"End\", value: \"End\"};\n        let c = this.strHelper.current();\n        if (Checker.isStartString(c)) return this.handleString();\n        if (Checker.isNumber(c)) return this.handleNumber()\n        if (Checker.isVarName(c)) return this.handleVar()\n        if (Checker.isBrackets(c)) return this.handleBrackets();\n        if (Checker.isOp(c)) return this.handleOperation();\n        return {type: \"Error\", value: \"Error\"};\n    }\n}\n\n```\n\nParser.ts\n\n```typescript\nimport Lexer from \"./lexer\";\n\nfunction parser(token: Lexer) {\n    const program = [];\n    if (!token) return \"\";\n    function isBracket(ch) {\n        var tok = token.current();\n        return tok && tok.type == \"Bracket\" && (!ch || tok.value == ch) && tok;\n    }\n    function isKeywords(kw) {\n        var tok = token.current();\n        return tok && tok.type == \"KeyWord\" && (!kw || tok.value == kw) && tok;\n    }\n    function isOp(op?) {\n        var tok = token.current();\n        return tok && tok.type == \"Operation\" && (!op || tok.value == op) && tok;\n    }\n    function skipBracket(ch) {\n        if (isBracket(ch)) token.next();\n    }\n    function skipKeywords(kw) {\n        if (isKeywords(kw)) token.next();\n    }\n    function skipOp(op) {\n        if (isOp(op)) token.next();\n    }\n    function parseBlock() {\n        var body = [];\n        skipBracket(\"{\");\n\n        while (!isBracket(\"}\")) {\n            var sts = parse()\n            sts && body.push(sts);\n        }\n        skipBracket(\"}\");\n        return {\n            type: \"BlockStatement\",\n            body: body\n        }\n    }\n    function parseVariable() {\n        skipKeywords(\"var\");\n        return {\n            type  : \"VariableDeclaration\",\n            declarations: parseDeclarator(),\n            kind  : \"var\"\n        }\n    }\n\n    function parseDeclarator() {\n        var id = parseIdentifier();\n        skipOp(\"=\");\n        return {\n            type: \"VariableDeclarator\",\n            id: id,\n            init: parseExpression()\n        }\n    }\n\n\n    function parseExpression() {\n        return maybeCall(function(){\n            return maybeBinary(parseAtom(), 0);\n        });\n    }\n\n    function maybeBinary(left, le) {\n        var tok = isOp();\n        if (tok) {\n            var prec = {\n                \"=\": 1,\n                \"||\": 2,\n                \"&&\": 3,\n                \"<\": 7,\n                \">\": 7,\n                \"<=\": 7,\n                \">=\": 7,\n                \"==\": 7,\n                \"!=\": 7,\n                \"+\": 10,\n                \"-\": 10,\n                \"*\": 20,\n                \"/\": 20,\n                \"%\": 20,\n            }[tok.value];\n            if (prec > le) {\n                token.next();\n                return maybeBinary({\n                    type     : tok.value == \"=\" ? \"assign\" : \"binary\",\n                    operator : tok.value,\n                    left     : left,\n                    right    : maybeBinary(parseAtom(), prec)\n                }, le);\n            }\n        }\n        return left;\n    }\n\n    function parseAtom() {\n        return maybeCall(function(){\n            if (isBracket(\"(\")) {\n                token.next();\n                var exp = parseExpression();\n  \n\n    function parse() {\n        if(isBracket(\";\")) skipBracket(\";\");\n        else if (isBracket(\"{\")) return parseBlock();\n        else if (isKeywords(\"var\")) return parseVariable();\n        else if (isKeywords(\"if\")) return parseIf();\n        else return parseExpression();\n    }\n\n    while (!token.end()) {\n        program.push(parse())\n    }\n    return {type: \"Program\", value: []}\n}\n```\n\n","slug":"ast","published":1,"updated":"2024-04-10T17:46:25.876Z","_id":"cluvjqdcu00070wpdg2qoab06","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"AST-抽象语法树\"><a href=\"#AST-抽象语法树\" class=\"headerlink\" title=\"AST 抽象语法树\"></a>AST 抽象语法树</h1><h2 id=\"什么是AST？\"><a href=\"#什么是AST？\" class=\"headerlink\" title=\"什么是AST？\"></a>什么是AST？</h2><blockquote>\n<p>是<a href=\"https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a><a href=\"https://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E5%AD%A6\">语法</a>结构的一种抽象表示。它以<a href=\"https://zh.wikipedia.org/wiki/%E6%A0%91_(%E5%9B%BE%E8%AE%BA)\">树状</a>的形式表现<a href=\"https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80\">编程语言</a>的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 <code>if-condition-then</code> 这样的条件跳转语句，可以使用带有三个分支的节点来表示。<br>– From wiki</p>\n</blockquote>\n<p>AST是代码片段具体语义的抽象表达可以与目标代码之间相互转换的一种中间状态。</p>\n<h2 id=\"Javascript-Compiler\"><a href=\"#Javascript-Compiler\" class=\"headerlink\" title=\"Javascript Compiler\"></a>Javascript Compiler</h2><p>我们最常用的Javascript compiler babel首页是这样描述的。</p>\n<blockquote>\n<p>Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Here are the main things Babel can do for you:</p>\n<ul>\n<li>Transform syntax</li>\n<li>Polyfill features that are missing in your target environment (through <a href=\"https://babeljs.io/docs/en/babel-polyfill\">@babel&#x2F;polyfill</a>)</li>\n<li>Source code transformations (codemods)</li>\n<li>And more! (check out these <a href=\"https://babeljs.io/videos.html\">videos</a> for inspiration)</li>\n</ul>\n</blockquote>\n<p>babel 的 parser traverse是基于Ecmascript标准实现的，很重要的一点就是其中节点类型。</p>\n<p>以下是 <a href=\"https://262.ecma-international.org/7.0/#sec-grammar-summary\">ECMAScript</a>支持的词法类型.</p>\n<p><img src=\"https://technologybook.tech/assets/img/ast1.png\" alt=\"image-20210321210154324\"></p>\n<h2 id=\"AST的数据结构\"><a href=\"#AST的数据结构\" class=\"headerlink\" title=\"AST的数据结构\"></a>AST的数据结构</h2><p>了解一个parser的结构，以及parser解析语法所依赖的规则后，接下来，我们需要了解一下一个parser所生产出来的结果——抽象语法树。在文章的开头，我有简单的解释抽象语法树即是具体代码片段的抽象表达，那它具体是长什么样的呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hi = <span class=\"string\">&quot;hi!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(hi)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上的代码片段，AST树结构如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Program&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">54</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;FunctionDeclaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">54</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">9</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">14</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sayHi&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;generator&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;async&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;params&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;BlockStatement&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">17</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">54</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VariableDeclaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">20</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">35</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;declarations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VariableDeclarator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">24</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">34</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">24</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">26</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hi&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;init&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Literal&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">29</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">34</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hi!&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;raw&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;\\&quot;hi!\\&quot;&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kind&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ExpressionStatement&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">52</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CallExpression&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">52</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;callee&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;MemberExpression&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">48</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;object&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">44</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;console&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;property&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">45</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">48</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;computed&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;optional&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;arguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">49</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">51</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hi&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">              <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;optional&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sourceType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;module&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>AST将标识符（identifier）、表达式（expression）、语句（statement）等抽象成为树状结构。</p>\n<h2 id=\"实现一个简单的-parser\"><a href=\"#实现一个简单的-parser\" class=\"headerlink\" title=\"实现一个简单的 parser\"></a>实现一个简单的 parser</h2><p><img src=\"https://technologybook.tech/assets/img/ast3.png\" alt=\"image-20210321210154324\"></p>\n<p>Lever.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">IHelper</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./helper&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Checker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isBrackets</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/[\\(\\)\\&#123;\\&#125;\\[\\]\\,\\;]/i</span>.<span class=\"title function_\">test</span>(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isWhitespace</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot; \\t\\n&quot;</span>.<span class=\"title function_\">indexOf</span>(ch) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isNumber</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/[0-9]/i</span>.<span class=\"title function_\">test</span>(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isVarName</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/\\w+|_|$/i</span>.<span class=\"title function_\">test</span>(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isStartString</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&quot;&#x27;</span> === ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isOp</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/[\\+\\-\\*\\/\\=\\&amp;\\|\\!\\&lt;\\&gt;]/i</span>.<span class=\"title function_\">test</span>(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Lexer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IHelper</span>&lt;&#123;<span class=\"attr\">type</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>|<span class=\"built_in\">number</span>&#125;&gt;&#123;</span><br><span class=\"line\">    <span class=\"attr\">currentPosVal</span>: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>|<span class=\"built_in\">number</span>&#125; = &#123;&#125; <span class=\"keyword\">as</span> <span class=\"built_in\">any</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">current</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosVal</span> || (<span class=\"variable language_\">this</span>.<span class=\"property\">currentPosVal</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">readByPos</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">end</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosVal</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> strHelper: IHelper&lt;<span class=\"built_in\">string</span>&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span> = strHelper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">pack</span>(<span class=\"params\">fn: (ch: <span class=\"built_in\">string</span>) =&gt; <span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> box = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">current</span>()) &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">end</span>()) &#123;</span><br><span class=\"line\">            box += <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> box;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleNumber</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">pack</span>(<span class=\"title class_\">Checker</span>.<span class=\"property\">isNumber</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Number&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"built_in\">parseInt</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleVar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">pack</span>(<span class=\"title class_\">Checker</span>.<span class=\"property\">isVarName</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;Variable&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">value</span>: value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleString</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&quot;String&quot;</span>, <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">readStringToEnd</span>()&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleWhitespace</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">pack</span>(<span class=\"title class_\">Checker</span>.<span class=\"property\">isWhitespace</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">readStringToEnd</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> isEnd = <span class=\"literal\">false</span>,</span><br><span class=\"line\">            str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">end</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> c = <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c === <span class=\"string\">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class=\"line\">                isEnd = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                str += c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">handleOperation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&quot;Operation&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">pack</span>(<span class=\"title class_\">Checker</span>.<span class=\"property\">isOp</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">handleBrackets</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;Bracket&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">readByPos</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleWhitespace</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">end</span>()) <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&quot;End&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;End&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c = <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isStartString</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleString</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isNumber</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleNumber</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isVarName</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleVar</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isBrackets</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleBrackets</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isOp</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleOperation</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&quot;Error&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;Error&quot;</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Parser.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Lexer</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./lexer&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parser</span>(<span class=\"params\">token: Lexer</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> program = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">isBracket</span>(<span class=\"params\">ch</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tok = token.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tok &amp;&amp; tok.<span class=\"property\">type</span> == <span class=\"string\">&quot;Bracket&quot;</span> &amp;&amp; (!ch || tok.<span class=\"property\">value</span> == ch) &amp;&amp; tok;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">isKeywords</span>(<span class=\"params\">kw</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tok = token.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tok &amp;&amp; tok.<span class=\"property\">type</span> == <span class=\"string\">&quot;KeyWord&quot;</span> &amp;&amp; (!kw || tok.<span class=\"property\">value</span> == kw) &amp;&amp; tok;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">isOp</span>(<span class=\"params\">op?</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tok = token.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tok &amp;&amp; tok.<span class=\"property\">type</span> == <span class=\"string\">&quot;Operation&quot;</span> &amp;&amp; (!op || tok.<span class=\"property\">value</span> == op) &amp;&amp; tok;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">skipBracket</span>(<span class=\"params\">ch</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isBracket</span>(ch)) token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">skipKeywords</span>(<span class=\"params\">kw</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isKeywords</span>(kw)) token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">skipOp</span>(<span class=\"params\">op</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isOp</span>(op)) token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseBlock</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> body = [];</span><br><span class=\"line\">        <span class=\"title function_\">skipBracket</span>(<span class=\"string\">&quot;&#123;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"title function_\">isBracket</span>(<span class=\"string\">&quot;&#125;&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> sts = <span class=\"title function_\">parse</span>()</span><br><span class=\"line\">            sts &amp;&amp; body.<span class=\"title function_\">push</span>(sts);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">skipBracket</span>(<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;BlockStatement&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">body</span>: body</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseVariable</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">skipKeywords</span>(<span class=\"string\">&quot;var&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">type</span>  : <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">declarations</span>: <span class=\"title function_\">parseDeclarator</span>(),</span><br><span class=\"line\">            kind  : <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseDeclarator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> id = <span class=\"title function_\">parseIdentifier</span>();</span><br><span class=\"line\">        <span class=\"title function_\">skipOp</span>(<span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">id</span>: id,</span><br><span class=\"line\">            <span class=\"attr\">init</span>: <span class=\"title function_\">parseExpression</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseExpression</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">maybeCall</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">maybeBinary</span>(<span class=\"title function_\">parseAtom</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">maybeBinary</span>(<span class=\"params\">left, le</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tok = <span class=\"title function_\">isOp</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tok) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> prec = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;=&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;||&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&amp;&amp;&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&gt;&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;=&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&gt;=&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;==&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;!=&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;+&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;-&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;*&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;%&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">            &#125;[tok.<span class=\"property\">value</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prec &gt; le) &#123;</span><br><span class=\"line\">                token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">maybeBinary</span>(&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">type</span>     : tok.<span class=\"property\">value</span> == <span class=\"string\">&quot;=&quot;</span> ? <span class=\"string\">&quot;assign&quot;</span> : <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    operator : tok.<span class=\"property\">value</span>,</span><br><span class=\"line\">                    left     : left,</span><br><span class=\"line\">                    right    : <span class=\"title function_\">maybeBinary</span>(<span class=\"title function_\">parseAtom</span>(), prec)</span><br><span class=\"line\">                &#125;, le);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseAtom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">maybeCall</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isBracket</span>(<span class=\"params\"><span class=\"string\">&quot;(&quot;</span></span>)) &#123;</span><br><span class=\"line\">                token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> exp = <span class=\"title function_\">parseExpression</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_\">isBracket</span>(<span class=\"string\">&quot;;&quot;</span>)) <span class=\"title function_\">skipBracket</span>(<span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isBracket</span>(<span class=\"string\">&quot;&#123;&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"title function_\">parseBlock</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isKeywords</span>(<span class=\"string\">&quot;var&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"title function_\">parseVariable</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isKeywords</span>(<span class=\"string\">&quot;if&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"title function_\">parseIf</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"title function_\">parseExpression</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!token.<span class=\"title function_\">end</span>()) &#123;</span><br><span class=\"line\">        program.<span class=\"title function_\">push</span>(<span class=\"title function_\">parse</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&quot;Program&quot;</span>, <span class=\"attr\">value</span>: []&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"AST-抽象语法树\"><a href=\"#AST-抽象语法树\" class=\"headerlink\" title=\"AST 抽象语法树\"></a>AST 抽象语法树</h1><h2 id=\"什么是AST？\"><a href=\"#什么是AST？\" class=\"headerlink\" title=\"什么是AST？\"></a>什么是AST？</h2><blockquote>\n<p>是<a href=\"https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a><a href=\"https://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E5%AD%A6\">语法</a>结构的一种抽象表示。它以<a href=\"https://zh.wikipedia.org/wiki/%E6%A0%91_(%E5%9B%BE%E8%AE%BA)\">树状</a>的形式表现<a href=\"https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80\">编程语言</a>的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 <code>if-condition-then</code> 这样的条件跳转语句，可以使用带有三个分支的节点来表示。<br>– From wiki</p>\n</blockquote>\n<p>AST是代码片段具体语义的抽象表达可以与目标代码之间相互转换的一种中间状态。</p>\n<h2 id=\"Javascript-Compiler\"><a href=\"#Javascript-Compiler\" class=\"headerlink\" title=\"Javascript Compiler\"></a>Javascript Compiler</h2><p>我们最常用的Javascript compiler babel首页是这样描述的。</p>\n<blockquote>\n<p>Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Here are the main things Babel can do for you:</p>\n<ul>\n<li>Transform syntax</li>\n<li>Polyfill features that are missing in your target environment (through <a href=\"https://babeljs.io/docs/en/babel-polyfill\">@babel&#x2F;polyfill</a>)</li>\n<li>Source code transformations (codemods)</li>\n<li>And more! (check out these <a href=\"https://babeljs.io/videos.html\">videos</a> for inspiration)</li>\n</ul>\n</blockquote>\n<p>babel 的 parser traverse是基于Ecmascript标准实现的，很重要的一点就是其中节点类型。</p>\n<p>以下是 <a href=\"https://262.ecma-international.org/7.0/#sec-grammar-summary\">ECMAScript</a>支持的词法类型.</p>\n<p><img src=\"https://technologybook.tech/assets/img/ast1.png\" alt=\"image-20210321210154324\"></p>\n<h2 id=\"AST的数据结构\"><a href=\"#AST的数据结构\" class=\"headerlink\" title=\"AST的数据结构\"></a>AST的数据结构</h2><p>了解一个parser的结构，以及parser解析语法所依赖的规则后，接下来，我们需要了解一下一个parser所生产出来的结果——抽象语法树。在文章的开头，我有简单的解释抽象语法树即是具体代码片段的抽象表达，那它具体是长什么样的呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hi = <span class=\"string\">&quot;hi!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(hi)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上的代码片段，AST树结构如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Program&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">54</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;FunctionDeclaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">54</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">9</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">14</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sayHi&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;generator&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;async&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;params&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;BlockStatement&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">17</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">54</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VariableDeclaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">20</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">35</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;declarations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VariableDeclarator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">24</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">34</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">24</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">26</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hi&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;init&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Literal&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">29</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">34</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hi!&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;raw&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;\\&quot;hi!\\&quot;&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kind&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ExpressionStatement&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">52</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CallExpression&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">52</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;callee&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;MemberExpression&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">48</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;object&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">37</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">44</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;console&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;property&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">45</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">48</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;computed&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;optional&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;arguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">49</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">51</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hi&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">              <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;optional&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sourceType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;module&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>AST将标识符（identifier）、表达式（expression）、语句（statement）等抽象成为树状结构。</p>\n<h2 id=\"实现一个简单的-parser\"><a href=\"#实现一个简单的-parser\" class=\"headerlink\" title=\"实现一个简单的 parser\"></a>实现一个简单的 parser</h2><p><img src=\"https://technologybook.tech/assets/img/ast3.png\" alt=\"image-20210321210154324\"></p>\n<p>Lever.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">IHelper</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./helper&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Checker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isBrackets</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/[\\(\\)\\&#123;\\&#125;\\[\\]\\,\\;]/i</span>.<span class=\"title function_\">test</span>(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isWhitespace</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot; \\t\\n&quot;</span>.<span class=\"title function_\">indexOf</span>(ch) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isNumber</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/[0-9]/i</span>.<span class=\"title function_\">test</span>(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isVarName</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/\\w+|_|$/i</span>.<span class=\"title function_\">test</span>(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isStartString</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&quot;&#x27;</span> === ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isOp</span>(<span class=\"params\">ch: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/[\\+\\-\\*\\/\\=\\&amp;\\|\\!\\&lt;\\&gt;]/i</span>.<span class=\"title function_\">test</span>(ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Lexer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IHelper</span>&lt;&#123;<span class=\"attr\">type</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>|<span class=\"built_in\">number</span>&#125;&gt;&#123;</span><br><span class=\"line\">    <span class=\"attr\">currentPosVal</span>: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>|<span class=\"built_in\">number</span>&#125; = &#123;&#125; <span class=\"keyword\">as</span> <span class=\"built_in\">any</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">current</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosVal</span> || (<span class=\"variable language_\">this</span>.<span class=\"property\">currentPosVal</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">readByPos</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">end</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosVal</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> strHelper: IHelper&lt;<span class=\"built_in\">string</span>&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span> = strHelper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">pack</span>(<span class=\"params\">fn: (ch: <span class=\"built_in\">string</span>) =&gt; <span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> box = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">current</span>()) &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">end</span>()) &#123;</span><br><span class=\"line\">            box += <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> box;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleNumber</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">pack</span>(<span class=\"title class_\">Checker</span>.<span class=\"property\">isNumber</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Number&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"built_in\">parseInt</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleVar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">pack</span>(<span class=\"title class_\">Checker</span>.<span class=\"property\">isVarName</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;Variable&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">value</span>: value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleString</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&quot;String&quot;</span>, <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">readStringToEnd</span>()&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleWhitespace</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">pack</span>(<span class=\"title class_\">Checker</span>.<span class=\"property\">isWhitespace</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">readStringToEnd</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> isEnd = <span class=\"literal\">false</span>,</span><br><span class=\"line\">            str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">end</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> c = <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c === <span class=\"string\">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class=\"line\">                isEnd = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                str += c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">handleOperation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&quot;Operation&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">pack</span>(<span class=\"title class_\">Checker</span>.<span class=\"property\">isOp</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">handleBrackets</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;Bracket&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">readByPos</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleWhitespace</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">end</span>()) <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&quot;End&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;End&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c = <span class=\"variable language_\">this</span>.<span class=\"property\">strHelper</span>.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isStartString</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleString</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isNumber</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleNumber</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isVarName</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleVar</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isBrackets</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleBrackets</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Checker</span>.<span class=\"title function_\">isOp</span>(c)) <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleOperation</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&quot;Error&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;Error&quot;</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Parser.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Lexer</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./lexer&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parser</span>(<span class=\"params\">token: Lexer</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> program = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">isBracket</span>(<span class=\"params\">ch</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tok = token.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tok &amp;&amp; tok.<span class=\"property\">type</span> == <span class=\"string\">&quot;Bracket&quot;</span> &amp;&amp; (!ch || tok.<span class=\"property\">value</span> == ch) &amp;&amp; tok;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">isKeywords</span>(<span class=\"params\">kw</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tok = token.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tok &amp;&amp; tok.<span class=\"property\">type</span> == <span class=\"string\">&quot;KeyWord&quot;</span> &amp;&amp; (!kw || tok.<span class=\"property\">value</span> == kw) &amp;&amp; tok;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">isOp</span>(<span class=\"params\">op?</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tok = token.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tok &amp;&amp; tok.<span class=\"property\">type</span> == <span class=\"string\">&quot;Operation&quot;</span> &amp;&amp; (!op || tok.<span class=\"property\">value</span> == op) &amp;&amp; tok;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">skipBracket</span>(<span class=\"params\">ch</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isBracket</span>(ch)) token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">skipKeywords</span>(<span class=\"params\">kw</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isKeywords</span>(kw)) token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">skipOp</span>(<span class=\"params\">op</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isOp</span>(op)) token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseBlock</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> body = [];</span><br><span class=\"line\">        <span class=\"title function_\">skipBracket</span>(<span class=\"string\">&quot;&#123;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"title function_\">isBracket</span>(<span class=\"string\">&quot;&#125;&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> sts = <span class=\"title function_\">parse</span>()</span><br><span class=\"line\">            sts &amp;&amp; body.<span class=\"title function_\">push</span>(sts);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">skipBracket</span>(<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;BlockStatement&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">body</span>: body</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseVariable</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">skipKeywords</span>(<span class=\"string\">&quot;var&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">type</span>  : <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">declarations</span>: <span class=\"title function_\">parseDeclarator</span>(),</span><br><span class=\"line\">            kind  : <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseDeclarator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> id = <span class=\"title function_\">parseIdentifier</span>();</span><br><span class=\"line\">        <span class=\"title function_\">skipOp</span>(<span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">id</span>: id,</span><br><span class=\"line\">            <span class=\"attr\">init</span>: <span class=\"title function_\">parseExpression</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseExpression</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">maybeCall</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">maybeBinary</span>(<span class=\"title function_\">parseAtom</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">maybeBinary</span>(<span class=\"params\">left, le</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tok = <span class=\"title function_\">isOp</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tok) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> prec = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;=&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;||&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&amp;&amp;&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&gt;&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;=&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;&gt;=&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;==&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;!=&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;+&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;-&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;*&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;%&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">            &#125;[tok.<span class=\"property\">value</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prec &gt; le) &#123;</span><br><span class=\"line\">                token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">maybeBinary</span>(&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">type</span>     : tok.<span class=\"property\">value</span> == <span class=\"string\">&quot;=&quot;</span> ? <span class=\"string\">&quot;assign&quot;</span> : <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    operator : tok.<span class=\"property\">value</span>,</span><br><span class=\"line\">                    left     : left,</span><br><span class=\"line\">                    right    : <span class=\"title function_\">maybeBinary</span>(<span class=\"title function_\">parseAtom</span>(), prec)</span><br><span class=\"line\">                &#125;, le);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parseAtom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">maybeCall</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isBracket</span>(<span class=\"params\"><span class=\"string\">&quot;(&quot;</span></span>)) &#123;</span><br><span class=\"line\">                token.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> exp = <span class=\"title function_\">parseExpression</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_\">isBracket</span>(<span class=\"string\">&quot;;&quot;</span>)) <span class=\"title function_\">skipBracket</span>(<span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isBracket</span>(<span class=\"string\">&quot;&#123;&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"title function_\">parseBlock</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isKeywords</span>(<span class=\"string\">&quot;var&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"title function_\">parseVariable</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isKeywords</span>(<span class=\"string\">&quot;if&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"title function_\">parseIf</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"title function_\">parseExpression</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!token.<span class=\"title function_\">end</span>()) &#123;</span><br><span class=\"line\">        program.<span class=\"title function_\">push</span>(<span class=\"title function_\">parse</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: <span class=\"string\">&quot;Program&quot;</span>, <span class=\"attr\">value</span>: []&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Babel自用笔记","date":"2020-03-04T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/ast1.png","_content":"\n# babel自用笔记\n\n### 关于抽象语法树的可以看这个[之前写blog](https://technologybook.tech/2020/01/02/ast/)。\n\n## Babel 的处理步骤\n\nBabel **解析（parse）**，**转换（transform）**，**生成（generate）**三个步骤 。\n\n![](https://technologybook.tech/assets/img/ast3.png)\n\n### Visitors\n\n>  关于[访问者模式](https://refactoringguru.cn/design-patterns/visitor/typescript/example).的介绍。\n>\n> **访问者**是一种行为设计模式， 允许你在不修改已有代码的情况下向已有类层次结构中增加新的行为。\n\n\n\n这是一个简单的例子，是数字111转变为string 123。\n\n```javascript\nmodule.exports = ({types: t}) => {\n  return {\n    visitor: {\n      NumericLiteral (path) {\n        fs.writeFileSync('./t.json', JSON.stringify(path.node, 2))\n        if (path.node.value === 111) {\n          path.replaceWith(t.stringLiteral('123'))\n        }\n      },\n    },\n  }\n}\n\n```\n\n这是一个访问者，在遍历中时，如果遇到一个 NumericLiteral 即数字的时候会调用 NumericLiteral()` 方法。\n\n这些调用都发生在**进入**节点时，不过有时候我们也可以在**退出**时调用访问者方法。.\n\n假设我们有一个树状结构：\n\n![image-20210321210154324](https://technologybook.tech/assets/img/ast.png)\n\n上面的AST是一个简单的sayHi函数产出的结果。\n\n```javascript\nfunction sayHi() {\n\tvar hi = \"hi!\";\n\tconsole.log(hi)\n}\n```\n\n### Paths\n\n从上可以看出AST 的结构节点都异常复杂，节点之间的互相关联关系可以通过Path-一个简便的快速查找节点的方式来进行查找。.\n\n**Path** 是表示两个节点之间连接的对象。\n\n例如，这是path.node包含的信息︰\n\n```json\n{\n  \"type\": \"NumericLiteral\",\n  \"start\": 11,\n  \"end\": 14,\n  \"loc\": {\n    \"start\": {\n      \"line\": 2,\n      \"column\": 10\n    },\n    \"end\": {\n      \"line\": 2,\n      \"column\": 13\n    }\n  },\n  \"extra\": {\n    \"rawValue\": 111,\n    \"raw\": \"111\"\n  },\n  \"value\": 111\n}\n```\n\n如果整体的话：\n\n```json\n{\n  \"type\": \"VariableDeclarator\",\n  \"start\": 7,\n  \"end\": 14,\n  \"loc\": {\n    \"start\": {\n      \"line\": 2,\n      \"column\": 6\n    },\n    \"end\": {\n      \"line\": 2,\n      \"column\": 13\n    }\n  },\n  \"id\": {\n    \"type\": \"Identifier\",\n    \"start\": 7,\n    \"end\": 8,\n    \"loc\": {\n      \"start\": {\n        \"line\": 2,\n        \"column\": 6\n      },\n      \"end\": {\n        \"line\": 2,\n        \"column\": 7\n      },\n      \"identifierName\": \"a\"\n    },\n    \"name\": \"a\"\n  },\n  \"init\": {\n    \"type\": \"NumericLiteral\",\n    \"start\": 11,\n    \"end\": 14,\n    \"loc\": {\n      \"start\": {\n        \"line\": 2,\n        \"column\": 10\n      },\n      \"end\": {\n        \"line\": 2,\n        \"column\": 13\n      }\n    },\n    \"extra\": {\n      \"rawValue\": 111,\n      \"raw\": \"111\"\n    },\n    \"value\": 111\n  }\n}\n```\n\n\n\n当然路径对象还包含增删改查节点的方法。\n\n\n\n### Scopes\n\n这里指 JavaScript 支持[词法作用域](https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping_vs._dynamic_scoping)，通过tree的嵌套关系来确定作用域。\n\n一个例子:\n\n```javascript\nfunction outFun2() {\n    var inVariable = \"inner\";\n}\noutFun2();\nconsole.log(inVariable); // Uncaught ReferenceError: inVariable is not defined\n\n```\n\n在babel插件编写的过程中对作用域的使用如下。\n\n作用域会被用到的字段：\n\n```\n{\n  path: path,\n  block: path.node,\n  bindings: [...]\n  ...\n}\n```\n\n当你创建一个新的作用域时，需要给出它的路径和父作用域，之后在遍历过程中它会在该作用域内收集所有的引用(“绑定”)。\n\n一旦引用收集完毕，你就可以在作用域（Scopes）上使用各种方法，稍后我们会了解这些方法。\n\n##  以下是编写插件的一些笔记\n\n| 功能                    | BinaryExpression                          | field                                             |\n| :---------------------- | ----------------------------------------- | ------------------------------------------------- |\n| Salad                   | BinaryExpression                          | left/right (path.node.left = t.identifier(\"hi\");) |\n| 对当前对象的赋值        | path[x]                                   | path[x] = n                                       |\n| 对字段的check           | t.is.x(path.node.y, { attr: z })          | y is x ? y.attr=== z ? True : false               |\n| 查找最接近的父函数      | path.getFunctionParent                    | path.getStatementParent 一直向上                  |\n| 替换节点                | path.replaceWith/path.replaceWithMultiple | path.replaceWith常用                              |\n| 直接替换代码            | replaceWithSourceString                   | 一把梭                                            |\n| 插入前后                | insertBefore/insertAfter                  | 插入                                              |\n| 插入程序content中       | unshiftContainer/pushContainer            | 较常用                                            |\n| 删除节点                | remove                                    | remove                                            |\n| 本地变量是否绑定        | path.scope.hasBinding/hasOwnBinding       | 常用来检查scope body                              |\n| 推送VariableDeclaration | push({ id： string, init: path.node });   | 不常用                                            |\n| rename                  | path.scope.rename                         | 常用                                              |\n| 抛错                    | throw path.buildCodeFrameError            |                                                   |\n| 遍历path                | path.traverse                             | 尽量少用用 path[x] or path.get替代                |\n|                         |                                           |                                                   |\n|                         |                                           |                                                   |\n\n\n\n\n\n\n","source":"_posts/babel.md","raw":"title: Babel自用笔记\ndate: 2020/03/05\ncover: https://technologybook.tech/assets/img/ast1.png\ncategories:\n- compiler\ntags:\n- babel\n\n---\n\n# babel自用笔记\n\n### 关于抽象语法树的可以看这个[之前写blog](https://technologybook.tech/2020/01/02/ast/)。\n\n## Babel 的处理步骤\n\nBabel **解析（parse）**，**转换（transform）**，**生成（generate）**三个步骤 。\n\n![](https://technologybook.tech/assets/img/ast3.png)\n\n### Visitors\n\n>  关于[访问者模式](https://refactoringguru.cn/design-patterns/visitor/typescript/example).的介绍。\n>\n> **访问者**是一种行为设计模式， 允许你在不修改已有代码的情况下向已有类层次结构中增加新的行为。\n\n\n\n这是一个简单的例子，是数字111转变为string 123。\n\n```javascript\nmodule.exports = ({types: t}) => {\n  return {\n    visitor: {\n      NumericLiteral (path) {\n        fs.writeFileSync('./t.json', JSON.stringify(path.node, 2))\n        if (path.node.value === 111) {\n          path.replaceWith(t.stringLiteral('123'))\n        }\n      },\n    },\n  }\n}\n\n```\n\n这是一个访问者，在遍历中时，如果遇到一个 NumericLiteral 即数字的时候会调用 NumericLiteral()` 方法。\n\n这些调用都发生在**进入**节点时，不过有时候我们也可以在**退出**时调用访问者方法。.\n\n假设我们有一个树状结构：\n\n![image-20210321210154324](https://technologybook.tech/assets/img/ast.png)\n\n上面的AST是一个简单的sayHi函数产出的结果。\n\n```javascript\nfunction sayHi() {\n\tvar hi = \"hi!\";\n\tconsole.log(hi)\n}\n```\n\n### Paths\n\n从上可以看出AST 的结构节点都异常复杂，节点之间的互相关联关系可以通过Path-一个简便的快速查找节点的方式来进行查找。.\n\n**Path** 是表示两个节点之间连接的对象。\n\n例如，这是path.node包含的信息︰\n\n```json\n{\n  \"type\": \"NumericLiteral\",\n  \"start\": 11,\n  \"end\": 14,\n  \"loc\": {\n    \"start\": {\n      \"line\": 2,\n      \"column\": 10\n    },\n    \"end\": {\n      \"line\": 2,\n      \"column\": 13\n    }\n  },\n  \"extra\": {\n    \"rawValue\": 111,\n    \"raw\": \"111\"\n  },\n  \"value\": 111\n}\n```\n\n如果整体的话：\n\n```json\n{\n  \"type\": \"VariableDeclarator\",\n  \"start\": 7,\n  \"end\": 14,\n  \"loc\": {\n    \"start\": {\n      \"line\": 2,\n      \"column\": 6\n    },\n    \"end\": {\n      \"line\": 2,\n      \"column\": 13\n    }\n  },\n  \"id\": {\n    \"type\": \"Identifier\",\n    \"start\": 7,\n    \"end\": 8,\n    \"loc\": {\n      \"start\": {\n        \"line\": 2,\n        \"column\": 6\n      },\n      \"end\": {\n        \"line\": 2,\n        \"column\": 7\n      },\n      \"identifierName\": \"a\"\n    },\n    \"name\": \"a\"\n  },\n  \"init\": {\n    \"type\": \"NumericLiteral\",\n    \"start\": 11,\n    \"end\": 14,\n    \"loc\": {\n      \"start\": {\n        \"line\": 2,\n        \"column\": 10\n      },\n      \"end\": {\n        \"line\": 2,\n        \"column\": 13\n      }\n    },\n    \"extra\": {\n      \"rawValue\": 111,\n      \"raw\": \"111\"\n    },\n    \"value\": 111\n  }\n}\n```\n\n\n\n当然路径对象还包含增删改查节点的方法。\n\n\n\n### Scopes\n\n这里指 JavaScript 支持[词法作用域](https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping_vs._dynamic_scoping)，通过tree的嵌套关系来确定作用域。\n\n一个例子:\n\n```javascript\nfunction outFun2() {\n    var inVariable = \"inner\";\n}\noutFun2();\nconsole.log(inVariable); // Uncaught ReferenceError: inVariable is not defined\n\n```\n\n在babel插件编写的过程中对作用域的使用如下。\n\n作用域会被用到的字段：\n\n```\n{\n  path: path,\n  block: path.node,\n  bindings: [...]\n  ...\n}\n```\n\n当你创建一个新的作用域时，需要给出它的路径和父作用域，之后在遍历过程中它会在该作用域内收集所有的引用(“绑定”)。\n\n一旦引用收集完毕，你就可以在作用域（Scopes）上使用各种方法，稍后我们会了解这些方法。\n\n##  以下是编写插件的一些笔记\n\n| 功能                    | BinaryExpression                          | field                                             |\n| :---------------------- | ----------------------------------------- | ------------------------------------------------- |\n| Salad                   | BinaryExpression                          | left/right (path.node.left = t.identifier(\"hi\");) |\n| 对当前对象的赋值        | path[x]                                   | path[x] = n                                       |\n| 对字段的check           | t.is.x(path.node.y, { attr: z })          | y is x ? y.attr=== z ? True : false               |\n| 查找最接近的父函数      | path.getFunctionParent                    | path.getStatementParent 一直向上                  |\n| 替换节点                | path.replaceWith/path.replaceWithMultiple | path.replaceWith常用                              |\n| 直接替换代码            | replaceWithSourceString                   | 一把梭                                            |\n| 插入前后                | insertBefore/insertAfter                  | 插入                                              |\n| 插入程序content中       | unshiftContainer/pushContainer            | 较常用                                            |\n| 删除节点                | remove                                    | remove                                            |\n| 本地变量是否绑定        | path.scope.hasBinding/hasOwnBinding       | 常用来检查scope body                              |\n| 推送VariableDeclaration | push({ id： string, init: path.node });   | 不常用                                            |\n| rename                  | path.scope.rename                         | 常用                                              |\n| 抛错                    | throw path.buildCodeFrameError            |                                                   |\n| 遍历path                | path.traverse                             | 尽量少用用 path[x] or path.get替代                |\n|                         |                                           |                                                   |\n|                         |                                           |                                                   |\n\n\n\n\n\n\n","slug":"babel","published":1,"updated":"2024-04-10T17:46:25.877Z","_id":"cluvjqdcv000c0wpdd0vfdd7g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"babel自用笔记\"><a href=\"#babel自用笔记\" class=\"headerlink\" title=\"babel自用笔记\"></a>babel自用笔记</h1><h3 id=\"关于抽象语法树的可以看这个之前写blog。\"><a href=\"#关于抽象语法树的可以看这个之前写blog。\" class=\"headerlink\" title=\"关于抽象语法树的可以看这个之前写blog。\"></a>关于抽象语法树的可以看这个<a href=\"https://technologybook.tech/2020/01/02/ast/\">之前写blog</a>。</h3><h2 id=\"Babel-的处理步骤\"><a href=\"#Babel-的处理步骤\" class=\"headerlink\" title=\"Babel 的处理步骤\"></a>Babel 的处理步骤</h2><p>Babel <strong>解析（parse）</strong>，<strong>转换（transform）</strong>，<strong>生成（generate）</strong>三个步骤 。</p>\n<p><img src=\"https://technologybook.tech/assets/img/ast3.png\"></p>\n<h3 id=\"Visitors\"><a href=\"#Visitors\" class=\"headerlink\" title=\"Visitors\"></a>Visitors</h3><blockquote>\n<p> 关于<a href=\"https://refactoringguru.cn/design-patterns/visitor/typescript/example\">访问者模式</a>.的介绍。</p>\n<p><strong>访问者</strong>是一种行为设计模式， 允许你在不修改已有代码的情况下向已有类层次结构中增加新的行为。</p>\n</blockquote>\n<p>这是一个简单的例子，是数字111转变为string 123。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">&#123;types: t&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">visitor</span>: &#123;</span><br><span class=\"line\">      <span class=\"title class_\">NumericLiteral</span> (path) &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">&#x27;./t.json&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(path.<span class=\"property\">node</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">value</span> === <span class=\"number\">111</span>) &#123;</span><br><span class=\"line\">          path.<span class=\"title function_\">replaceWith</span>(t.<span class=\"title function_\">stringLiteral</span>(<span class=\"string\">&#x27;123&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是一个访问者，在遍历中时，如果遇到一个 NumericLiteral 即数字的时候会调用 NumericLiteral()&#96; 方法。</p>\n<p>这些调用都发生在<strong>进入</strong>节点时，不过有时候我们也可以在<strong>退出</strong>时调用访问者方法。.</p>\n<p>假设我们有一个树状结构：</p>\n<p><img src=\"https://technologybook.tech/assets/img/ast.png\" alt=\"image-20210321210154324\"></p>\n<p>上面的AST是一个简单的sayHi函数产出的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hi = <span class=\"string\">&quot;hi!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(hi)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Paths\"><a href=\"#Paths\" class=\"headerlink\" title=\"Paths\"></a>Paths</h3><p>从上可以看出AST 的结构节点都异常复杂，节点之间的互相关联关系可以通过Path-一个简便的快速查找节点的方式来进行查找。.</p>\n<p><strong>Path</strong> 是表示两个节点之间连接的对象。</p>\n<p>例如，这是path.node包含的信息︰</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NumericLiteral&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">11</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">14</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;loc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">13</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extra&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;rawValue&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">111</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;raw&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;111&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果整体的话：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VariableDeclarator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">14</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;loc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">13</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;loc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;identifierName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;init&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NumericLiteral&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">11</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">14</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;loc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">13</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extra&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;rawValue&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">111</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;raw&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;111&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">111</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>当然路径对象还包含增删改查节点的方法。</p>\n<h3 id=\"Scopes\"><a href=\"#Scopes\" class=\"headerlink\" title=\"Scopes\"></a>Scopes</h3><p>这里指 JavaScript 支持<a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping_vs._dynamic_scoping\">词法作用域</a>，通过tree的嵌套关系来确定作用域。</p>\n<p>一个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">outFun2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inVariable = <span class=\"string\">&quot;inner&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">outFun2</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(inVariable); <span class=\"comment\">// Uncaught ReferenceError: inVariable is not defined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在babel插件编写的过程中对作用域的使用如下。</p>\n<p>作用域会被用到的字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: path,</span><br><span class=\"line\">  block: path.node,</span><br><span class=\"line\">  bindings: [...]</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你创建一个新的作用域时，需要给出它的路径和父作用域，之后在遍历过程中它会在该作用域内收集所有的引用(“绑定”)。</p>\n<p>一旦引用收集完毕，你就可以在作用域（Scopes）上使用各种方法，稍后我们会了解这些方法。</p>\n<h2 id=\"以下是编写插件的一些笔记\"><a href=\"#以下是编写插件的一些笔记\" class=\"headerlink\" title=\"以下是编写插件的一些笔记\"></a>以下是编写插件的一些笔记</h2><table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th>BinaryExpression</th>\n<th>field</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Salad</td>\n<td>BinaryExpression</td>\n<td>left&#x2F;right (path.node.left &#x3D; t.identifier(“hi”);)</td>\n</tr>\n<tr>\n<td align=\"left\">对当前对象的赋值</td>\n<td>path[x]</td>\n<td>path[x] &#x3D; n</td>\n</tr>\n<tr>\n<td align=\"left\">对字段的check</td>\n<td>t.is.x(path.node.y, { attr: z })</td>\n<td>y is x ? y.attr&#x3D;&#x3D;&#x3D; z ? True : false</td>\n</tr>\n<tr>\n<td align=\"left\">查找最接近的父函数</td>\n<td>path.getFunctionParent</td>\n<td>path.getStatementParent 一直向上</td>\n</tr>\n<tr>\n<td align=\"left\">替换节点</td>\n<td>path.replaceWith&#x2F;path.replaceWithMultiple</td>\n<td>path.replaceWith常用</td>\n</tr>\n<tr>\n<td align=\"left\">直接替换代码</td>\n<td>replaceWithSourceString</td>\n<td>一把梭</td>\n</tr>\n<tr>\n<td align=\"left\">插入前后</td>\n<td>insertBefore&#x2F;insertAfter</td>\n<td>插入</td>\n</tr>\n<tr>\n<td align=\"left\">插入程序content中</td>\n<td>unshiftContainer&#x2F;pushContainer</td>\n<td>较常用</td>\n</tr>\n<tr>\n<td align=\"left\">删除节点</td>\n<td>remove</td>\n<td>remove</td>\n</tr>\n<tr>\n<td align=\"left\">本地变量是否绑定</td>\n<td>path.scope.hasBinding&#x2F;hasOwnBinding</td>\n<td>常用来检查scope body</td>\n</tr>\n<tr>\n<td align=\"left\">推送VariableDeclaration</td>\n<td>push({ id： string, init: path.node });</td>\n<td>不常用</td>\n</tr>\n<tr>\n<td align=\"left\">rename</td>\n<td>path.scope.rename</td>\n<td>常用</td>\n</tr>\n<tr>\n<td align=\"left\">抛错</td>\n<td>throw path.buildCodeFrameError</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">遍历path</td>\n<td>path.traverse</td>\n<td>尽量少用用 path[x] or path.get替代</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"babel自用笔记\"><a href=\"#babel自用笔记\" class=\"headerlink\" title=\"babel自用笔记\"></a>babel自用笔记</h1><h3 id=\"关于抽象语法树的可以看这个之前写blog。\"><a href=\"#关于抽象语法树的可以看这个之前写blog。\" class=\"headerlink\" title=\"关于抽象语法树的可以看这个之前写blog。\"></a>关于抽象语法树的可以看这个<a href=\"https://technologybook.tech/2020/01/02/ast/\">之前写blog</a>。</h3><h2 id=\"Babel-的处理步骤\"><a href=\"#Babel-的处理步骤\" class=\"headerlink\" title=\"Babel 的处理步骤\"></a>Babel 的处理步骤</h2><p>Babel <strong>解析（parse）</strong>，<strong>转换（transform）</strong>，<strong>生成（generate）</strong>三个步骤 。</p>\n<p><img src=\"https://technologybook.tech/assets/img/ast3.png\"></p>\n<h3 id=\"Visitors\"><a href=\"#Visitors\" class=\"headerlink\" title=\"Visitors\"></a>Visitors</h3><blockquote>\n<p> 关于<a href=\"https://refactoringguru.cn/design-patterns/visitor/typescript/example\">访问者模式</a>.的介绍。</p>\n<p><strong>访问者</strong>是一种行为设计模式， 允许你在不修改已有代码的情况下向已有类层次结构中增加新的行为。</p>\n</blockquote>\n<p>这是一个简单的例子，是数字111转变为string 123。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">&#123;types: t&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">visitor</span>: &#123;</span><br><span class=\"line\">      <span class=\"title class_\">NumericLiteral</span> (path) &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">&#x27;./t.json&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(path.<span class=\"property\">node</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">value</span> === <span class=\"number\">111</span>) &#123;</span><br><span class=\"line\">          path.<span class=\"title function_\">replaceWith</span>(t.<span class=\"title function_\">stringLiteral</span>(<span class=\"string\">&#x27;123&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是一个访问者，在遍历中时，如果遇到一个 NumericLiteral 即数字的时候会调用 NumericLiteral()&#96; 方法。</p>\n<p>这些调用都发生在<strong>进入</strong>节点时，不过有时候我们也可以在<strong>退出</strong>时调用访问者方法。.</p>\n<p>假设我们有一个树状结构：</p>\n<p><img src=\"https://technologybook.tech/assets/img/ast.png\" alt=\"image-20210321210154324\"></p>\n<p>上面的AST是一个简单的sayHi函数产出的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hi = <span class=\"string\">&quot;hi!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(hi)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Paths\"><a href=\"#Paths\" class=\"headerlink\" title=\"Paths\"></a>Paths</h3><p>从上可以看出AST 的结构节点都异常复杂，节点之间的互相关联关系可以通过Path-一个简便的快速查找节点的方式来进行查找。.</p>\n<p><strong>Path</strong> 是表示两个节点之间连接的对象。</p>\n<p>例如，这是path.node包含的信息︰</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NumericLiteral&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">11</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">14</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;loc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">13</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extra&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;rawValue&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">111</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;raw&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;111&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果整体的话：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VariableDeclarator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">14</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;loc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">13</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Identifier&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;loc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;identifierName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;init&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NumericLiteral&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">11</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">14</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;loc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;end&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">13</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extra&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;rawValue&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">111</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;raw&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;111&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">111</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>当然路径对象还包含增删改查节点的方法。</p>\n<h3 id=\"Scopes\"><a href=\"#Scopes\" class=\"headerlink\" title=\"Scopes\"></a>Scopes</h3><p>这里指 JavaScript 支持<a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping_vs._dynamic_scoping\">词法作用域</a>，通过tree的嵌套关系来确定作用域。</p>\n<p>一个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">outFun2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inVariable = <span class=\"string\">&quot;inner&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">outFun2</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(inVariable); <span class=\"comment\">// Uncaught ReferenceError: inVariable is not defined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在babel插件编写的过程中对作用域的使用如下。</p>\n<p>作用域会被用到的字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: path,</span><br><span class=\"line\">  block: path.node,</span><br><span class=\"line\">  bindings: [...]</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你创建一个新的作用域时，需要给出它的路径和父作用域，之后在遍历过程中它会在该作用域内收集所有的引用(“绑定”)。</p>\n<p>一旦引用收集完毕，你就可以在作用域（Scopes）上使用各种方法，稍后我们会了解这些方法。</p>\n<h2 id=\"以下是编写插件的一些笔记\"><a href=\"#以下是编写插件的一些笔记\" class=\"headerlink\" title=\"以下是编写插件的一些笔记\"></a>以下是编写插件的一些笔记</h2><table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th>BinaryExpression</th>\n<th>field</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Salad</td>\n<td>BinaryExpression</td>\n<td>left&#x2F;right (path.node.left &#x3D; t.identifier(“hi”);)</td>\n</tr>\n<tr>\n<td align=\"left\">对当前对象的赋值</td>\n<td>path[x]</td>\n<td>path[x] &#x3D; n</td>\n</tr>\n<tr>\n<td align=\"left\">对字段的check</td>\n<td>t.is.x(path.node.y, { attr: z })</td>\n<td>y is x ? y.attr&#x3D;&#x3D;&#x3D; z ? True : false</td>\n</tr>\n<tr>\n<td align=\"left\">查找最接近的父函数</td>\n<td>path.getFunctionParent</td>\n<td>path.getStatementParent 一直向上</td>\n</tr>\n<tr>\n<td align=\"left\">替换节点</td>\n<td>path.replaceWith&#x2F;path.replaceWithMultiple</td>\n<td>path.replaceWith常用</td>\n</tr>\n<tr>\n<td align=\"left\">直接替换代码</td>\n<td>replaceWithSourceString</td>\n<td>一把梭</td>\n</tr>\n<tr>\n<td align=\"left\">插入前后</td>\n<td>insertBefore&#x2F;insertAfter</td>\n<td>插入</td>\n</tr>\n<tr>\n<td align=\"left\">插入程序content中</td>\n<td>unshiftContainer&#x2F;pushContainer</td>\n<td>较常用</td>\n</tr>\n<tr>\n<td align=\"left\">删除节点</td>\n<td>remove</td>\n<td>remove</td>\n</tr>\n<tr>\n<td align=\"left\">本地变量是否绑定</td>\n<td>path.scope.hasBinding&#x2F;hasOwnBinding</td>\n<td>常用来检查scope body</td>\n</tr>\n<tr>\n<td align=\"left\">推送VariableDeclaration</td>\n<td>push({ id： string, init: path.node });</td>\n<td>不常用</td>\n</tr>\n<tr>\n<td align=\"left\">rename</td>\n<td>path.scope.rename</td>\n<td>常用</td>\n</tr>\n<tr>\n<td align=\"left\">抛错</td>\n<td>throw path.buildCodeFrameError</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">遍历path</td>\n<td>path.traverse</td>\n<td>尽量少用用 path[x] or path.get替代</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"This","date":"2017-01-11T16:00:00.000Z","_content":"# Javascript this\n\n# 一.Global this\n\n\n\n1，在浏览器里，**全局情况下this等同于window对象。**\n2，当没有var 或 let 时 对变量的修改就是在改变this 的属性值。\n3，node环境里 一般的会给global this 同时赋值。\n4，node环境中 逐行读取的情况中 会优先给Global赋值。\n\n# 二.Function this\n\n1，如果调用函数时使用new 那么它就会成为一个新值。\n2，如果**正常使用this 那么他就指代一个全局的this** 如果**添加一个new** 那么它就成为了**构造函数**并创建了一个实例，this指代这个实例（**如果你在调用函数的时候在前面使用了new，this就会变成一个新的值，和global的this脱离干系**）。\n例如( setTimeout, setInterval,addEventListenner),通常使用self 来解决这个问题。\n\n# 三.Prototype this\n\n1，**每创建一个函数对象**就会**自动获得一个特殊属性prototype** 通过**new 调用一个函数就能通过this 访问这个值**。\n\n```\n function Thing() {\n        console.log(this.foo);\n         }\n Thing.prototype.foo = \"bar\";\n var thing = new Thing(); //logs \"bar\"\n console.log(thing.foo);  //logs \"bar\"（原型链）\n```\n\n2，可以通过在实例里面删除自己添加的属性的方式来实现\nThing.prototype.deleteFoo = function () {\ndelete this.foo;\n}\n3，可以把多个函数 的prototype 链接起来从而形成一个原型链 这样this会沿着这条原型链网上查找知道找到你想要的值。（原型继承）\n4，在prototype里面定义的方法会**影响到当前实例上游的this** 这意味着**当你赋值时this时隐藏了上游的属性**（Ting1的实例中的**proto**指向Thing2的prototype属性建立原型链）\n\n```\nfunction Thing1() {\n }\nThing1.prototype.foo = \"bar\";\nThing1.prototype.logFoo = function () {\n    console.log(this.foo);\n     }\nfunction Thing2() {\n this.foo = \"foo\";\n     }\n*   Thing2.prototype = new Thing1();\n```\n\n5，**嵌套函数可以捕获父元素的变量，但时这个函数没有继承this（通常使用 var _this = this来结局这个问题）**\n6，**通过bind 可以将实例与方法一同传给函数**\n\n```\n function Thing() {\n                     }\n Thing.prototype.foo = \"bar\";\n Thing.prototype.logFoo = function () { \n         console.log(this.foo);\n         }\n function doIt(method) {\n        method();\n         }       \nvar thing = new Thing();\n//console.log(aStr , this.foo);\n doIt(thing.logFoo.bind(thing)); //logs bar\nlogFoo.bind(thing)(\"using bind\"); //logs \"using bind bar\"\nlogFoo.apply(thing, [\"using apply\"]); //logs \"using apply bar\"\nlogFoo.call(thing, \"using call\"); //logs \"using call bar\"\nlogFoo(\"using nothing\"); //logs \"using nothing undefined\"\n```\n\n7,可**以通过var thing = Object.create（Thing.prototype）来创建一个实例**，这种创建方式**在继承模式下重写构造函数**非常有用。Thing2.prototype = Object.create(Thing1.prototype);（通过new操纵继承 ，通过object.create继承**不会**调用构造函数）\n\n# 四.Object this\n\n1，只 有有相同的**直接父元素**的属性才能通过this共享变量（两次黏连就近原则）\n2，可以直接通过对象引用你需要的属性\n\n```\nvar obj = {\n              foo: \"bar\",\n              deeper: {\n              logFoo: function () {\n              console.log(obj.foo);\n             }\n          }\n        };\n    obj.deeper.logFoo(); //logs \"bar\"\n```\n\n四.DOM event this\n1，在一个HTML DOM事件处理程序里边 ， **this 始终指向这个处理程序被所绑定到的HTML DOM 节点** （除非使用了bind）\n\n# 五.HTML & override & jQuery & thisArg this\n\n1，this 是保留字不能够重写\n2，eval可以访问this\n3，HTML 中可以放置代码并指向这个元素\n4，你可以通过with来将this添加到当前的执行环境，并且读写this的属性的时候不需要通过this\n5，**jQuery 中this都是指向HTML 元素节点 及应用**\n\n```\n 1 <div class=\"foo bar1\"></div>\n 2 <div class=\"foo bar2\"></div>\n 3 <script type=\"text/javascript\">\n 4 $(\".foo\").each(function () {\n 5     console.log(this); //logs <div class=\"foo...\n 6 });\n 7 $(\".foo\").on(\"click\", function () {\n 8     console.log(this); //logs <div class=\"foo...\n 9 });\n10 $(\".foo\").each(function () {\n11     this.click();\n12 });\n13 </script>  \n```\n\nthisArgs bind call apply thisArgs传参给函数 这个this 绑定 为你传递的对象。\n","source":"_posts/this.md","raw":"title: This \ndate: 2017/01/12\ncategories:\n- js\ntags:\n- js\n\n---\n# Javascript this\n\n# 一.Global this\n\n\n\n1，在浏览器里，**全局情况下this等同于window对象。**\n2，当没有var 或 let 时 对变量的修改就是在改变this 的属性值。\n3，node环境里 一般的会给global this 同时赋值。\n4，node环境中 逐行读取的情况中 会优先给Global赋值。\n\n# 二.Function this\n\n1，如果调用函数时使用new 那么它就会成为一个新值。\n2，如果**正常使用this 那么他就指代一个全局的this** 如果**添加一个new** 那么它就成为了**构造函数**并创建了一个实例，this指代这个实例（**如果你在调用函数的时候在前面使用了new，this就会变成一个新的值，和global的this脱离干系**）。\n例如( setTimeout, setInterval,addEventListenner),通常使用self 来解决这个问题。\n\n# 三.Prototype this\n\n1，**每创建一个函数对象**就会**自动获得一个特殊属性prototype** 通过**new 调用一个函数就能通过this 访问这个值**。\n\n```\n function Thing() {\n        console.log(this.foo);\n         }\n Thing.prototype.foo = \"bar\";\n var thing = new Thing(); //logs \"bar\"\n console.log(thing.foo);  //logs \"bar\"（原型链）\n```\n\n2，可以通过在实例里面删除自己添加的属性的方式来实现\nThing.prototype.deleteFoo = function () {\ndelete this.foo;\n}\n3，可以把多个函数 的prototype 链接起来从而形成一个原型链 这样this会沿着这条原型链网上查找知道找到你想要的值。（原型继承）\n4，在prototype里面定义的方法会**影响到当前实例上游的this** 这意味着**当你赋值时this时隐藏了上游的属性**（Ting1的实例中的**proto**指向Thing2的prototype属性建立原型链）\n\n```\nfunction Thing1() {\n }\nThing1.prototype.foo = \"bar\";\nThing1.prototype.logFoo = function () {\n    console.log(this.foo);\n     }\nfunction Thing2() {\n this.foo = \"foo\";\n     }\n*   Thing2.prototype = new Thing1();\n```\n\n5，**嵌套函数可以捕获父元素的变量，但时这个函数没有继承this（通常使用 var _this = this来结局这个问题）**\n6，**通过bind 可以将实例与方法一同传给函数**\n\n```\n function Thing() {\n                     }\n Thing.prototype.foo = \"bar\";\n Thing.prototype.logFoo = function () { \n         console.log(this.foo);\n         }\n function doIt(method) {\n        method();\n         }       \nvar thing = new Thing();\n//console.log(aStr , this.foo);\n doIt(thing.logFoo.bind(thing)); //logs bar\nlogFoo.bind(thing)(\"using bind\"); //logs \"using bind bar\"\nlogFoo.apply(thing, [\"using apply\"]); //logs \"using apply bar\"\nlogFoo.call(thing, \"using call\"); //logs \"using call bar\"\nlogFoo(\"using nothing\"); //logs \"using nothing undefined\"\n```\n\n7,可**以通过var thing = Object.create（Thing.prototype）来创建一个实例**，这种创建方式**在继承模式下重写构造函数**非常有用。Thing2.prototype = Object.create(Thing1.prototype);（通过new操纵继承 ，通过object.create继承**不会**调用构造函数）\n\n# 四.Object this\n\n1，只 有有相同的**直接父元素**的属性才能通过this共享变量（两次黏连就近原则）\n2，可以直接通过对象引用你需要的属性\n\n```\nvar obj = {\n              foo: \"bar\",\n              deeper: {\n              logFoo: function () {\n              console.log(obj.foo);\n             }\n          }\n        };\n    obj.deeper.logFoo(); //logs \"bar\"\n```\n\n四.DOM event this\n1，在一个HTML DOM事件处理程序里边 ， **this 始终指向这个处理程序被所绑定到的HTML DOM 节点** （除非使用了bind）\n\n# 五.HTML & override & jQuery & thisArg this\n\n1，this 是保留字不能够重写\n2，eval可以访问this\n3，HTML 中可以放置代码并指向这个元素\n4，你可以通过with来将this添加到当前的执行环境，并且读写this的属性的时候不需要通过this\n5，**jQuery 中this都是指向HTML 元素节点 及应用**\n\n```\n 1 <div class=\"foo bar1\"></div>\n 2 <div class=\"foo bar2\"></div>\n 3 <script type=\"text/javascript\">\n 4 $(\".foo\").each(function () {\n 5     console.log(this); //logs <div class=\"foo...\n 6 });\n 7 $(\".foo\").on(\"click\", function () {\n 8     console.log(this); //logs <div class=\"foo...\n 9 });\n10 $(\".foo\").each(function () {\n11     this.click();\n12 });\n13 </script>  \n```\n\nthisArgs bind call apply thisArgs传参给函数 这个this 绑定 为你传递的对象。\n","slug":"this","published":1,"updated":"2024-04-10T17:46:25.878Z","_id":"cluvjqdcv000g0wpd58slgoth","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Javascript-this\"><a href=\"#Javascript-this\" class=\"headerlink\" title=\"Javascript this\"></a>Javascript this</h1><h1 id=\"一-Global-this\"><a href=\"#一-Global-this\" class=\"headerlink\" title=\"一.Global this\"></a>一.Global this</h1><p>1，在浏览器里，<strong>全局情况下this等同于window对象。</strong><br>2，当没有var 或 let 时 对变量的修改就是在改变this 的属性值。<br>3，node环境里 一般的会给global this 同时赋值。<br>4，node环境中 逐行读取的情况中 会优先给Global赋值。</p>\n<h1 id=\"二-Function-this\"><a href=\"#二-Function-this\" class=\"headerlink\" title=\"二.Function this\"></a>二.Function this</h1><p>1，如果调用函数时使用new 那么它就会成为一个新值。<br>2，如果<strong>正常使用this 那么他就指代一个全局的this</strong> 如果<strong>添加一个new</strong> 那么它就成为了<strong>构造函数</strong>并创建了一个实例，this指代这个实例（<strong>如果你在调用函数的时候在前面使用了new，this就会变成一个新的值，和global的this脱离干系</strong>）。<br>例如( setTimeout, setInterval,addEventListenner),通常使用self 来解决这个问题。</p>\n<h1 id=\"三-Prototype-this\"><a href=\"#三-Prototype-this\" class=\"headerlink\" title=\"三.Prototype this\"></a>三.Prototype this</h1><p>1，<strong>每创建一个函数对象</strong>就会<strong>自动获得一个特殊属性prototype</strong> 通过<strong>new 调用一个函数就能通过this 访问这个值</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Thing() &#123;</span><br><span class=\"line\">       console.log(this.foo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">Thing.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\">var thing = new Thing(); //logs &quot;bar&quot;</span><br><span class=\"line\">console.log(thing.foo);  //logs &quot;bar&quot;（原型链）</span><br></pre></td></tr></table></figure>\n\n<p>2，可以通过在实例里面删除自己添加的属性的方式来实现<br>Thing.prototype.deleteFoo &#x3D; function () {<br>delete this.foo;<br>}<br>3，可以把多个函数 的prototype 链接起来从而形成一个原型链 这样this会沿着这条原型链网上查找知道找到你想要的值。（原型继承）<br>4，在prototype里面定义的方法会<strong>影响到当前实例上游的this</strong> 这意味着<strong>当你赋值时this时隐藏了上游的属性</strong>（Ting1的实例中的<strong>proto</strong>指向Thing2的prototype属性建立原型链）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Thing1() &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">Thing1.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\">Thing1.prototype.logFoo = function () &#123;</span><br><span class=\"line\">    console.log(this.foo);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">function Thing2() &#123;</span><br><span class=\"line\"> this.foo = &quot;foo&quot;;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">*   Thing2.prototype = new Thing1();</span><br></pre></td></tr></table></figure>\n\n<p>5，<strong>嵌套函数可以捕获父元素的变量，但时这个函数没有继承this（通常使用 var _this &#x3D; this来结局这个问题）</strong><br>6，<strong>通过bind 可以将实例与方法一同传给函数</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function Thing() &#123;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\"> Thing.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\"> Thing.prototype.logFoo = function () &#123; </span><br><span class=\"line\">         console.log(this.foo);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> function doIt(method) &#123;</span><br><span class=\"line\">        method();</span><br><span class=\"line\">         &#125;       </span><br><span class=\"line\">var thing = new Thing();</span><br><span class=\"line\">//console.log(aStr , this.foo);</span><br><span class=\"line\"> doIt(thing.logFoo.bind(thing)); //logs bar</span><br><span class=\"line\">logFoo.bind(thing)(&quot;using bind&quot;); //logs &quot;using bind bar&quot;</span><br><span class=\"line\">logFoo.apply(thing, [&quot;using apply&quot;]); //logs &quot;using apply bar&quot;</span><br><span class=\"line\">logFoo.call(thing, &quot;using call&quot;); //logs &quot;using call bar&quot;</span><br><span class=\"line\">logFoo(&quot;using nothing&quot;); //logs &quot;using nothing undefined&quot;</span><br></pre></td></tr></table></figure>\n\n<p>7,可<strong>以通过var thing &#x3D; Object.create（Thing.prototype）来创建一个实例</strong>，这种创建方式<strong>在继承模式下重写构造函数</strong>非常有用。Thing2.prototype &#x3D; Object.create(Thing1.prototype);（通过new操纵继承 ，通过object.create继承<strong>不会</strong>调用构造函数）</p>\n<h1 id=\"四-Object-this\"><a href=\"#四-Object-this\" class=\"headerlink\" title=\"四.Object this\"></a>四.Object this</h1><p>1，只 有有相同的<strong>直接父元素</strong>的属性才能通过this共享变量（两次黏连就近原则）<br>2，可以直接通过对象引用你需要的属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">              foo: &quot;bar&quot;,</span><br><span class=\"line\">              deeper: &#123;</span><br><span class=\"line\">              logFoo: function () &#123;</span><br><span class=\"line\">              console.log(obj.foo);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    obj.deeper.logFoo(); //logs &quot;bar&quot;</span><br></pre></td></tr></table></figure>\n\n<p>四.DOM event this<br>1，在一个HTML DOM事件处理程序里边 ， <strong>this 始终指向这个处理程序被所绑定到的HTML DOM 节点</strong> （除非使用了bind）</p>\n<h1 id=\"五-HTML-override-jQuery-thisArg-this\"><a href=\"#五-HTML-override-jQuery-thisArg-this\" class=\"headerlink\" title=\"五.HTML &amp; override &amp; jQuery &amp; thisArg this\"></a>五.HTML &amp; override &amp; jQuery &amp; thisArg this</h1><p>1，this 是保留字不能够重写<br>2，eval可以访问this<br>3，HTML 中可以放置代码并指向这个元素<br>4，你可以通过with来将this添加到当前的执行环境，并且读写this的属性的时候不需要通过this<br>5，<strong>jQuery 中this都是指向HTML 元素节点 及应用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1 &lt;div class=&quot;foo bar1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> 2 &lt;div class=&quot;foo bar2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> 3 &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"> 4 $(&quot;.foo&quot;).each(function () &#123;</span><br><span class=\"line\"> 5     console.log(this); //logs &lt;div class=&quot;foo...</span><br><span class=\"line\"> 6 &#125;);</span><br><span class=\"line\"> 7 $(&quot;.foo&quot;).on(&quot;click&quot;, function () &#123;</span><br><span class=\"line\"> 8     console.log(this); //logs &lt;div class=&quot;foo...</span><br><span class=\"line\"> 9 &#125;);</span><br><span class=\"line\">10 $(&quot;.foo&quot;).each(function () &#123;</span><br><span class=\"line\">11     this.click();</span><br><span class=\"line\">12 &#125;);</span><br><span class=\"line\">13 &lt;/script&gt;  </span><br></pre></td></tr></table></figure>\n\n<p>thisArgs bind call apply thisArgs传参给函数 这个this 绑定 为你传递的对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Javascript-this\"><a href=\"#Javascript-this\" class=\"headerlink\" title=\"Javascript this\"></a>Javascript this</h1><h1 id=\"一-Global-this\"><a href=\"#一-Global-this\" class=\"headerlink\" title=\"一.Global this\"></a>一.Global this</h1><p>1，在浏览器里，<strong>全局情况下this等同于window对象。</strong><br>2，当没有var 或 let 时 对变量的修改就是在改变this 的属性值。<br>3，node环境里 一般的会给global this 同时赋值。<br>4，node环境中 逐行读取的情况中 会优先给Global赋值。</p>\n<h1 id=\"二-Function-this\"><a href=\"#二-Function-this\" class=\"headerlink\" title=\"二.Function this\"></a>二.Function this</h1><p>1，如果调用函数时使用new 那么它就会成为一个新值。<br>2，如果<strong>正常使用this 那么他就指代一个全局的this</strong> 如果<strong>添加一个new</strong> 那么它就成为了<strong>构造函数</strong>并创建了一个实例，this指代这个实例（<strong>如果你在调用函数的时候在前面使用了new，this就会变成一个新的值，和global的this脱离干系</strong>）。<br>例如( setTimeout, setInterval,addEventListenner),通常使用self 来解决这个问题。</p>\n<h1 id=\"三-Prototype-this\"><a href=\"#三-Prototype-this\" class=\"headerlink\" title=\"三.Prototype this\"></a>三.Prototype this</h1><p>1，<strong>每创建一个函数对象</strong>就会<strong>自动获得一个特殊属性prototype</strong> 通过<strong>new 调用一个函数就能通过this 访问这个值</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Thing() &#123;</span><br><span class=\"line\">       console.log(this.foo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">Thing.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\">var thing = new Thing(); //logs &quot;bar&quot;</span><br><span class=\"line\">console.log(thing.foo);  //logs &quot;bar&quot;（原型链）</span><br></pre></td></tr></table></figure>\n\n<p>2，可以通过在实例里面删除自己添加的属性的方式来实现<br>Thing.prototype.deleteFoo &#x3D; function () {<br>delete this.foo;<br>}<br>3，可以把多个函数 的prototype 链接起来从而形成一个原型链 这样this会沿着这条原型链网上查找知道找到你想要的值。（原型继承）<br>4，在prototype里面定义的方法会<strong>影响到当前实例上游的this</strong> 这意味着<strong>当你赋值时this时隐藏了上游的属性</strong>（Ting1的实例中的<strong>proto</strong>指向Thing2的prototype属性建立原型链）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Thing1() &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">Thing1.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\">Thing1.prototype.logFoo = function () &#123;</span><br><span class=\"line\">    console.log(this.foo);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">function Thing2() &#123;</span><br><span class=\"line\"> this.foo = &quot;foo&quot;;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">*   Thing2.prototype = new Thing1();</span><br></pre></td></tr></table></figure>\n\n<p>5，<strong>嵌套函数可以捕获父元素的变量，但时这个函数没有继承this（通常使用 var _this &#x3D; this来结局这个问题）</strong><br>6，<strong>通过bind 可以将实例与方法一同传给函数</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function Thing() &#123;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\"> Thing.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\"> Thing.prototype.logFoo = function () &#123; </span><br><span class=\"line\">         console.log(this.foo);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> function doIt(method) &#123;</span><br><span class=\"line\">        method();</span><br><span class=\"line\">         &#125;       </span><br><span class=\"line\">var thing = new Thing();</span><br><span class=\"line\">//console.log(aStr , this.foo);</span><br><span class=\"line\"> doIt(thing.logFoo.bind(thing)); //logs bar</span><br><span class=\"line\">logFoo.bind(thing)(&quot;using bind&quot;); //logs &quot;using bind bar&quot;</span><br><span class=\"line\">logFoo.apply(thing, [&quot;using apply&quot;]); //logs &quot;using apply bar&quot;</span><br><span class=\"line\">logFoo.call(thing, &quot;using call&quot;); //logs &quot;using call bar&quot;</span><br><span class=\"line\">logFoo(&quot;using nothing&quot;); //logs &quot;using nothing undefined&quot;</span><br></pre></td></tr></table></figure>\n\n<p>7,可<strong>以通过var thing &#x3D; Object.create（Thing.prototype）来创建一个实例</strong>，这种创建方式<strong>在继承模式下重写构造函数</strong>非常有用。Thing2.prototype &#x3D; Object.create(Thing1.prototype);（通过new操纵继承 ，通过object.create继承<strong>不会</strong>调用构造函数）</p>\n<h1 id=\"四-Object-this\"><a href=\"#四-Object-this\" class=\"headerlink\" title=\"四.Object this\"></a>四.Object this</h1><p>1，只 有有相同的<strong>直接父元素</strong>的属性才能通过this共享变量（两次黏连就近原则）<br>2，可以直接通过对象引用你需要的属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">              foo: &quot;bar&quot;,</span><br><span class=\"line\">              deeper: &#123;</span><br><span class=\"line\">              logFoo: function () &#123;</span><br><span class=\"line\">              console.log(obj.foo);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    obj.deeper.logFoo(); //logs &quot;bar&quot;</span><br></pre></td></tr></table></figure>\n\n<p>四.DOM event this<br>1，在一个HTML DOM事件处理程序里边 ， <strong>this 始终指向这个处理程序被所绑定到的HTML DOM 节点</strong> （除非使用了bind）</p>\n<h1 id=\"五-HTML-override-jQuery-thisArg-this\"><a href=\"#五-HTML-override-jQuery-thisArg-this\" class=\"headerlink\" title=\"五.HTML &amp; override &amp; jQuery &amp; thisArg this\"></a>五.HTML &amp; override &amp; jQuery &amp; thisArg this</h1><p>1，this 是保留字不能够重写<br>2，eval可以访问this<br>3，HTML 中可以放置代码并指向这个元素<br>4，你可以通过with来将this添加到当前的执行环境，并且读写this的属性的时候不需要通过this<br>5，<strong>jQuery 中this都是指向HTML 元素节点 及应用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1 &lt;div class=&quot;foo bar1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> 2 &lt;div class=&quot;foo bar2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> 3 &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"> 4 $(&quot;.foo&quot;).each(function () &#123;</span><br><span class=\"line\"> 5     console.log(this); //logs &lt;div class=&quot;foo...</span><br><span class=\"line\"> 6 &#125;);</span><br><span class=\"line\"> 7 $(&quot;.foo&quot;).on(&quot;click&quot;, function () &#123;</span><br><span class=\"line\"> 8     console.log(this); //logs &lt;div class=&quot;foo...</span><br><span class=\"line\"> 9 &#125;);</span><br><span class=\"line\">10 $(&quot;.foo&quot;).each(function () &#123;</span><br><span class=\"line\">11     this.click();</span><br><span class=\"line\">12 &#125;);</span><br><span class=\"line\">13 &lt;/script&gt;  </span><br></pre></td></tr></table></figure>\n\n<p>thisArgs bind call apply thisArgs传参给函数 这个this 绑定 为你传递的对象。</p>\n"},{"title":"Rx更进一步","date":"2017-10-02T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/rxjs.png","_content":"![rx](https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1455228348streams.png)\n# Rx更进一步\n\n借用Jay phelps在Youtube上介绍Rx十分精炼的总结，Rx = Lodash of Promise，在Node或是前端，处理异步一直是一个麻烦的事情，于是就有了各种各样的异步解决方案，callback，exent，Promise，generate，async/await现在我们又有了Rx。\n\n### 异步解决方案\n\n以读写文件为例子，看看异步处理方案的演进\n\n### callback\n\n```javascript\nfs.readFile('test.txt', (err, data) => {\n    if (err) console.log(err);\n    console.log(data)\n})\n```\n\n### event\n\n```javascript\nlet readStream = fs.createReadStream('test.txt');\nreadStream.on('open', (data) => {\n    console.log(data)\n})\nreadStream.close('close', () => {\n    console.log('closed')\n})\n```\n\n\n\n### Promise && async/await\n\n```javascript\nfunction readFilePromise(path) {\n    return new Promise((res, rej) => {\n        fs.readFile(path, (err, data) => {\n        \tif(err) {\n                rej(err)\n        \t}\n            res(data)\n        })\n    })\n}\n\nreadFilePromise('test.txt').then(data => {console.log(data)})\nasync function result() {\n    await readFilePromise('test.txt');\n}\n```\n\n\n\n### Generator\n\n```javascript\nfunction run(gen) {\n  var iter = gen(function (err, data) {\n    if (err) { iter.throw(err); }\n    return iter.next(data);\n  });\n  iter.next();\n}\n\nrun(function* (resume) {\n  var contents = yield require('fs').readFile('test.txt', resume);\n  console.log(contents);\n});\n```\n\n\n\n### Rx\n\n```javascript\n// 当file data被转化成Observable时你就可以使用Observable自带的所有方法\nlet readFileAsObservable = Observable.bindNodeCallback((\n  path: string,\n  encoding: string,\n  callback: (error: Error, buffer: Buffer) => void\n) => fs.readFile(path, encoding, callback));\n\nlet result = readFileAsObservable('./test.txt', 'utf8');\nresult.subscribe(\n  buffer => console.log(buffer.toString()),\n  error => console.error(error)\n);\n\n```\n\n\n\n仅仅是的文件，就有各种风格各异的解决方式，又都有各自的缺点，callback hell，Generator的死板， Promise也只是改变了callback的形式，async/await倒是很直观的一种表达，又因为其简便易用会导致人们的滥用。Rx在代码量大的情况下的可读性不是很好，又有一定的学习成本，所以没有完美的方案，只有适合的方案。\n\n如果在读文件的基础上加一些条件，比如读两个文件，而第二个文件又依赖于第一个文件的话\n\n```\nconst file1$ = readFileAsObservable('file1.txt');\nconst file2$ = readFileAsObservable('file2.txt');\nfile1$.concatMap(data => file2).subscribe(data ={\n    console.log(data)\n})\n```\n\n一个handbook的例子很好的说明了Rx的特点\n\n```\nimport { of } from 'rxjs/observable/of';\nimport { concatMap, delay, mergeMap } from 'rxjs/operators';\n\n// 发出延迟值\nconst source = of(2000, 1000);\n// 将内部 observable 映射成 source，当前一个完成时发出结果并订阅下一个\nconst example = source.pipe(\n  concatMap(val => of(`Delayed by: ${val}ms`).pipe(delay(val)))\n);\n// 输出: With concatMap: Delayed by: 2000ms, With concatMap: Delayed by: 1000ms\nconst subscribe = example.subscribe(val =>\n  console.log(`With concatMap: ${val}`)\n);\n\n// 展示 concatMap 和 mergeMap 之间的区别\nconst mergeMapExample = source\n  .pipe(\n    // 只是为了确保 meregeMap 的日志晚于 concatMap 示例\n    delay(5000),\n    mergeMap(val => of(`Delayed by: ${val}ms`).pipe(delay(val)))\n  )\n  .subscribe(val => console.log(`With mergeMap: ${val}`));\n```\n\n广播在PostMessage的情况下实现多页面的广播\n\n```\nimport { interval } from 'rxjs/observable/interval';\nimport { Subject } from 'rxjs/Subject';\nimport { take, tap, multicast, mapTo } from 'rxjs/operators';\n\n// 每2秒发出值并只取前5个\nconst source = interval(2000).pipe(take(5));\n\nconst example = source.pipe(\n  // 因为我们在下面进行了多播，所以副作用只会调用一次\n  tap(() => console.log('Side Effect #1')),\n  mapTo('Result!')\n);\n\n\n// 使用 subject 订阅 source 需要调用 connect() 方法\nconst multi = example.pipe(multicast(() => new Subject()));\n/*\n  多个订阅者会共享 source \n  输出:\n  \"Side Effect #1\"\n  \"Result!\"\n  \"Result!\"\n  ...\n*/\nconst subscriberOne = multi.subscribe(val => console.log(val));\nconst subscriberTwo = multi.subscribe(val => console.log(val));\n// 使用 subject 订阅 source\nmulti.connect();\n```\n\nhandBook 上计数器的实现方式\n\n```\n// \nconst takeUntilFunc = (Range, current) => {\n  if (Range > current) {\n    return val => val <= Range;\n  } else {\n    return val => val >= Range;\n  }\n};\n\nconst positiveOrNegative = (endRange, currentNumber) => {\n  if (endRange > currentNumber) {\n    return 1;\n  } else {\n    return -1;\n  }\n};\n\nconst renderUpdate = id => content => (document.getElementById(id).innerHTML = content);\nconst input = document.getElementById('range');\nconst updateButton = document.getElementById('update');\n\nconst subscription = (function(currentNumber) {\n  return fromEvent(updateButton, 'click').pipe(\n    map(_ => parseInt(input.value)),\n    switchMap(endRange => {\n      return timer(0, 20).pipe(\n        mapTo(positiveOrNegative(endRange, currentNumber)),\n        startWith(currentNumber),\n        scan((acc, curr) => acc + curr),\n        takeWhile(takeUntilFunc(endRange, currentNumber));\n    )\n    }),\n    tap(v => (currentNumber = v)),\n    startWith(currentNumber)\n  )\n    .subscribe(renderUpdate('display'));\n})(0);\n```\n\n受Rx的影响更有cycle.js提出的**反应式编程**虽然这个概念并没有大火，但依然提出了一个新的思考\n\n```\n// cycle编写的counter\n// 让DOM操作又了Stream的加持。。\nfunction main(sources) {\n  const decrement$ = sources.DOM\n    .select('.decrement').events('click').mapTo(-1);\n\n  const increment$ = sources.DOM\n    .select('.increment').events('click').mapTo(+1);\n\n  const action$ = xstream.merge(decrement$, increment$);\n  const count$ = action$.fold((x, y) => x + y, 0);\n\n  const vtree$ = count$.map(count =>\n    div([\n      button('.decrement', 'Decrement'),\n      button('.increment', 'Increment'),\n      p('Counter: ' + count)\n    ])\n  );\n  return { DOM: vtree$ };\n}\n```\n\n\n\n总之Rx是一支很成熟的解决方案，尤其是应对复杂度高的的场景的时候越能体现其价值。","source":"_posts/RxDeep.md","raw":"---\ntitle: Rx更进一步\ndate: 2017/10/03\ncover: https://technologybook.tech/assets/img/rxjs.png\ncategories:\n- reactive programming\ntags: \n- rxjs\n\n---\n![rx](https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1455228348streams.png)\n# Rx更进一步\n\n借用Jay phelps在Youtube上介绍Rx十分精炼的总结，Rx = Lodash of Promise，在Node或是前端，处理异步一直是一个麻烦的事情，于是就有了各种各样的异步解决方案，callback，exent，Promise，generate，async/await现在我们又有了Rx。\n\n### 异步解决方案\n\n以读写文件为例子，看看异步处理方案的演进\n\n### callback\n\n```javascript\nfs.readFile('test.txt', (err, data) => {\n    if (err) console.log(err);\n    console.log(data)\n})\n```\n\n### event\n\n```javascript\nlet readStream = fs.createReadStream('test.txt');\nreadStream.on('open', (data) => {\n    console.log(data)\n})\nreadStream.close('close', () => {\n    console.log('closed')\n})\n```\n\n\n\n### Promise && async/await\n\n```javascript\nfunction readFilePromise(path) {\n    return new Promise((res, rej) => {\n        fs.readFile(path, (err, data) => {\n        \tif(err) {\n                rej(err)\n        \t}\n            res(data)\n        })\n    })\n}\n\nreadFilePromise('test.txt').then(data => {console.log(data)})\nasync function result() {\n    await readFilePromise('test.txt');\n}\n```\n\n\n\n### Generator\n\n```javascript\nfunction run(gen) {\n  var iter = gen(function (err, data) {\n    if (err) { iter.throw(err); }\n    return iter.next(data);\n  });\n  iter.next();\n}\n\nrun(function* (resume) {\n  var contents = yield require('fs').readFile('test.txt', resume);\n  console.log(contents);\n});\n```\n\n\n\n### Rx\n\n```javascript\n// 当file data被转化成Observable时你就可以使用Observable自带的所有方法\nlet readFileAsObservable = Observable.bindNodeCallback((\n  path: string,\n  encoding: string,\n  callback: (error: Error, buffer: Buffer) => void\n) => fs.readFile(path, encoding, callback));\n\nlet result = readFileAsObservable('./test.txt', 'utf8');\nresult.subscribe(\n  buffer => console.log(buffer.toString()),\n  error => console.error(error)\n);\n\n```\n\n\n\n仅仅是的文件，就有各种风格各异的解决方式，又都有各自的缺点，callback hell，Generator的死板， Promise也只是改变了callback的形式，async/await倒是很直观的一种表达，又因为其简便易用会导致人们的滥用。Rx在代码量大的情况下的可读性不是很好，又有一定的学习成本，所以没有完美的方案，只有适合的方案。\n\n如果在读文件的基础上加一些条件，比如读两个文件，而第二个文件又依赖于第一个文件的话\n\n```\nconst file1$ = readFileAsObservable('file1.txt');\nconst file2$ = readFileAsObservable('file2.txt');\nfile1$.concatMap(data => file2).subscribe(data ={\n    console.log(data)\n})\n```\n\n一个handbook的例子很好的说明了Rx的特点\n\n```\nimport { of } from 'rxjs/observable/of';\nimport { concatMap, delay, mergeMap } from 'rxjs/operators';\n\n// 发出延迟值\nconst source = of(2000, 1000);\n// 将内部 observable 映射成 source，当前一个完成时发出结果并订阅下一个\nconst example = source.pipe(\n  concatMap(val => of(`Delayed by: ${val}ms`).pipe(delay(val)))\n);\n// 输出: With concatMap: Delayed by: 2000ms, With concatMap: Delayed by: 1000ms\nconst subscribe = example.subscribe(val =>\n  console.log(`With concatMap: ${val}`)\n);\n\n// 展示 concatMap 和 mergeMap 之间的区别\nconst mergeMapExample = source\n  .pipe(\n    // 只是为了确保 meregeMap 的日志晚于 concatMap 示例\n    delay(5000),\n    mergeMap(val => of(`Delayed by: ${val}ms`).pipe(delay(val)))\n  )\n  .subscribe(val => console.log(`With mergeMap: ${val}`));\n```\n\n广播在PostMessage的情况下实现多页面的广播\n\n```\nimport { interval } from 'rxjs/observable/interval';\nimport { Subject } from 'rxjs/Subject';\nimport { take, tap, multicast, mapTo } from 'rxjs/operators';\n\n// 每2秒发出值并只取前5个\nconst source = interval(2000).pipe(take(5));\n\nconst example = source.pipe(\n  // 因为我们在下面进行了多播，所以副作用只会调用一次\n  tap(() => console.log('Side Effect #1')),\n  mapTo('Result!')\n);\n\n\n// 使用 subject 订阅 source 需要调用 connect() 方法\nconst multi = example.pipe(multicast(() => new Subject()));\n/*\n  多个订阅者会共享 source \n  输出:\n  \"Side Effect #1\"\n  \"Result!\"\n  \"Result!\"\n  ...\n*/\nconst subscriberOne = multi.subscribe(val => console.log(val));\nconst subscriberTwo = multi.subscribe(val => console.log(val));\n// 使用 subject 订阅 source\nmulti.connect();\n```\n\nhandBook 上计数器的实现方式\n\n```\n// \nconst takeUntilFunc = (Range, current) => {\n  if (Range > current) {\n    return val => val <= Range;\n  } else {\n    return val => val >= Range;\n  }\n};\n\nconst positiveOrNegative = (endRange, currentNumber) => {\n  if (endRange > currentNumber) {\n    return 1;\n  } else {\n    return -1;\n  }\n};\n\nconst renderUpdate = id => content => (document.getElementById(id).innerHTML = content);\nconst input = document.getElementById('range');\nconst updateButton = document.getElementById('update');\n\nconst subscription = (function(currentNumber) {\n  return fromEvent(updateButton, 'click').pipe(\n    map(_ => parseInt(input.value)),\n    switchMap(endRange => {\n      return timer(0, 20).pipe(\n        mapTo(positiveOrNegative(endRange, currentNumber)),\n        startWith(currentNumber),\n        scan((acc, curr) => acc + curr),\n        takeWhile(takeUntilFunc(endRange, currentNumber));\n    )\n    }),\n    tap(v => (currentNumber = v)),\n    startWith(currentNumber)\n  )\n    .subscribe(renderUpdate('display'));\n})(0);\n```\n\n受Rx的影响更有cycle.js提出的**反应式编程**虽然这个概念并没有大火，但依然提出了一个新的思考\n\n```\n// cycle编写的counter\n// 让DOM操作又了Stream的加持。。\nfunction main(sources) {\n  const decrement$ = sources.DOM\n    .select('.decrement').events('click').mapTo(-1);\n\n  const increment$ = sources.DOM\n    .select('.increment').events('click').mapTo(+1);\n\n  const action$ = xstream.merge(decrement$, increment$);\n  const count$ = action$.fold((x, y) => x + y, 0);\n\n  const vtree$ = count$.map(count =>\n    div([\n      button('.decrement', 'Decrement'),\n      button('.increment', 'Increment'),\n      p('Counter: ' + count)\n    ])\n  );\n  return { DOM: vtree$ };\n}\n```\n\n\n\n总之Rx是一支很成熟的解决方案，尤其是应对复杂度高的的场景的时候越能体现其价值。","slug":"RxDeep","published":1,"updated":"2024-04-10T17:46:25.876Z","_id":"cluvjqdcw000h0wpd0rnp5qbl","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1455228348streams.png\" alt=\"rx\"></p>\n<h1 id=\"Rx更进一步\"><a href=\"#Rx更进一步\" class=\"headerlink\" title=\"Rx更进一步\"></a>Rx更进一步</h1><p>借用Jay phelps在Youtube上介绍Rx十分精炼的总结，Rx &#x3D; Lodash of Promise，在Node或是前端，处理异步一直是一个麻烦的事情，于是就有了各种各样的异步解决方案，callback，exent，Promise，generate，async&#x2F;await现在我们又有了Rx。</p>\n<h3 id=\"异步解决方案\"><a href=\"#异步解决方案\" class=\"headerlink\" title=\"异步解决方案\"></a>异步解决方案</h3><p>以读写文件为例子，看看异步处理方案的演进</p>\n<h3 id=\"callback\"><a href=\"#callback\" class=\"headerlink\" title=\"callback\"></a>callback</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"event\"><a href=\"#event\" class=\"headerlink\" title=\"event\"></a>event</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> readStream = fs.<span class=\"title function_\">createReadStream</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>);</span><br><span class=\"line\">readStream.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;open&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">readStream.<span class=\"title function_\">close</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;closed&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Promise-async-await\"><a href=\"#Promise-async-await\" class=\"headerlink\" title=\"Promise &amp;&amp; async&#x2F;await\"></a>Promise &amp;&amp; async&#x2F;await</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">readFilePromise</span>(<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">readFile</span>(path, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">rej</span>(err)</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">            <span class=\"title function_\">res</span>(data)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">readFilePromise</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">result</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">readFilePromise</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">gen</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> iter = <span class=\"title function_\">gen</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; iter.<span class=\"keyword\">throw</span>(err); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  iter.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(<span class=\"keyword\">function</span>* (resume) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> contents = <span class=\"keyword\">yield</span> <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>, resume);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(contents);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Rx\"><a href=\"#Rx\" class=\"headerlink\" title=\"Rx\"></a>Rx</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当file data被转化成Observable时你就可以使用Observable自带的所有方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> readFileAsObservable = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">bindNodeCallback</span>(<span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  path: string,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  encoding: string,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  callback: (error: <span class=\"built_in\">Error</span>, buffer: Buffer) =&gt; <span class=\"keyword\">void</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> fs.<span class=\"title function_\">readFile</span>(path, encoding, callback));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">readFileAsObservable</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\">result.<span class=\"title function_\">subscribe</span>(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">buffer</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buffer.<span class=\"title function_\">toString</span>()),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>仅仅是的文件，就有各种风格各异的解决方式，又都有各自的缺点，callback hell，Generator的死板， Promise也只是改变了callback的形式，async&#x2F;await倒是很直观的一种表达，又因为其简便易用会导致人们的滥用。Rx在代码量大的情况下的可读性不是很好，又有一定的学习成本，所以没有完美的方案，只有适合的方案。</p>\n<p>如果在读文件的基础上加一些条件，比如读两个文件，而第二个文件又依赖于第一个文件的话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const file1$ = readFileAsObservable(&#x27;file1.txt&#x27;);</span><br><span class=\"line\">const file2$ = readFileAsObservable(&#x27;file2.txt&#x27;);</span><br><span class=\"line\">file1$.concatMap(data =&gt; file2).subscribe(data =&#123;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>一个handbook的例子很好的说明了Rx的特点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; of &#125; from &#x27;rxjs/observable/of&#x27;;</span><br><span class=\"line\">import &#123; concatMap, delay, mergeMap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 发出延迟值</span><br><span class=\"line\">const source = of(2000, 1000);</span><br><span class=\"line\">// 将内部 observable 映射成 source，当前一个完成时发出结果并订阅下一个</span><br><span class=\"line\">const example = source.pipe(</span><br><span class=\"line\">  concatMap(val =&gt; of(`Delayed by: $&#123;val&#125;ms`).pipe(delay(val)))</span><br><span class=\"line\">);</span><br><span class=\"line\">// 输出: With concatMap: Delayed by: 2000ms, With concatMap: Delayed by: 1000ms</span><br><span class=\"line\">const subscribe = example.subscribe(val =&gt;</span><br><span class=\"line\">  console.log(`With concatMap: $&#123;val&#125;`)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// 展示 concatMap 和 mergeMap 之间的区别</span><br><span class=\"line\">const mergeMapExample = source</span><br><span class=\"line\">  .pipe(</span><br><span class=\"line\">    // 只是为了确保 meregeMap 的日志晚于 concatMap 示例</span><br><span class=\"line\">    delay(5000),</span><br><span class=\"line\">    mergeMap(val =&gt; of(`Delayed by: $&#123;val&#125;ms`).pipe(delay(val)))</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .subscribe(val =&gt; console.log(`With mergeMap: $&#123;val&#125;`));</span><br></pre></td></tr></table></figure>\n\n<p>广播在PostMessage的情况下实现多页面的广播</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; interval &#125; from &#x27;rxjs/observable/interval&#x27;;</span><br><span class=\"line\">import &#123; Subject &#125; from &#x27;rxjs/Subject&#x27;;</span><br><span class=\"line\">import &#123; take, tap, multicast, mapTo &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每2秒发出值并只取前5个</span><br><span class=\"line\">const source = interval(2000).pipe(take(5));</span><br><span class=\"line\"></span><br><span class=\"line\">const example = source.pipe(</span><br><span class=\"line\">  // 因为我们在下面进行了多播，所以副作用只会调用一次</span><br><span class=\"line\">  tap(() =&gt; console.log(&#x27;Side Effect #1&#x27;)),</span><br><span class=\"line\">  mapTo(&#x27;Result!&#x27;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 使用 subject 订阅 source 需要调用 connect() 方法</span><br><span class=\"line\">const multi = example.pipe(multicast(() =&gt; new Subject()));</span><br><span class=\"line\">/*</span><br><span class=\"line\">  多个订阅者会共享 source </span><br><span class=\"line\">  输出:</span><br><span class=\"line\">  &quot;Side Effect #1&quot;</span><br><span class=\"line\">  &quot;Result!&quot;</span><br><span class=\"line\">  &quot;Result!&quot;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">*/</span><br><span class=\"line\">const subscriberOne = multi.subscribe(val =&gt; console.log(val));</span><br><span class=\"line\">const subscriberTwo = multi.subscribe(val =&gt; console.log(val));</span><br><span class=\"line\">// 使用 subject 订阅 source</span><br><span class=\"line\">multi.connect();</span><br></pre></td></tr></table></figure>\n\n<p>handBook 上计数器的实现方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// </span><br><span class=\"line\">const takeUntilFunc = (Range, current) =&gt; &#123;</span><br><span class=\"line\">  if (Range &gt; current) &#123;</span><br><span class=\"line\">    return val =&gt; val &lt;= Range;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return val =&gt; val &gt;= Range;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const positiveOrNegative = (endRange, currentNumber) =&gt; &#123;</span><br><span class=\"line\">  if (endRange &gt; currentNumber) &#123;</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const renderUpdate = id =&gt; content =&gt; (document.getElementById(id).innerHTML = content);</span><br><span class=\"line\">const input = document.getElementById(&#x27;range&#x27;);</span><br><span class=\"line\">const updateButton = document.getElementById(&#x27;update&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">const subscription = (function(currentNumber) &#123;</span><br><span class=\"line\">  return fromEvent(updateButton, &#x27;click&#x27;).pipe(</span><br><span class=\"line\">    map(_ =&gt; parseInt(input.value)),</span><br><span class=\"line\">    switchMap(endRange =&gt; &#123;</span><br><span class=\"line\">      return timer(0, 20).pipe(</span><br><span class=\"line\">        mapTo(positiveOrNegative(endRange, currentNumber)),</span><br><span class=\"line\">        startWith(currentNumber),</span><br><span class=\"line\">        scan((acc, curr) =&gt; acc + curr),</span><br><span class=\"line\">        takeWhile(takeUntilFunc(endRange, currentNumber));</span><br><span class=\"line\">    )</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    tap(v =&gt; (currentNumber = v)),</span><br><span class=\"line\">    startWith(currentNumber)</span><br><span class=\"line\">  )</span><br><span class=\"line\">    .subscribe(renderUpdate(&#x27;display&#x27;));</span><br><span class=\"line\">&#125;)(0);</span><br></pre></td></tr></table></figure>\n\n<p>受Rx的影响更有cycle.js提出的<strong>反应式编程</strong>虽然这个概念并没有大火，但依然提出了一个新的思考</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// cycle编写的counter</span><br><span class=\"line\">// 让DOM操作又了Stream的加持。。</span><br><span class=\"line\">function main(sources) &#123;</span><br><span class=\"line\">  const decrement$ = sources.DOM</span><br><span class=\"line\">    .select(&#x27;.decrement&#x27;).events(&#x27;click&#x27;).mapTo(-1);</span><br><span class=\"line\"></span><br><span class=\"line\">  const increment$ = sources.DOM</span><br><span class=\"line\">    .select(&#x27;.increment&#x27;).events(&#x27;click&#x27;).mapTo(+1);</span><br><span class=\"line\"></span><br><span class=\"line\">  const action$ = xstream.merge(decrement$, increment$);</span><br><span class=\"line\">  const count$ = action$.fold((x, y) =&gt; x + y, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">  const vtree$ = count$.map(count =&gt;</span><br><span class=\"line\">    div([</span><br><span class=\"line\">      button(&#x27;.decrement&#x27;, &#x27;Decrement&#x27;),</span><br><span class=\"line\">      button(&#x27;.increment&#x27;, &#x27;Increment&#x27;),</span><br><span class=\"line\">      p(&#x27;Counter: &#x27; + count)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  );</span><br><span class=\"line\">  return &#123; DOM: vtree$ &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总之Rx是一支很成熟的解决方案，尤其是应对复杂度高的的场景的时候越能体现其价值。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1455228348streams.png\" alt=\"rx\"></p>\n<h1 id=\"Rx更进一步\"><a href=\"#Rx更进一步\" class=\"headerlink\" title=\"Rx更进一步\"></a>Rx更进一步</h1><p>借用Jay phelps在Youtube上介绍Rx十分精炼的总结，Rx &#x3D; Lodash of Promise，在Node或是前端，处理异步一直是一个麻烦的事情，于是就有了各种各样的异步解决方案，callback，exent，Promise，generate，async&#x2F;await现在我们又有了Rx。</p>\n<h3 id=\"异步解决方案\"><a href=\"#异步解决方案\" class=\"headerlink\" title=\"异步解决方案\"></a>异步解决方案</h3><p>以读写文件为例子，看看异步处理方案的演进</p>\n<h3 id=\"callback\"><a href=\"#callback\" class=\"headerlink\" title=\"callback\"></a>callback</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"event\"><a href=\"#event\" class=\"headerlink\" title=\"event\"></a>event</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> readStream = fs.<span class=\"title function_\">createReadStream</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>);</span><br><span class=\"line\">readStream.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;open&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">readStream.<span class=\"title function_\">close</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;closed&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Promise-async-await\"><a href=\"#Promise-async-await\" class=\"headerlink\" title=\"Promise &amp;&amp; async&#x2F;await\"></a>Promise &amp;&amp; async&#x2F;await</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">readFilePromise</span>(<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">readFile</span>(path, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">rej</span>(err)</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">            <span class=\"title function_\">res</span>(data)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">readFilePromise</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">result</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">readFilePromise</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">gen</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> iter = <span class=\"title function_\">gen</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; iter.<span class=\"keyword\">throw</span>(err); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  iter.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(<span class=\"keyword\">function</span>* (resume) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> contents = <span class=\"keyword\">yield</span> <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;test.txt&#x27;</span>, resume);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(contents);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Rx\"><a href=\"#Rx\" class=\"headerlink\" title=\"Rx\"></a>Rx</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当file data被转化成Observable时你就可以使用Observable自带的所有方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> readFileAsObservable = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">bindNodeCallback</span>(<span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  path: string,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  encoding: string,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  callback: (error: <span class=\"built_in\">Error</span>, buffer: Buffer) =&gt; <span class=\"keyword\">void</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> fs.<span class=\"title function_\">readFile</span>(path, encoding, callback));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">readFileAsObservable</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\">result.<span class=\"title function_\">subscribe</span>(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">buffer</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buffer.<span class=\"title function_\">toString</span>()),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>仅仅是的文件，就有各种风格各异的解决方式，又都有各自的缺点，callback hell，Generator的死板， Promise也只是改变了callback的形式，async&#x2F;await倒是很直观的一种表达，又因为其简便易用会导致人们的滥用。Rx在代码量大的情况下的可读性不是很好，又有一定的学习成本，所以没有完美的方案，只有适合的方案。</p>\n<p>如果在读文件的基础上加一些条件，比如读两个文件，而第二个文件又依赖于第一个文件的话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const file1$ = readFileAsObservable(&#x27;file1.txt&#x27;);</span><br><span class=\"line\">const file2$ = readFileAsObservable(&#x27;file2.txt&#x27;);</span><br><span class=\"line\">file1$.concatMap(data =&gt; file2).subscribe(data =&#123;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>一个handbook的例子很好的说明了Rx的特点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; of &#125; from &#x27;rxjs/observable/of&#x27;;</span><br><span class=\"line\">import &#123; concatMap, delay, mergeMap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 发出延迟值</span><br><span class=\"line\">const source = of(2000, 1000);</span><br><span class=\"line\">// 将内部 observable 映射成 source，当前一个完成时发出结果并订阅下一个</span><br><span class=\"line\">const example = source.pipe(</span><br><span class=\"line\">  concatMap(val =&gt; of(`Delayed by: $&#123;val&#125;ms`).pipe(delay(val)))</span><br><span class=\"line\">);</span><br><span class=\"line\">// 输出: With concatMap: Delayed by: 2000ms, With concatMap: Delayed by: 1000ms</span><br><span class=\"line\">const subscribe = example.subscribe(val =&gt;</span><br><span class=\"line\">  console.log(`With concatMap: $&#123;val&#125;`)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// 展示 concatMap 和 mergeMap 之间的区别</span><br><span class=\"line\">const mergeMapExample = source</span><br><span class=\"line\">  .pipe(</span><br><span class=\"line\">    // 只是为了确保 meregeMap 的日志晚于 concatMap 示例</span><br><span class=\"line\">    delay(5000),</span><br><span class=\"line\">    mergeMap(val =&gt; of(`Delayed by: $&#123;val&#125;ms`).pipe(delay(val)))</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .subscribe(val =&gt; console.log(`With mergeMap: $&#123;val&#125;`));</span><br></pre></td></tr></table></figure>\n\n<p>广播在PostMessage的情况下实现多页面的广播</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; interval &#125; from &#x27;rxjs/observable/interval&#x27;;</span><br><span class=\"line\">import &#123; Subject &#125; from &#x27;rxjs/Subject&#x27;;</span><br><span class=\"line\">import &#123; take, tap, multicast, mapTo &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每2秒发出值并只取前5个</span><br><span class=\"line\">const source = interval(2000).pipe(take(5));</span><br><span class=\"line\"></span><br><span class=\"line\">const example = source.pipe(</span><br><span class=\"line\">  // 因为我们在下面进行了多播，所以副作用只会调用一次</span><br><span class=\"line\">  tap(() =&gt; console.log(&#x27;Side Effect #1&#x27;)),</span><br><span class=\"line\">  mapTo(&#x27;Result!&#x27;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 使用 subject 订阅 source 需要调用 connect() 方法</span><br><span class=\"line\">const multi = example.pipe(multicast(() =&gt; new Subject()));</span><br><span class=\"line\">/*</span><br><span class=\"line\">  多个订阅者会共享 source </span><br><span class=\"line\">  输出:</span><br><span class=\"line\">  &quot;Side Effect #1&quot;</span><br><span class=\"line\">  &quot;Result!&quot;</span><br><span class=\"line\">  &quot;Result!&quot;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">*/</span><br><span class=\"line\">const subscriberOne = multi.subscribe(val =&gt; console.log(val));</span><br><span class=\"line\">const subscriberTwo = multi.subscribe(val =&gt; console.log(val));</span><br><span class=\"line\">// 使用 subject 订阅 source</span><br><span class=\"line\">multi.connect();</span><br></pre></td></tr></table></figure>\n\n<p>handBook 上计数器的实现方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// </span><br><span class=\"line\">const takeUntilFunc = (Range, current) =&gt; &#123;</span><br><span class=\"line\">  if (Range &gt; current) &#123;</span><br><span class=\"line\">    return val =&gt; val &lt;= Range;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return val =&gt; val &gt;= Range;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const positiveOrNegative = (endRange, currentNumber) =&gt; &#123;</span><br><span class=\"line\">  if (endRange &gt; currentNumber) &#123;</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const renderUpdate = id =&gt; content =&gt; (document.getElementById(id).innerHTML = content);</span><br><span class=\"line\">const input = document.getElementById(&#x27;range&#x27;);</span><br><span class=\"line\">const updateButton = document.getElementById(&#x27;update&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">const subscription = (function(currentNumber) &#123;</span><br><span class=\"line\">  return fromEvent(updateButton, &#x27;click&#x27;).pipe(</span><br><span class=\"line\">    map(_ =&gt; parseInt(input.value)),</span><br><span class=\"line\">    switchMap(endRange =&gt; &#123;</span><br><span class=\"line\">      return timer(0, 20).pipe(</span><br><span class=\"line\">        mapTo(positiveOrNegative(endRange, currentNumber)),</span><br><span class=\"line\">        startWith(currentNumber),</span><br><span class=\"line\">        scan((acc, curr) =&gt; acc + curr),</span><br><span class=\"line\">        takeWhile(takeUntilFunc(endRange, currentNumber));</span><br><span class=\"line\">    )</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    tap(v =&gt; (currentNumber = v)),</span><br><span class=\"line\">    startWith(currentNumber)</span><br><span class=\"line\">  )</span><br><span class=\"line\">    .subscribe(renderUpdate(&#x27;display&#x27;));</span><br><span class=\"line\">&#125;)(0);</span><br></pre></td></tr></table></figure>\n\n<p>受Rx的影响更有cycle.js提出的<strong>反应式编程</strong>虽然这个概念并没有大火，但依然提出了一个新的思考</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// cycle编写的counter</span><br><span class=\"line\">// 让DOM操作又了Stream的加持。。</span><br><span class=\"line\">function main(sources) &#123;</span><br><span class=\"line\">  const decrement$ = sources.DOM</span><br><span class=\"line\">    .select(&#x27;.decrement&#x27;).events(&#x27;click&#x27;).mapTo(-1);</span><br><span class=\"line\"></span><br><span class=\"line\">  const increment$ = sources.DOM</span><br><span class=\"line\">    .select(&#x27;.increment&#x27;).events(&#x27;click&#x27;).mapTo(+1);</span><br><span class=\"line\"></span><br><span class=\"line\">  const action$ = xstream.merge(decrement$, increment$);</span><br><span class=\"line\">  const count$ = action$.fold((x, y) =&gt; x + y, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">  const vtree$ = count$.map(count =&gt;</span><br><span class=\"line\">    div([</span><br><span class=\"line\">      button(&#x27;.decrement&#x27;, &#x27;Decrement&#x27;),</span><br><span class=\"line\">      button(&#x27;.increment&#x27;, &#x27;Increment&#x27;),</span><br><span class=\"line\">      p(&#x27;Counter: &#x27; + count)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  );</span><br><span class=\"line\">  return &#123; DOM: vtree$ &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总之Rx是一支很成熟的解决方案，尤其是应对复杂度高的的场景的时候越能体现其价值。</p>\n"},{"title":"closure && object.create","date":"2017-01-03T16:00:00.000Z","_content":"\n\n# closure && object.create\n\n### 闭包就是能够读取其他函数内部变量的函数\n\n**f2可以使用f1中的参数当f1的返回值为f2时 外部函数可以调用内部的参数这就形成了一个闭包。**\n\n```javascript\nfunction f1(){\n　　　　var n=999;\n　　　　function f2(){\n　　　　　　alert(n); \n　　　　}\n　　　　return f2;\n　　}\n　　var result=f1();\n　　result(); // 999\n```\n\n### 闭包的用处\n\n> 可以读取函数内部的变量，\n> 让这些变量的值始终保持在内存中。(通常情况下应用完销毁)\n\n```javascript\nfunction f1 () {\n        var n = 5;\n        add = function(){n+=1}\n         function f3(){\n            alert(n);\n        }\n        return f3;\n    }\n    var f2 = f1();\n    f2();  // 5\n    add(); // +1\n    f2(); // 6 内存中的n没有被销毁\n```\n\n### 使用闭包的注意点\n\n> 由于闭包会使得函数中的**变量都被保存在内存中**，**内存消耗很大**，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，**在退出函数之前，将不使用的局部变量全部删除**。\n> *(不清除内存)*\n> 闭包会在父函数外部，**改变父函数内部变量的值**。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n```javascript\n　　var name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　return function(){\n　　　　　　　　return this.name;\n　　　　　　};\n　　　　}\n　　};\n　　alert(object.getNameFunc()());\n　　————————————————\n　　var name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　var that = this;\n　　　　　　return function(){\n　　　　　　　　return that.name;\n　　　　　　};\n　　　　}\n　　};\n　　alert(object.getNameFunc()());\n```\n\n## object.create\n\n1，定值为null 创建不带原型对象\n2，创建带属性带原型的对象\n\n```javascript\nvar pt = {\n        say : function(){\n            console.log('saying!');    \n        }\n    }\n\nvar o3 = Object.create(pt, {\n        size: {\n            value: \"large\",\n            enumerable: true\n        },\n        shape: {\n            value: \"round\",\n            enumerable: true\n        }    \n    });\n\n    console.log(o3.size);    // large\n    console.log(o3.shape);     // round\n    console.log(Object.getPrototypeOf(o3));     // {say:...}\n```\n\n3，实现继承\n\n```javascript\n//Shape - superclass\n        function Shape() {\n          this.x = 0;\n          this.y = 0;\n        }\n\n        Shape.prototype.move = function(x, y) {\n            this.x += x;\n            this.y += y;\n            console.info(\"Shape moved.\");\n        };\n\n        // Rectangle - subclass\n        function Rectangle() {\n          Shape.call(this); //call super constructor.继承属性\n        }\n\n        Rectangle.prototype = Object.create(Shape.prototype);//继承方法\n\n        var rect = new Rectangle();\n\n        console.log(rect instanceof Rectangle); //true.\n        console.log(rect instanceof Shape); //true.\n\n        rect.move(); //\"Shape moved.\"\n        //new object（）没有父类 使用其构造方法和属性\n        //Object.create（）指向原型 （父子关系）\n```\n\n## call apply bind\n\n1，将参数传递给apple\n\n```javascript\nbanana = {\n    color: \"yellow\"\n}\napple.say.call(banana);     //My color is yellow\napple.say.apply(banana);    //My color is yellow\n```\n\n2，\n\n> 某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时用 call 。\n> 不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来遍历所有的参数。\n> 如果第一个参数为null，函数体内的this指向宿主对象，在浏览器中是window\n\n结构 fn.prototype.apply(this,arguments)\n*arguments是this中的参数 再传入fn中。fn.prototype.apply(this—>argument)*\n3，**bind**\n**bind()方法会创建一个新函数**，称为**绑定函数**，当调用这个绑定函数时，绑定函数会以创建它时传入 **bind()方法的第一个参数作为 this**，**传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。**\n*多次 bind() 是无效的。*\n\n> apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；\n> apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；\n> apply 、 call 、bind 三者都可以利用后续参数传参；\n> bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。","source":"_posts/closure.md","raw":"title: closure && object.create\ndate: 2017/01/04\ncategories:\n- js\ntags:\n- js\n\n---\n\n\n# closure && object.create\n\n### 闭包就是能够读取其他函数内部变量的函数\n\n**f2可以使用f1中的参数当f1的返回值为f2时 外部函数可以调用内部的参数这就形成了一个闭包。**\n\n```javascript\nfunction f1(){\n　　　　var n=999;\n　　　　function f2(){\n　　　　　　alert(n); \n　　　　}\n　　　　return f2;\n　　}\n　　var result=f1();\n　　result(); // 999\n```\n\n### 闭包的用处\n\n> 可以读取函数内部的变量，\n> 让这些变量的值始终保持在内存中。(通常情况下应用完销毁)\n\n```javascript\nfunction f1 () {\n        var n = 5;\n        add = function(){n+=1}\n         function f3(){\n            alert(n);\n        }\n        return f3;\n    }\n    var f2 = f1();\n    f2();  // 5\n    add(); // +1\n    f2(); // 6 内存中的n没有被销毁\n```\n\n### 使用闭包的注意点\n\n> 由于闭包会使得函数中的**变量都被保存在内存中**，**内存消耗很大**，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，**在退出函数之前，将不使用的局部变量全部删除**。\n> *(不清除内存)*\n> 闭包会在父函数外部，**改变父函数内部变量的值**。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n```javascript\n　　var name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　return function(){\n　　　　　　　　return this.name;\n　　　　　　};\n　　　　}\n　　};\n　　alert(object.getNameFunc()());\n　　————————————————\n　　var name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　var that = this;\n　　　　　　return function(){\n　　　　　　　　return that.name;\n　　　　　　};\n　　　　}\n　　};\n　　alert(object.getNameFunc()());\n```\n\n## object.create\n\n1，定值为null 创建不带原型对象\n2，创建带属性带原型的对象\n\n```javascript\nvar pt = {\n        say : function(){\n            console.log('saying!');    \n        }\n    }\n\nvar o3 = Object.create(pt, {\n        size: {\n            value: \"large\",\n            enumerable: true\n        },\n        shape: {\n            value: \"round\",\n            enumerable: true\n        }    \n    });\n\n    console.log(o3.size);    // large\n    console.log(o3.shape);     // round\n    console.log(Object.getPrototypeOf(o3));     // {say:...}\n```\n\n3，实现继承\n\n```javascript\n//Shape - superclass\n        function Shape() {\n          this.x = 0;\n          this.y = 0;\n        }\n\n        Shape.prototype.move = function(x, y) {\n            this.x += x;\n            this.y += y;\n            console.info(\"Shape moved.\");\n        };\n\n        // Rectangle - subclass\n        function Rectangle() {\n          Shape.call(this); //call super constructor.继承属性\n        }\n\n        Rectangle.prototype = Object.create(Shape.prototype);//继承方法\n\n        var rect = new Rectangle();\n\n        console.log(rect instanceof Rectangle); //true.\n        console.log(rect instanceof Shape); //true.\n\n        rect.move(); //\"Shape moved.\"\n        //new object（）没有父类 使用其构造方法和属性\n        //Object.create（）指向原型 （父子关系）\n```\n\n## call apply bind\n\n1，将参数传递给apple\n\n```javascript\nbanana = {\n    color: \"yellow\"\n}\napple.say.call(banana);     //My color is yellow\napple.say.apply(banana);    //My color is yellow\n```\n\n2，\n\n> 某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时用 call 。\n> 不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来遍历所有的参数。\n> 如果第一个参数为null，函数体内的this指向宿主对象，在浏览器中是window\n\n结构 fn.prototype.apply(this,arguments)\n*arguments是this中的参数 再传入fn中。fn.prototype.apply(this—>argument)*\n3，**bind**\n**bind()方法会创建一个新函数**，称为**绑定函数**，当调用这个绑定函数时，绑定函数会以创建它时传入 **bind()方法的第一个参数作为 this**，**传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。**\n*多次 bind() 是无效的。*\n\n> apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；\n> apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；\n> apply 、 call 、bind 三者都可以利用后续参数传参；\n> bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。","slug":"closure","published":1,"updated":"2024-04-10T17:46:25.877Z","_id":"cluvjqdd9000o0wpdh5y0gn1p","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"closure-object-create\"><a href=\"#closure-object-create\" class=\"headerlink\" title=\"closure &amp;&amp; object.create\"></a>closure &amp;&amp; object.create</h1><h3 id=\"闭包就是能够读取其他函数内部变量的函数\"><a href=\"#闭包就是能够读取其他函数内部变量的函数\" class=\"headerlink\" title=\"闭包就是能够读取其他函数内部变量的函数\"></a>闭包就是能够读取其他函数内部变量的函数</h3><p><strong>f2可以使用f1中的参数当f1的返回值为f2时 外部函数可以调用内部的参数这就形成了一个闭包。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"title function_\">f2</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　<span class=\"title function_\">alert</span>(n); </span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> result=<span class=\"title function_\">f1</span>();</span><br><span class=\"line\">　　<span class=\"title function_\">result</span>(); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包的用处\"><a href=\"#闭包的用处\" class=\"headerlink\" title=\"闭包的用处\"></a>闭包的用处</h3><blockquote>\n<p>可以读取函数内部的变量，<br>让这些变量的值始终保持在内存中。(通常情况下应用完销毁)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">        add = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;n+=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">         <span class=\"keyword\">function</span> <span class=\"title function_\">f3</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f2 = <span class=\"title function_\">f1</span>();</span><br><span class=\"line\">    <span class=\"title function_\">f2</span>();  <span class=\"comment\">// 5</span></span><br><span class=\"line\">    <span class=\"title function_\">add</span>(); <span class=\"comment\">// +1</span></span><br><span class=\"line\">    <span class=\"title function_\">f2</span>(); <span class=\"comment\">// 6 内存中的n没有被销毁</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h3><blockquote>\n<p>由于闭包会使得函数中的<strong>变量都被保存在内存中</strong>，<strong>内存消耗很大</strong>，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，<strong>在退出函数之前，将不使用的局部变量全部删除</strong>。<br><em>(不清除内存)</em><br>闭包会在父函数外部，<strong>改变父函数内部变量的值</strong>。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">　　　　name : <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">　　　　getNameFunc : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">　　　　　　&#125;;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　<span class=\"title function_\">alert</span>(object.<span class=\"title function_\">getNameFunc</span>()());</span><br><span class=\"line\">　　————————————————</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">　　　　name : <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">　　　　getNameFunc : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　<span class=\"keyword\">var</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> that.<span class=\"property\">name</span>;</span><br><span class=\"line\">　　　　　　&#125;;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　<span class=\"title function_\">alert</span>(object.<span class=\"title function_\">getNameFunc</span>()());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"object-create\"><a href=\"#object-create\" class=\"headerlink\" title=\"object.create\"></a>object.create</h2><p>1，定值为null 创建不带原型对象<br>2，创建带属性带原型的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pt = &#123;</span><br><span class=\"line\">        say : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;saying!&#x27;</span>);    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o3 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(pt, &#123;</span><br><span class=\"line\">        <span class=\"attr\">size</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"string\">&quot;large&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">shape</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"string\">&quot;round&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o3.<span class=\"property\">size</span>);    <span class=\"comment\">// large</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o3.<span class=\"property\">shape</span>);     <span class=\"comment\">// round</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(o3));     <span class=\"comment\">// &#123;say:...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>3，实现继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Shape - superclass</span></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">Shape</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Shape</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">move</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> += x;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> += y;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&quot;Shape moved.&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Rectangle - subclass</span></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">Rectangle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Shape</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">//call super constructor.继承属性</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Rectangle</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Shape</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);<span class=\"comment\">//继承方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rect <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Rectangle</span>); <span class=\"comment\">//true.</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rect <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Shape</span>); <span class=\"comment\">//true.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        rect.<span class=\"title function_\">move</span>(); <span class=\"comment\">//&quot;Shape moved.&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//new object（）没有父类 使用其构造方法和属性</span></span><br><span class=\"line\">        <span class=\"comment\">//Object.create（）指向原型 （父子关系）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call-apply-bind\"><a href=\"#call-apply-bind\" class=\"headerlink\" title=\"call apply bind\"></a>call apply bind</h2><p>1，将参数传递给apple</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana = &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;yellow&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apple.<span class=\"property\">say</span>.<span class=\"title function_\">call</span>(banana);     <span class=\"comment\">//My color is yellow</span></span><br><span class=\"line\">apple.<span class=\"property\">say</span>.<span class=\"title function_\">apply</span>(banana);    <span class=\"comment\">//My color is yellow</span></span><br></pre></td></tr></table></figure>\n\n<p>2，</p>\n<blockquote>\n<p>某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时用 call 。<br>不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来遍历所有的参数。<br>如果第一个参数为null，函数体内的this指向宿主对象，在浏览器中是window</p>\n</blockquote>\n<p>结构 fn.prototype.apply(this,arguments)<br><em>arguments是this中的参数 再传入fn中。fn.prototype.apply(this—&gt;argument)</em><br>3，<strong>bind</strong><br><strong>bind()方法会创建一个新函数</strong>，称为<strong>绑定函数</strong>，当调用这个绑定函数时，绑定函数会以创建它时传入 <strong>bind()方法的第一个参数作为 this</strong>，<strong>传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</strong><br><em>多次 bind() 是无效的。</em></p>\n<blockquote>\n<p>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；<br>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；<br>apply 、 call 、bind 三者都可以利用后续参数传参；<br>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"closure-object-create\"><a href=\"#closure-object-create\" class=\"headerlink\" title=\"closure &amp;&amp; object.create\"></a>closure &amp;&amp; object.create</h1><h3 id=\"闭包就是能够读取其他函数内部变量的函数\"><a href=\"#闭包就是能够读取其他函数内部变量的函数\" class=\"headerlink\" title=\"闭包就是能够读取其他函数内部变量的函数\"></a>闭包就是能够读取其他函数内部变量的函数</h3><p><strong>f2可以使用f1中的参数当f1的返回值为f2时 外部函数可以调用内部的参数这就形成了一个闭包。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"title function_\">f2</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　<span class=\"title function_\">alert</span>(n); </span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> result=<span class=\"title function_\">f1</span>();</span><br><span class=\"line\">　　<span class=\"title function_\">result</span>(); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包的用处\"><a href=\"#闭包的用处\" class=\"headerlink\" title=\"闭包的用处\"></a>闭包的用处</h3><blockquote>\n<p>可以读取函数内部的变量，<br>让这些变量的值始终保持在内存中。(通常情况下应用完销毁)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">        add = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;n+=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">         <span class=\"keyword\">function</span> <span class=\"title function_\">f3</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f2 = <span class=\"title function_\">f1</span>();</span><br><span class=\"line\">    <span class=\"title function_\">f2</span>();  <span class=\"comment\">// 5</span></span><br><span class=\"line\">    <span class=\"title function_\">add</span>(); <span class=\"comment\">// +1</span></span><br><span class=\"line\">    <span class=\"title function_\">f2</span>(); <span class=\"comment\">// 6 内存中的n没有被销毁</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h3><blockquote>\n<p>由于闭包会使得函数中的<strong>变量都被保存在内存中</strong>，<strong>内存消耗很大</strong>，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，<strong>在退出函数之前，将不使用的局部变量全部删除</strong>。<br><em>(不清除内存)</em><br>闭包会在父函数外部，<strong>改变父函数内部变量的值</strong>。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">　　　　name : <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">　　　　getNameFunc : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">　　　　　　&#125;;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　<span class=\"title function_\">alert</span>(object.<span class=\"title function_\">getNameFunc</span>()());</span><br><span class=\"line\">　　————————————————</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">　　　　name : <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">　　　　getNameFunc : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　<span class=\"keyword\">var</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> that.<span class=\"property\">name</span>;</span><br><span class=\"line\">　　　　　　&#125;;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　<span class=\"title function_\">alert</span>(object.<span class=\"title function_\">getNameFunc</span>()());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"object-create\"><a href=\"#object-create\" class=\"headerlink\" title=\"object.create\"></a>object.create</h2><p>1，定值为null 创建不带原型对象<br>2，创建带属性带原型的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pt = &#123;</span><br><span class=\"line\">        say : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;saying!&#x27;</span>);    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o3 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(pt, &#123;</span><br><span class=\"line\">        <span class=\"attr\">size</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"string\">&quot;large&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">shape</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"string\">&quot;round&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o3.<span class=\"property\">size</span>);    <span class=\"comment\">// large</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o3.<span class=\"property\">shape</span>);     <span class=\"comment\">// round</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(o3));     <span class=\"comment\">// &#123;say:...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>3，实现继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Shape - superclass</span></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">Shape</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Shape</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">move</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> += x;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> += y;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&quot;Shape moved.&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Rectangle - subclass</span></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">Rectangle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Shape</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">//call super constructor.继承属性</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Rectangle</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Shape</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);<span class=\"comment\">//继承方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rect <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Rectangle</span>); <span class=\"comment\">//true.</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rect <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Shape</span>); <span class=\"comment\">//true.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        rect.<span class=\"title function_\">move</span>(); <span class=\"comment\">//&quot;Shape moved.&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//new object（）没有父类 使用其构造方法和属性</span></span><br><span class=\"line\">        <span class=\"comment\">//Object.create（）指向原型 （父子关系）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call-apply-bind\"><a href=\"#call-apply-bind\" class=\"headerlink\" title=\"call apply bind\"></a>call apply bind</h2><p>1，将参数传递给apple</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana = &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;yellow&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apple.<span class=\"property\">say</span>.<span class=\"title function_\">call</span>(banana);     <span class=\"comment\">//My color is yellow</span></span><br><span class=\"line\">apple.<span class=\"property\">say</span>.<span class=\"title function_\">apply</span>(banana);    <span class=\"comment\">//My color is yellow</span></span><br></pre></td></tr></table></figure>\n\n<p>2，</p>\n<blockquote>\n<p>某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时用 call 。<br>不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来遍历所有的参数。<br>如果第一个参数为null，函数体内的this指向宿主对象，在浏览器中是window</p>\n</blockquote>\n<p>结构 fn.prototype.apply(this,arguments)<br><em>arguments是this中的参数 再传入fn中。fn.prototype.apply(this—&gt;argument)</em><br>3，<strong>bind</strong><br><strong>bind()方法会创建一个新函数</strong>，称为<strong>绑定函数</strong>，当调用这个绑定函数时，绑定函数会以创建它时传入 <strong>bind()方法的第一个参数作为 this</strong>，<strong>传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</strong><br><em>多次 bind() 是无效的。</em></p>\n<blockquote>\n<p>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；<br>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；<br>apply 、 call 、bind 三者都可以利用后续参数传参；<br>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</p>\n</blockquote>\n"},{"title":"callbag二三事","date":"2020-02-04T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/react.png","_content":"\n# callbag 源码分析\n\n> Your focus determines your reality.\n\ncallbag组合了一些基础的***设计模式***，例如观察者模式和迭代器模式等，通过这些设计模式来达到管理序列任务的目的。\n\n## 观察者模式\n\n```typescript\n\tinterface Publisher {\n    subscribe(suberscriber Suberscriber): void;\n    unSubscribe(suberscriber Suberscriber): void;\n    notify(): void;\n  }\n\n  interface Suberscriber {\n    update(data: any): void\n  }\n\n  class concretePublisher implement Publisher {\n    private subscribers: Suberscriber[] = []；\n    \n    subscribe(suberscriber Suberscriber): void {\n      !this.suberscribers.includes(suberscriber) && this.subscribers.push(suberscriber)\n    };\n\n  \tunSubscribe(suberscriber Suberscriber): void {\n    \tthis.suberscribers.includes(suberscriber) && this.subscribers.splice(suberscriber, 1)\n  \t};\n\n  \tnotify(): void {\n    \tthis.suberscribers.forEach(f => f.update())\n    };\n  }\n\nclass concreteSuberscriber implement  Subscriber {\n  update(...data){\n    console.log(data)\n  }\n}\n```\n\n> 优点 \n>\n> - *开闭原则*。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。\n> - 可以在运行时建立对象之间的联系\n>\n> 缺点\n>\n> - 时序随机\n>\n> \n\n## 迭代器模式\n\n```typescript\ninterface Iterator {\n  isDone(): boolean\n  next(): {value: any, done: boolean}\n}\n\nclass Iterator implement Iterator{\n  private index = 0;\n  constructor(private value: any[]) {\n    this.value = value;\n  }\n  isDone() {\n    return this.index >= this.value.length \n  }\n  next() {\n    if (!this.isDone()) {\n      this.index++\n      return {\n        value: this.value[this.index],\n        done: false\n      }\n    }\n    return \n        value: this.value[this.index],\n        done: true\n      }\n  }\n}\n```\n\n### 推拉模型\n\n推（pushable）： 即**Publisher是主动方**，而**Subscriber是被动方**，subscriber并不知道什么时候什么时间接收数据。\n\n拉（pullable）： 需要由Sub儿scriber决定publisher不知道何时接受数据。\n\n##  基本原理\n\n### sink\n\n```typescript\n// sink 接受两个params, type 和 payload\n\n// type的三种类型：\n// 0 开始\n// 1 数据传输阶段\n// 2 结束\n\npayload，可以传递 具体 data 或者 sink\n\ntype sink = (type: type, payload: any})： void\nenum type {\n  start = 0,\n  data,\n  end\n}\n```\n\n\n\n***sink 建立连接前，必须先与进行一次 type 为  0  handleshake， 类似tcp握手然后 （type = 1）开始传递相应的payload,当任意一边传递了2（结束信号）则结束。***\n\n### TODO: myCallbag 简单实现\n\n\n\n\n\n\n\n","source":"_posts/callbag.md","raw":"---\ntitle: callbag二三事\ndate: 2020/02/05\ncover: https://technologybook.tech/assets/img/react.png\ncategories:\n- source\ntags:\n- callbag\n\n---\n\n# callbag 源码分析\n\n> Your focus determines your reality.\n\ncallbag组合了一些基础的***设计模式***，例如观察者模式和迭代器模式等，通过这些设计模式来达到管理序列任务的目的。\n\n## 观察者模式\n\n```typescript\n\tinterface Publisher {\n    subscribe(suberscriber Suberscriber): void;\n    unSubscribe(suberscriber Suberscriber): void;\n    notify(): void;\n  }\n\n  interface Suberscriber {\n    update(data: any): void\n  }\n\n  class concretePublisher implement Publisher {\n    private subscribers: Suberscriber[] = []；\n    \n    subscribe(suberscriber Suberscriber): void {\n      !this.suberscribers.includes(suberscriber) && this.subscribers.push(suberscriber)\n    };\n\n  \tunSubscribe(suberscriber Suberscriber): void {\n    \tthis.suberscribers.includes(suberscriber) && this.subscribers.splice(suberscriber, 1)\n  \t};\n\n  \tnotify(): void {\n    \tthis.suberscribers.forEach(f => f.update())\n    };\n  }\n\nclass concreteSuberscriber implement  Subscriber {\n  update(...data){\n    console.log(data)\n  }\n}\n```\n\n> 优点 \n>\n> - *开闭原则*。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。\n> - 可以在运行时建立对象之间的联系\n>\n> 缺点\n>\n> - 时序随机\n>\n> \n\n## 迭代器模式\n\n```typescript\ninterface Iterator {\n  isDone(): boolean\n  next(): {value: any, done: boolean}\n}\n\nclass Iterator implement Iterator{\n  private index = 0;\n  constructor(private value: any[]) {\n    this.value = value;\n  }\n  isDone() {\n    return this.index >= this.value.length \n  }\n  next() {\n    if (!this.isDone()) {\n      this.index++\n      return {\n        value: this.value[this.index],\n        done: false\n      }\n    }\n    return \n        value: this.value[this.index],\n        done: true\n      }\n  }\n}\n```\n\n### 推拉模型\n\n推（pushable）： 即**Publisher是主动方**，而**Subscriber是被动方**，subscriber并不知道什么时候什么时间接收数据。\n\n拉（pullable）： 需要由Sub儿scriber决定publisher不知道何时接受数据。\n\n##  基本原理\n\n### sink\n\n```typescript\n// sink 接受两个params, type 和 payload\n\n// type的三种类型：\n// 0 开始\n// 1 数据传输阶段\n// 2 结束\n\npayload，可以传递 具体 data 或者 sink\n\ntype sink = (type: type, payload: any})： void\nenum type {\n  start = 0,\n  data,\n  end\n}\n```\n\n\n\n***sink 建立连接前，必须先与进行一次 type 为  0  handleshake， 类似tcp握手然后 （type = 1）开始传递相应的payload,当任意一边传递了2（结束信号）则结束。***\n\n### TODO: myCallbag 简单实现\n\n\n\n\n\n\n\n","slug":"callbag","published":1,"updated":"2024-04-10T17:46:25.877Z","_id":"cluvjqdd9000r0wpdfie7h299","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"callbag-源码分析\"><a href=\"#callbag-源码分析\" class=\"headerlink\" title=\"callbag 源码分析\"></a>callbag 源码分析</h1><blockquote>\n<p>Your focus determines your reality.</p>\n</blockquote>\n<p>callbag组合了一些基础的<em><strong>设计模式</strong></em>，例如观察者模式和迭代器模式等，通过这些设计模式来达到管理序列任务的目的。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">interface</span> <span class=\"title class_\">Publisher</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">subscribe</span>(suberscriber <span class=\"title class_\">Suberscriber</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">unSubscribe</span>(suberscriber <span class=\"title class_\">Suberscriber</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">notify</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">interface</span> <span class=\"title class_\">Suberscriber</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">update</span>(<span class=\"attr\">data</span>: <span class=\"built_in\">any</span>): <span class=\"built_in\">void</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">concretePublisher</span> implement <span class=\"title class_\">Publisher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">subscribers</span>: <span class=\"title class_\">Suberscriber</span>[] = []；</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">subscribe</span>(suberscriber <span class=\"title class_\">Suberscriber</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">      !<span class=\"variable language_\">this</span>.<span class=\"property\">suberscribers</span>.<span class=\"title function_\">includes</span>(suberscriber) &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">push</span>(suberscriber)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"title function_\">unSubscribe</span>(suberscriber <span class=\"title class_\">Suberscriber</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">this</span>.<span class=\"property\">suberscribers</span>.<span class=\"title function_\">includes</span>(suberscriber) &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">splice</span>(suberscriber, <span class=\"number\">1</span>)</span><br><span class=\"line\">  \t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"title function_\">notify</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">this</span>.<span class=\"property\">suberscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.<span class=\"title function_\">update</span>())</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">concreteSuberscriber</span> implement  <span class=\"title class_\">Subscriber</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"params\">...data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>优点 </p>\n<ul>\n<li><em>开闭原则</em>。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。</li>\n<li>可以在运行时建立对象之间的联系</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>时序随机</li>\n</ul>\n</blockquote>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">isDone</span>(): <span class=\"built_in\">boolean</span></span><br><span class=\"line\">  <span class=\"title function_\">next</span>(): &#123;<span class=\"attr\">value</span>: <span class=\"built_in\">any</span>, <span class=\"attr\">done</span>: <span class=\"built_in\">boolean</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Iterator</span> implement <span class=\"title class_\">Iterator</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> value: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">isDone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">index</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>.<span class=\"property\">length</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"title function_\">isDone</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">index</span>++</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">index</span>],</span><br><span class=\"line\">        <span class=\"attr\">done</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">index</span>],</span><br><span class=\"line\">        <span class=\"attr\">done</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推拉模型\"><a href=\"#推拉模型\" class=\"headerlink\" title=\"推拉模型\"></a>推拉模型</h3><p>推（pushable）： 即<strong>Publisher是主动方</strong>，而<strong>Subscriber是被动方</strong>，subscriber并不知道什么时候什么时间接收数据。</p>\n<p>拉（pullable）： 需要由Sub儿scriber决定publisher不知道何时接受数据。</p>\n<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><h3 id=\"sink\"><a href=\"#sink\" class=\"headerlink\" title=\"sink\"></a>sink</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sink 接受两个params, type 和 payload</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// type的三种类型：</span></span><br><span class=\"line\"><span class=\"comment\">// 0 开始</span></span><br><span class=\"line\"><span class=\"comment\">// 1 数据传输阶段</span></span><br><span class=\"line\"><span class=\"comment\">// 2 结束</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload，可以传递 具体 data 或者 sink</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> sink = (<span class=\"attr\">type</span>: <span class=\"keyword\">type</span>, <span class=\"attr\">payload</span>: <span class=\"built_in\">any</span>&#125;)： <span class=\"built_in\">void</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"keyword\">type</span> &#123;</span><br><span class=\"line\">  start = <span class=\"number\">0</span>,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  end</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><em><strong>sink 建立连接前，必须先与进行一次 type 为  0  handleshake， 类似tcp握手然后 （type &#x3D; 1）开始传递相应的payload,当任意一边传递了2（结束信号）则结束。</strong></em></p>\n<h3 id=\"TODO-myCallbag-简单实现\"><a href=\"#TODO-myCallbag-简单实现\" class=\"headerlink\" title=\"TODO: myCallbag 简单实现\"></a>TODO: myCallbag 简单实现</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"callbag-源码分析\"><a href=\"#callbag-源码分析\" class=\"headerlink\" title=\"callbag 源码分析\"></a>callbag 源码分析</h1><blockquote>\n<p>Your focus determines your reality.</p>\n</blockquote>\n<p>callbag组合了一些基础的<em><strong>设计模式</strong></em>，例如观察者模式和迭代器模式等，通过这些设计模式来达到管理序列任务的目的。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">interface</span> <span class=\"title class_\">Publisher</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">subscribe</span>(suberscriber <span class=\"title class_\">Suberscriber</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">unSubscribe</span>(suberscriber <span class=\"title class_\">Suberscriber</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">notify</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">interface</span> <span class=\"title class_\">Suberscriber</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">update</span>(<span class=\"attr\">data</span>: <span class=\"built_in\">any</span>): <span class=\"built_in\">void</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">concretePublisher</span> implement <span class=\"title class_\">Publisher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">subscribers</span>: <span class=\"title class_\">Suberscriber</span>[] = []；</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">subscribe</span>(suberscriber <span class=\"title class_\">Suberscriber</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">      !<span class=\"variable language_\">this</span>.<span class=\"property\">suberscribers</span>.<span class=\"title function_\">includes</span>(suberscriber) &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">push</span>(suberscriber)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"title function_\">unSubscribe</span>(suberscriber <span class=\"title class_\">Suberscriber</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">this</span>.<span class=\"property\">suberscribers</span>.<span class=\"title function_\">includes</span>(suberscriber) &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">splice</span>(suberscriber, <span class=\"number\">1</span>)</span><br><span class=\"line\">  \t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"title function_\">notify</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">this</span>.<span class=\"property\">suberscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.<span class=\"title function_\">update</span>())</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">concreteSuberscriber</span> implement  <span class=\"title class_\">Subscriber</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"params\">...data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>优点 </p>\n<ul>\n<li><em>开闭原则</em>。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。</li>\n<li>可以在运行时建立对象之间的联系</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>时序随机</li>\n</ul>\n</blockquote>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">isDone</span>(): <span class=\"built_in\">boolean</span></span><br><span class=\"line\">  <span class=\"title function_\">next</span>(): &#123;<span class=\"attr\">value</span>: <span class=\"built_in\">any</span>, <span class=\"attr\">done</span>: <span class=\"built_in\">boolean</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Iterator</span> implement <span class=\"title class_\">Iterator</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> value: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">isDone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">index</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>.<span class=\"property\">length</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"title function_\">isDone</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">index</span>++</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">index</span>],</span><br><span class=\"line\">        <span class=\"attr\">done</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">index</span>],</span><br><span class=\"line\">        <span class=\"attr\">done</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推拉模型\"><a href=\"#推拉模型\" class=\"headerlink\" title=\"推拉模型\"></a>推拉模型</h3><p>推（pushable）： 即<strong>Publisher是主动方</strong>，而<strong>Subscriber是被动方</strong>，subscriber并不知道什么时候什么时间接收数据。</p>\n<p>拉（pullable）： 需要由Sub儿scriber决定publisher不知道何时接受数据。</p>\n<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><h3 id=\"sink\"><a href=\"#sink\" class=\"headerlink\" title=\"sink\"></a>sink</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sink 接受两个params, type 和 payload</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// type的三种类型：</span></span><br><span class=\"line\"><span class=\"comment\">// 0 开始</span></span><br><span class=\"line\"><span class=\"comment\">// 1 数据传输阶段</span></span><br><span class=\"line\"><span class=\"comment\">// 2 结束</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload，可以传递 具体 data 或者 sink</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> sink = (<span class=\"attr\">type</span>: <span class=\"keyword\">type</span>, <span class=\"attr\">payload</span>: <span class=\"built_in\">any</span>&#125;)： <span class=\"built_in\">void</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"keyword\">type</span> &#123;</span><br><span class=\"line\">  start = <span class=\"number\">0</span>,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  end</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><em><strong>sink 建立连接前，必须先与进行一次 type 为  0  handleshake， 类似tcp握手然后 （type &#x3D; 1）开始传递相应的payload,当任意一边传递了2（结束信号）则结束。</strong></em></p>\n<h3 id=\"TODO-myCallbag-简单实现\"><a href=\"#TODO-myCallbag-简单实现\" class=\"headerlink\" title=\"TODO: myCallbag 简单实现\"></a>TODO: myCallbag 简单实现</h3>"},{"title":"Express源码解析并实现","date":"2019-06-15T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/ex2.png","_content":"\n# Express源码解析\n\n## 从http开始\n\n关于http的文章可以看之前写的  -> [这个](https://technologybook.tech/2019/05/15/httpNhttps/)\n\n## 到node http 模块\n\n一个最简单的http server是这样的\n\n```typescript\nconst http = require('http');\nhttp\n  .createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello World!');\n})\n  .listen(8080, '127.0.0.1', () => {\n  console.log(`server start`);\n});\n```\n\n\n\n1. 创建 Server instance Server extends from net\n\n![image-20210321012622791](https://technologybook.tech/assets/img/ex.png)\n\n2. 监听request事件\n\n![image-20210321012622791](https://technologybook.tech/assets/img/ex1.png)\n\n3. parse TCP 数据流\n4. http parse （解析 头部/body/是否解析完毕）\n5. 保存 IncomingMessage 和 ServerResponse 实例 通过assignSocket 发送request事件参数为 req， res\n\n\n\n## Express\n\n### 一个express的例子\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\napp.get(\"/\", (req, res) => {\n  res.end(\"Hello World!\");\n})\napp.listen(8080);\n```\n\n### express 源码架构\n\n![image-20210321012622791](https://technologybook.tech/assets/img/ex2.png)\n\nExpress 对路由的设计遵循开放封闭，单一职责的原则，由Router负责处理与路由相关的一切问题，在Layer中分层负责path与行为的描述，\n\nRoute中进行处理\n\n# 我的MiniExpress实现\n\n- [x] middleware\n- [x] Route.use\n- [x] App route\n\n等基础功能。\n\n```typescript\nimport { NextHandler, Request, Response } from \"../typings/project\";\nimport Layer from \"./Layer\";\nimport Route from \"./Route\";\nimport { isMatch } from \"../utils/checker\";\n\nexport default class Router {\n  public stack: Layer[] = [];\n  middleware: { path: string, handler: NextHandler }[] = [];\n\n\n  handle(req: Request, res: Response, handler: NextHandler) {\n    let index = 0;\n    let { pathname } = req;\n    let next = () => {\n      while (this.middleware.length) {\n        const { path, handler }\n        = this.middleware.shift() as { path: string, handler: NextHandler };\n        if (isMatch(path, pathname)) {\n          handler(req, res, next);\n        }\n      }\n      if (index >= this.stack.length) return handler(req, res, () => {\n      });\n      let layer = this.stack[index++];\n      if (layer.match(pathname)) {\n        layer.handleRequest(req, res, next);\n      } else {\n        next();\n      }\n    };\n    next();\n  }\n\n  route(path: string) {\n    // 创建处理函数\n    const route = new Route();\n    // 匹配path 分配处理函数\n    const layer = new Layer(path, route.dispatch);\n    layer.route = route;\n    this.stack.push(layer);\n    return route;\n  }\n\n  get(path: string, handler: NextHandler = () => {\n  }): void {\n    const currentRoute = this.route(path);\n    currentRoute.get(handler);\n  }\n\n  post(path: string, handler: NextHandler = () => {\n  }): void {\n    const currentRoute = this.route(path);\n    currentRoute.post(handler);\n  }\n\n  use(path: string, handler: NextHandler = () => {\n  }): void {\n    this.middleware.push({path, handler});\n  }\n}\n```\n\n\n\n```typescript\nimport { Method, Request, Response } from \"../typings/project\";\nimport Route from \"./Route\";\nimport { isMatch } from \"../utils/checker\";\n\nexport default class Layer {\n  route: Route = new Route;\n  method: Method = Method.UNKNOWN;\n\n  constructor(public path: string, public handler: Function) {\n    this.path = path;\n    this.handler = handler;\n  }\n\n  match(path: string) {\n    return isMatch(this.path, path);\n  }\n\n  handleRequest(req: Request, res: Response, next: () => void) {\n    this.handler(req, res, next);\n  }\n}\n```\n\n\n\n```typescript\nimport { Method, NextHandler, Request, Response } from \"../typings/project\";\nimport Layer from \"./Layer\";\n\nexport default class Route {\n  stack: Layer[] = [];\n\n  dispatch = (req: Request, res: Response, outNext: Function) => {\n    let index = 0;\n    const next = () => {\n      if (index >= this.stack.length) return outNext();\n      let layer = this.stack[index++];\n      if (layer.method === req.method.toUpperCase()) {\n        layer.handleRequest(req, res, next);\n      } else {\n        next();\n      }\n    };\n    next();\n  };\n\n  get(handler: NextHandler) {\n    let layer = new Layer(\"/\", handler);\n    layer.method = Method.GET;\n    this.stack.push(layer);\n  }\n\n  post(handler: NextHandler) {\n    let layer = new Layer(\"/\", handler);\n    layer.method = Method.POST;\n    this.stack.push(layer);\n  }\n}\n```\n\n```typescript\nimport { AppBase, NextHandler, Request, Response } from \"./typings/project\";\nimport * as http from \"http\";\nimport { Server } from \"net\";\nimport { requestFormatter } from \"./formatter/requestFormatter\";\nimport { responseFormatter } from \"./formatter/responseFormatter\";\nimport Router from \"./Router\";\nimport { isFunc } from \"./utils/checker\";\n\nabstract class App implements AppBase {\n  router: Router = new Router();\n\n  constructor(private protocol: any) {\n    this.protocol = protocol;\n  }\n\n  abstract get(path: string, handler: NextHandler): void;\n  abstract get(handler: NextHandler): void;\n\n  abstract post(path: string, handler: NextHandler): void;\n  abstract post(handler: NextHandler): void;\n\n  abstract use(handler: NextHandler): void;\n  abstract use(path: string, handler: NextHandler): void;\n\n  listen(...params: Parameters<Server[\"listen\"]>) {\n    const server = (this.protocol as typeof http).createServer((streamReq, streamRes) => {\n      const req: Request = requestFormatter(streamReq);\n      const res = responseFormatter(streamRes);\n      this.router.handle(req, res, (req: Request, res: Response) => {\n        res.end(`Cannot find ${req.url}`);\n      });\n    });\n    server.listen(...params);\n  }\n}\n\nexport default class Application extends App {\n  get(path: string, handler: NextHandler): void;\n  get(handler: NextHandler): void;\n  get(path: string | NextHandler, handler: NextHandler = () => {\n  }): void {\n    if (isFunc(path)) {\n      handler = path;\n      path = \"*\";\n    }\n    this.router.get(path, handler);\n  }\n\n  post(path: string, handler: NextHandler): void;\n  post(handler: NextHandler): void;\n  post(path: string | NextHandler, handler: NextHandler = () => {\n  }): void {\n    if (isFunc(path)) {\n      handler = path;\n      path = \"*\";\n    }\n    this.router.post(path, handler);\n  }\n\n  use(handler: NextHandler): void;\n  use(path: string, handler: NextHandler): void;\n  use(path: NextHandler | string, handler: NextHandler = () => {\n  }): void {\n    if (isFunc(path)) {\n      handler = path;\n      path = \"*\";\n    }\n    this.router.use(path, handler);\n  }\n}\n\nconst app = new Application(http);\napp.get(\"/\", (req: Request, res: Response, next: any) => {\n  console.log(\"I'm in 111\", 111);\n  next();\n});\n\napp.get(\"/\", (req: Request, res: Response, next) => {\n  console.log(\"I'm in 202\", 2);\n  res.end(\"Hello World\");\n});\n\napp.listen(3121, () => {\n  console.log(3121);\n});\n\n```\n\n","source":"_posts/express.md","raw":"title: Express源码解析并实现\ndate: 2019/06/16\ncover: https://technologybook.tech/assets/img/ex2.png\ncategories:\n- source\ntags:\n- express\n\n---\n\n# Express源码解析\n\n## 从http开始\n\n关于http的文章可以看之前写的  -> [这个](https://technologybook.tech/2019/05/15/httpNhttps/)\n\n## 到node http 模块\n\n一个最简单的http server是这样的\n\n```typescript\nconst http = require('http');\nhttp\n  .createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello World!');\n})\n  .listen(8080, '127.0.0.1', () => {\n  console.log(`server start`);\n});\n```\n\n\n\n1. 创建 Server instance Server extends from net\n\n![image-20210321012622791](https://technologybook.tech/assets/img/ex.png)\n\n2. 监听request事件\n\n![image-20210321012622791](https://technologybook.tech/assets/img/ex1.png)\n\n3. parse TCP 数据流\n4. http parse （解析 头部/body/是否解析完毕）\n5. 保存 IncomingMessage 和 ServerResponse 实例 通过assignSocket 发送request事件参数为 req， res\n\n\n\n## Express\n\n### 一个express的例子\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\napp.get(\"/\", (req, res) => {\n  res.end(\"Hello World!\");\n})\napp.listen(8080);\n```\n\n### express 源码架构\n\n![image-20210321012622791](https://technologybook.tech/assets/img/ex2.png)\n\nExpress 对路由的设计遵循开放封闭，单一职责的原则，由Router负责处理与路由相关的一切问题，在Layer中分层负责path与行为的描述，\n\nRoute中进行处理\n\n# 我的MiniExpress实现\n\n- [x] middleware\n- [x] Route.use\n- [x] App route\n\n等基础功能。\n\n```typescript\nimport { NextHandler, Request, Response } from \"../typings/project\";\nimport Layer from \"./Layer\";\nimport Route from \"./Route\";\nimport { isMatch } from \"../utils/checker\";\n\nexport default class Router {\n  public stack: Layer[] = [];\n  middleware: { path: string, handler: NextHandler }[] = [];\n\n\n  handle(req: Request, res: Response, handler: NextHandler) {\n    let index = 0;\n    let { pathname } = req;\n    let next = () => {\n      while (this.middleware.length) {\n        const { path, handler }\n        = this.middleware.shift() as { path: string, handler: NextHandler };\n        if (isMatch(path, pathname)) {\n          handler(req, res, next);\n        }\n      }\n      if (index >= this.stack.length) return handler(req, res, () => {\n      });\n      let layer = this.stack[index++];\n      if (layer.match(pathname)) {\n        layer.handleRequest(req, res, next);\n      } else {\n        next();\n      }\n    };\n    next();\n  }\n\n  route(path: string) {\n    // 创建处理函数\n    const route = new Route();\n    // 匹配path 分配处理函数\n    const layer = new Layer(path, route.dispatch);\n    layer.route = route;\n    this.stack.push(layer);\n    return route;\n  }\n\n  get(path: string, handler: NextHandler = () => {\n  }): void {\n    const currentRoute = this.route(path);\n    currentRoute.get(handler);\n  }\n\n  post(path: string, handler: NextHandler = () => {\n  }): void {\n    const currentRoute = this.route(path);\n    currentRoute.post(handler);\n  }\n\n  use(path: string, handler: NextHandler = () => {\n  }): void {\n    this.middleware.push({path, handler});\n  }\n}\n```\n\n\n\n```typescript\nimport { Method, Request, Response } from \"../typings/project\";\nimport Route from \"./Route\";\nimport { isMatch } from \"../utils/checker\";\n\nexport default class Layer {\n  route: Route = new Route;\n  method: Method = Method.UNKNOWN;\n\n  constructor(public path: string, public handler: Function) {\n    this.path = path;\n    this.handler = handler;\n  }\n\n  match(path: string) {\n    return isMatch(this.path, path);\n  }\n\n  handleRequest(req: Request, res: Response, next: () => void) {\n    this.handler(req, res, next);\n  }\n}\n```\n\n\n\n```typescript\nimport { Method, NextHandler, Request, Response } from \"../typings/project\";\nimport Layer from \"./Layer\";\n\nexport default class Route {\n  stack: Layer[] = [];\n\n  dispatch = (req: Request, res: Response, outNext: Function) => {\n    let index = 0;\n    const next = () => {\n      if (index >= this.stack.length) return outNext();\n      let layer = this.stack[index++];\n      if (layer.method === req.method.toUpperCase()) {\n        layer.handleRequest(req, res, next);\n      } else {\n        next();\n      }\n    };\n    next();\n  };\n\n  get(handler: NextHandler) {\n    let layer = new Layer(\"/\", handler);\n    layer.method = Method.GET;\n    this.stack.push(layer);\n  }\n\n  post(handler: NextHandler) {\n    let layer = new Layer(\"/\", handler);\n    layer.method = Method.POST;\n    this.stack.push(layer);\n  }\n}\n```\n\n```typescript\nimport { AppBase, NextHandler, Request, Response } from \"./typings/project\";\nimport * as http from \"http\";\nimport { Server } from \"net\";\nimport { requestFormatter } from \"./formatter/requestFormatter\";\nimport { responseFormatter } from \"./formatter/responseFormatter\";\nimport Router from \"./Router\";\nimport { isFunc } from \"./utils/checker\";\n\nabstract class App implements AppBase {\n  router: Router = new Router();\n\n  constructor(private protocol: any) {\n    this.protocol = protocol;\n  }\n\n  abstract get(path: string, handler: NextHandler): void;\n  abstract get(handler: NextHandler): void;\n\n  abstract post(path: string, handler: NextHandler): void;\n  abstract post(handler: NextHandler): void;\n\n  abstract use(handler: NextHandler): void;\n  abstract use(path: string, handler: NextHandler): void;\n\n  listen(...params: Parameters<Server[\"listen\"]>) {\n    const server = (this.protocol as typeof http).createServer((streamReq, streamRes) => {\n      const req: Request = requestFormatter(streamReq);\n      const res = responseFormatter(streamRes);\n      this.router.handle(req, res, (req: Request, res: Response) => {\n        res.end(`Cannot find ${req.url}`);\n      });\n    });\n    server.listen(...params);\n  }\n}\n\nexport default class Application extends App {\n  get(path: string, handler: NextHandler): void;\n  get(handler: NextHandler): void;\n  get(path: string | NextHandler, handler: NextHandler = () => {\n  }): void {\n    if (isFunc(path)) {\n      handler = path;\n      path = \"*\";\n    }\n    this.router.get(path, handler);\n  }\n\n  post(path: string, handler: NextHandler): void;\n  post(handler: NextHandler): void;\n  post(path: string | NextHandler, handler: NextHandler = () => {\n  }): void {\n    if (isFunc(path)) {\n      handler = path;\n      path = \"*\";\n    }\n    this.router.post(path, handler);\n  }\n\n  use(handler: NextHandler): void;\n  use(path: string, handler: NextHandler): void;\n  use(path: NextHandler | string, handler: NextHandler = () => {\n  }): void {\n    if (isFunc(path)) {\n      handler = path;\n      path = \"*\";\n    }\n    this.router.use(path, handler);\n  }\n}\n\nconst app = new Application(http);\napp.get(\"/\", (req: Request, res: Response, next: any) => {\n  console.log(\"I'm in 111\", 111);\n  next();\n});\n\napp.get(\"/\", (req: Request, res: Response, next) => {\n  console.log(\"I'm in 202\", 2);\n  res.end(\"Hello World\");\n});\n\napp.listen(3121, () => {\n  console.log(3121);\n});\n\n```\n\n","slug":"express","published":1,"updated":"2024-04-10T17:46:25.877Z","_id":"cluvjqdda000s0wpd4qu759jo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Express源码解析\"><a href=\"#Express源码解析\" class=\"headerlink\" title=\"Express源码解析\"></a>Express源码解析</h1><h2 id=\"从http开始\"><a href=\"#从http开始\" class=\"headerlink\" title=\"从http开始\"></a>从http开始</h2><p>关于http的文章可以看之前写的  -&gt; <a href=\"https://technologybook.tech/2019/05/15/httpNhttps/\">这个</a></p>\n<h2 id=\"到node-http-模块\"><a href=\"#到node-http-模块\" class=\"headerlink\" title=\"到node http 模块\"></a>到node http 模块</h2><p>一个最简单的http server是这样的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\">http</span><br><span class=\"line\">  .<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;Hello World!&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>, <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`server start`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>创建 Server instance Server extends from net</li>\n</ol>\n<p><img src=\"https://technologybook.tech/assets/img/ex.png\" alt=\"image-20210321012622791\"></p>\n<ol start=\"2\">\n<li>监听request事件</li>\n</ol>\n<p><img src=\"https://technologybook.tech/assets/img/ex1.png\" alt=\"image-20210321012622791\"></p>\n<ol start=\"3\">\n<li>parse TCP 数据流</li>\n<li>http parse （解析 头部&#x2F;body&#x2F;是否解析完毕）</li>\n<li>保存 IncomingMessage 和 ServerResponse 实例 通过assignSocket 发送request事件参数为 req， res</li>\n</ol>\n<h2 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h2><h3 id=\"一个express的例子\"><a href=\"#一个express的例子\" class=\"headerlink\" title=\"一个express的例子\"></a>一个express的例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"express-源码架构\"><a href=\"#express-源码架构\" class=\"headerlink\" title=\"express 源码架构\"></a>express 源码架构</h3><p><img src=\"https://technologybook.tech/assets/img/ex2.png\" alt=\"image-20210321012622791\"></p>\n<p>Express 对路由的设计遵循开放封闭，单一职责的原则，由Router负责处理与路由相关的一切问题，在Layer中分层负责path与行为的描述，</p>\n<p>Route中进行处理</p>\n<h1 id=\"我的MiniExpress实现\"><a href=\"#我的MiniExpress实现\" class=\"headerlink\" title=\"我的MiniExpress实现\"></a>我的MiniExpress实现</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> middleware</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Route.use</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> App route</li>\n</ul>\n<p>等基础功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NextHandler</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../typings/project&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Layer</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Layer&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Route</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Route&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isMatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../utils/checker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Router</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">stack</span>: <span class=\"title class_\">Layer</span>[] = [];</span><br><span class=\"line\">  <span class=\"attr\">middleware</span>: &#123; <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> &#125;[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">handle</span>(<span class=\"params\">req: Request, res: Response, handler: NextHandler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; pathname &#125; = req;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">next</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; path, handler &#125;</span><br><span class=\"line\">        = <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"title function_\">shift</span>() <span class=\"keyword\">as</span> &#123; <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isMatch</span>(path, pathname)) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handler</span>(req, res, next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">handler</span>(req, res, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> layer = <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>[index++];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (layer.<span class=\"title function_\">match</span>(pathname)) &#123;</span><br><span class=\"line\">        layer.<span class=\"title function_\">handleRequest</span>(req, res, next);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">route</span>(<span class=\"params\">path: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建处理函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = <span class=\"keyword\">new</span> <span class=\"title class_\">Route</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 匹配path 分配处理函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> layer = <span class=\"keyword\">new</span> <span class=\"title class_\">Layer</span>(path, route.<span class=\"property\">dispatch</span>);</span><br><span class=\"line\">    layer.<span class=\"property\">route</span> = route;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(layer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> route;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentRoute = <span class=\"variable language_\">this</span>.<span class=\"title function_\">route</span>(path);</span><br><span class=\"line\">    currentRoute.<span class=\"title function_\">get</span>(handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentRoute = <span class=\"variable language_\">this</span>.<span class=\"title function_\">route</span>(path);</span><br><span class=\"line\">    currentRoute.<span class=\"title function_\">post</span>(handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(&#123;path, handler&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Method</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../typings/project&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Route</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Route&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isMatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../utils/checker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Layer</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">route</span>: <span class=\"title class_\">Route</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Route</span>;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"title class_\">Method</span> = <span class=\"title class_\">Method</span>.<span class=\"property\">UNKNOWN</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> path: <span class=\"built_in\">string</span>, <span class=\"keyword\">public</span> handler: <span class=\"built_in\">Function</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">path</span> = path;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handler</span> = handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">match</span>(<span class=\"params\">path: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">isMatch</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">path</span>, path);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">handleRequest</span>(<span class=\"params\">req: Request, res: Response, next: () =&gt; <span class=\"built_in\">void</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">handler</span>(req, res, next);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Method</span>, <span class=\"title class_\">NextHandler</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../typings/project&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Layer</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Layer&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Route</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">stack</span>: <span class=\"title class_\">Layer</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  dispatch = <span class=\"function\">(<span class=\"params\">req: Request, res: Response, outNext: <span class=\"built_in\">Function</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">next</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">outNext</span>();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> layer = <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>[index++];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (layer.<span class=\"property\">method</span> === req.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>()) &#123;</span><br><span class=\"line\">        layer.<span class=\"title function_\">handleRequest</span>(req, res, next);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">handler: NextHandler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> layer = <span class=\"keyword\">new</span> <span class=\"title class_\">Layer</span>(<span class=\"string\">&quot;/&quot;</span>, handler);</span><br><span class=\"line\">    layer.<span class=\"property\">method</span> = <span class=\"title class_\">Method</span>.<span class=\"property\">GET</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(layer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"params\">handler: NextHandler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> layer = <span class=\"keyword\">new</span> <span class=\"title class_\">Layer</span>(<span class=\"string\">&quot;/&quot;</span>, handler);</span><br><span class=\"line\">    layer.<span class=\"property\">method</span> = <span class=\"title class_\">Method</span>.<span class=\"property\">POST</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(layer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppBase</span>, <span class=\"title class_\">NextHandler</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./typings/project&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> http <span class=\"keyword\">from</span> <span class=\"string\">&quot;http&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Server</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;net&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; requestFormatter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./formatter/requestFormatter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; responseFormatter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./formatter/responseFormatter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Router</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isFunc &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./utils/checker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AppBase</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">router</span>: <span class=\"title class_\">Router</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> protocol: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">protocol</span> = protocol;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">get</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">get</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">post</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">post</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">use</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">use</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">listen</span>(<span class=\"params\">...params: Parameters&lt;Server[<span class=\"string\">&quot;listen&quot;</span>]&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> server = (<span class=\"variable language_\">this</span>.<span class=\"property\">protocol</span> <span class=\"keyword\">as</span> <span class=\"keyword\">typeof</span> http).<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">streamReq, streamRes</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">req</span>: <span class=\"title class_\">Request</span> = <span class=\"title function_\">requestFormatter</span>(streamReq);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> res = <span class=\"title function_\">responseFormatter</span>(streamRes);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">handle</span>(req, res, <span class=\"function\">(<span class=\"params\">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>(<span class=\"string\">`Cannot find <span class=\"subst\">$&#123;req.url&#125;</span>`</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    server.<span class=\"title function_\">listen</span>(...params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">App</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span> | <span class=\"title class_\">NextHandler</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunc</span>(path)) &#123;</span><br><span class=\"line\">      handler = path;</span><br><span class=\"line\">      path = <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">get</span>(path, handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span> | <span class=\"title class_\">NextHandler</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunc</span>(path)) &#123;</span><br><span class=\"line\">      handler = path;</span><br><span class=\"line\">      path = <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">post</span>(path, handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"attr\">path</span>: <span class=\"title class_\">NextHandler</span> | <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunc</span>(path)) &#123;</span><br><span class=\"line\">      handler = path;</span><br><span class=\"line\">      path = <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">use</span>(path, handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Application</span>(http);</span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\">(<span class=\"params\">req: Request, res: Response, next: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in 111&quot;</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\">  <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\">(<span class=\"params\">req: Request, res: Response, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in 202&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3121</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3121</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Express源码解析\"><a href=\"#Express源码解析\" class=\"headerlink\" title=\"Express源码解析\"></a>Express源码解析</h1><h2 id=\"从http开始\"><a href=\"#从http开始\" class=\"headerlink\" title=\"从http开始\"></a>从http开始</h2><p>关于http的文章可以看之前写的  -&gt; <a href=\"https://technologybook.tech/2019/05/15/httpNhttps/\">这个</a></p>\n<h2 id=\"到node-http-模块\"><a href=\"#到node-http-模块\" class=\"headerlink\" title=\"到node http 模块\"></a>到node http 模块</h2><p>一个最简单的http server是这样的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\">http</span><br><span class=\"line\">  .<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;Hello World!&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>, <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`server start`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>创建 Server instance Server extends from net</li>\n</ol>\n<p><img src=\"https://technologybook.tech/assets/img/ex.png\" alt=\"image-20210321012622791\"></p>\n<ol start=\"2\">\n<li>监听request事件</li>\n</ol>\n<p><img src=\"https://technologybook.tech/assets/img/ex1.png\" alt=\"image-20210321012622791\"></p>\n<ol start=\"3\">\n<li>parse TCP 数据流</li>\n<li>http parse （解析 头部&#x2F;body&#x2F;是否解析完毕）</li>\n<li>保存 IncomingMessage 和 ServerResponse 实例 通过assignSocket 发送request事件参数为 req， res</li>\n</ol>\n<h2 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h2><h3 id=\"一个express的例子\"><a href=\"#一个express的例子\" class=\"headerlink\" title=\"一个express的例子\"></a>一个express的例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"express-源码架构\"><a href=\"#express-源码架构\" class=\"headerlink\" title=\"express 源码架构\"></a>express 源码架构</h3><p><img src=\"https://technologybook.tech/assets/img/ex2.png\" alt=\"image-20210321012622791\"></p>\n<p>Express 对路由的设计遵循开放封闭，单一职责的原则，由Router负责处理与路由相关的一切问题，在Layer中分层负责path与行为的描述，</p>\n<p>Route中进行处理</p>\n<h1 id=\"我的MiniExpress实现\"><a href=\"#我的MiniExpress实现\" class=\"headerlink\" title=\"我的MiniExpress实现\"></a>我的MiniExpress实现</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> middleware</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Route.use</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> App route</li>\n</ul>\n<p>等基础功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NextHandler</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../typings/project&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Layer</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Layer&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Route</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Route&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isMatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../utils/checker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Router</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">stack</span>: <span class=\"title class_\">Layer</span>[] = [];</span><br><span class=\"line\">  <span class=\"attr\">middleware</span>: &#123; <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> &#125;[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">handle</span>(<span class=\"params\">req: Request, res: Response, handler: NextHandler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; pathname &#125; = req;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">next</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; path, handler &#125;</span><br><span class=\"line\">        = <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"title function_\">shift</span>() <span class=\"keyword\">as</span> &#123; <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isMatch</span>(path, pathname)) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handler</span>(req, res, next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">handler</span>(req, res, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> layer = <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>[index++];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (layer.<span class=\"title function_\">match</span>(pathname)) &#123;</span><br><span class=\"line\">        layer.<span class=\"title function_\">handleRequest</span>(req, res, next);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">route</span>(<span class=\"params\">path: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建处理函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = <span class=\"keyword\">new</span> <span class=\"title class_\">Route</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 匹配path 分配处理函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> layer = <span class=\"keyword\">new</span> <span class=\"title class_\">Layer</span>(path, route.<span class=\"property\">dispatch</span>);</span><br><span class=\"line\">    layer.<span class=\"property\">route</span> = route;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(layer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> route;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentRoute = <span class=\"variable language_\">this</span>.<span class=\"title function_\">route</span>(path);</span><br><span class=\"line\">    currentRoute.<span class=\"title function_\">get</span>(handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentRoute = <span class=\"variable language_\">this</span>.<span class=\"title function_\">route</span>(path);</span><br><span class=\"line\">    currentRoute.<span class=\"title function_\">post</span>(handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(&#123;path, handler&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Method</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../typings/project&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Route</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Route&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isMatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../utils/checker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Layer</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">route</span>: <span class=\"title class_\">Route</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Route</span>;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"title class_\">Method</span> = <span class=\"title class_\">Method</span>.<span class=\"property\">UNKNOWN</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> path: <span class=\"built_in\">string</span>, <span class=\"keyword\">public</span> handler: <span class=\"built_in\">Function</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">path</span> = path;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handler</span> = handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">match</span>(<span class=\"params\">path: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">isMatch</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">path</span>, path);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">handleRequest</span>(<span class=\"params\">req: Request, res: Response, next: () =&gt; <span class=\"built_in\">void</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">handler</span>(req, res, next);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Method</span>, <span class=\"title class_\">NextHandler</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../typings/project&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Layer</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Layer&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Route</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">stack</span>: <span class=\"title class_\">Layer</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  dispatch = <span class=\"function\">(<span class=\"params\">req: Request, res: Response, outNext: <span class=\"built_in\">Function</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">next</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">outNext</span>();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> layer = <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>[index++];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (layer.<span class=\"property\">method</span> === req.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>()) &#123;</span><br><span class=\"line\">        layer.<span class=\"title function_\">handleRequest</span>(req, res, next);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">handler: NextHandler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> layer = <span class=\"keyword\">new</span> <span class=\"title class_\">Layer</span>(<span class=\"string\">&quot;/&quot;</span>, handler);</span><br><span class=\"line\">    layer.<span class=\"property\">method</span> = <span class=\"title class_\">Method</span>.<span class=\"property\">GET</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(layer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"params\">handler: NextHandler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> layer = <span class=\"keyword\">new</span> <span class=\"title class_\">Layer</span>(<span class=\"string\">&quot;/&quot;</span>, handler);</span><br><span class=\"line\">    layer.<span class=\"property\">method</span> = <span class=\"title class_\">Method</span>.<span class=\"property\">POST</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(layer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppBase</span>, <span class=\"title class_\">NextHandler</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./typings/project&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> http <span class=\"keyword\">from</span> <span class=\"string\">&quot;http&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Server</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;net&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; requestFormatter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./formatter/requestFormatter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; responseFormatter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./formatter/responseFormatter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Router</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isFunc &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./utils/checker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AppBase</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">router</span>: <span class=\"title class_\">Router</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> protocol: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">protocol</span> = protocol;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">get</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">get</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">post</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">post</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">use</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">use</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">listen</span>(<span class=\"params\">...params: Parameters&lt;Server[<span class=\"string\">&quot;listen&quot;</span>]&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> server = (<span class=\"variable language_\">this</span>.<span class=\"property\">protocol</span> <span class=\"keyword\">as</span> <span class=\"keyword\">typeof</span> http).<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">streamReq, streamRes</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">req</span>: <span class=\"title class_\">Request</span> = <span class=\"title function_\">requestFormatter</span>(streamReq);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> res = <span class=\"title function_\">responseFormatter</span>(streamRes);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">handle</span>(req, res, <span class=\"function\">(<span class=\"params\">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>(<span class=\"string\">`Cannot find <span class=\"subst\">$&#123;req.url&#125;</span>`</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    server.<span class=\"title function_\">listen</span>(...params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">App</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span> | <span class=\"title class_\">NextHandler</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunc</span>(path)) &#123;</span><br><span class=\"line\">      handler = path;</span><br><span class=\"line\">      path = <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">get</span>(path, handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">post</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span> | <span class=\"title class_\">NextHandler</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunc</span>(path)) &#123;</span><br><span class=\"line\">      handler = path;</span><br><span class=\"line\">      path = <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">post</span>(path, handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"attr\">path</span>: <span class=\"title class_\">NextHandler</span> | <span class=\"built_in\">string</span>, <span class=\"attr\">handler</span>: <span class=\"title class_\">NextHandler</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunc</span>(path)) &#123;</span><br><span class=\"line\">      handler = path;</span><br><span class=\"line\">      path = <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">use</span>(path, handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Application</span>(http);</span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\">(<span class=\"params\">req: Request, res: Response, next: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in 111&quot;</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\">  <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\">(<span class=\"params\">req: Request, res: Response, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in 202&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3121</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3121</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"装饰器的使用","date":"2017-11-14T16:00:00.000Z","cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","_content":"# 装饰器之助力开发\n\n## 装饰器简介\n\n+ Es7的装饰器是Object.defineProperty(obj, name, descriptor)的一个语法糖。\n+ 装饰器提供定义劫持，能够对类及其方法、方法入参、属性的定义并没有提供任何附加元数据的功能。\n+ 配合Reflect给了我们在类及其属性、方法、入参上存储读取数据的能力\n\n> Decorators make it possible to annotate and modify classes and properties at design time.\n>\n> 官方给这个提案的评价是可以对类和类的属性进行注解和修改，这也是这一语法糖的价值所在\n\n\n\n```javascript\nfunction log(target, key, descriptor) {\n    console.log(target);\n    console.log(target.hasOwnProperty('constructor'));\n    console.log(target.constructor);\n    console.log(key);\n    console.log(descriptor);\n}\n\nclass Bar {\n    @log;\n    bar() {}\n}\n\n// {}\n// true\n// function Bar() { ...\n// bar\n// {\"enumerable\":false,\"configurable\":true,\"writable\":true}\n\n```\n\n关于方法装饰器的总结\n\n+ target  -> className.prototType\n+ Key -> method name\n+ Descriptor  -> defineProperty\n+ class decorate 情况下 target -> class \n\ndefineProperty的基本内容如下：\n\n- `configurable`控制是不是能删、能修改`descriptor`本身。\n- `writable`控制是不是能修改值。\n- `enumerable`控制是不是能枚举出属性。\n- `value`控制对应的值，方法只是一个`value`是函数的属性。\n- `get`和`set`控制访问咕噜的读和写逻辑。\n\n### 利用这些简单的特性我们可以实现一个简单的单例\n\n```javascript\nfunction singleton (target) {\n    return class Singleton extends target {\n        constructor() {\n          \n        }\n     static singleton = null；\n\n    static getInstance(){\n             if(singleton == null) {                        \n                 singleton = new Singleton ();  \n             }\n             return singleton ；\n\n     }\n    }\n}\n\n@singleton\nclass DoA {\n    // ....\n    runSql(){}\n}\n\nDoA.getInstance().runSql();\n\n@singleton\nclass DoB {\n    // ....\n    runSql(){}\n}\n\nDoB.getInstance().runSql();\n```\n\n\n\n\n\n### 与spring的annotation比较\n\n在Java中有一种提供元信息的方式，叫做注解，如果用spring写一个route：\n\n```java\n@RestController\n@SpringBootApplication\npublic class BookApplication {\n\n  @RequestMapping(value = \"/available\")\n  public String available() {\n    return \"Spring in Action\";\n  }\n\n  @RequestMapping(value = \"/checked-out\")\n  public String checkedOut() {\n    return \"Spring Boot in Action\";\n  }\n\n  public static void main(String[] args) {\n    SpringApplication.run(BookApplication.class, args);\n  }\n}\n```\n\n\n\n这种命令式的模式非常的直观，最后，用装饰器的方式实现一个基于express的route。\n\n```javascript\n// collectRoute.js\n// 用容器存储Route的信息\nconst routerList = [];\nconst logger = require('../log/logger');\n\n\nfunction Route(params) {\n  return function (target) {\n    try {\n      const methodObj = target.prototype;\n      if(routerList.filter(v => v.prefix === params) !== []) {\n        routerList.push(Object.assign({ prefix: params }, methodObj));\n      } else throw new Error('the same route name is not allow');\n    } catch (e) {\n      logger.error(e);\n    }\n  };\n}\n\nmodule.exports = {\n  Route,\n  routerList,\n};\n\n\n// httpMethod.js\n// 用method 装饰器存储http method 的描述信息\nconst logger = require('../log/logger');\n\nconst method = ['GET', 'POST', 'PUT', 'DELETE'];\nlet methodList = [];\nconst totalMethod = {};\nmethod.forEach((v) => {\n  totalMethod[v] = function (params) {\n    methodList = [];\n    return function (target, name, descriptor) {\n      try {\n        const old = descriptor.value;\n        methodList.push({ method: v.toLowerCase(), path: params, handle: old });\n        target.methodList = methodList;\n        descriptor.value = function () {\n          return old(...arguments);\n        };\n        return descriptor;\n      } catch (e) {\n        logger.error(e);\n      }\n    };\n  };\n});\n\nmodule.exports = totalMethod;\n\n// server.js\n// 结合express遍历记录的信息\nrouterList.forEach((routerItem) => {\n  const router = require('express').Router();\n  const { methodList } = routerItem;\n\n  methodList.forEach((methodDescription) => {\n    const { method, path, handle } = methodDescription;\n    router[method](path, (req, res) => {\n      handle(req, res);\n    });\n  });\n\n  app.use(routerItem.prefix, router);\n});\n\n//Controller/User.js\n\n// 实现命令式的Http method\nconst { Route } = require('../core/collection-router');\nconst { GET, PUT } = require('../core/http-method');\n\n@Route('/user')\nclass User {\n  @GET('/:id')\n  findWordBy(req, res) {\n    const { params } = req;\n    res.send(params.id);\n  }\n\n  @PUT('/:id')\n  updateWordBy(req, res) {\n    const { params } = req;\n    res.send(params.id);\n  }\n}\n\nmodule.exports = {\n  UserRouter: User\n};\n\n```\n\n","source":"_posts/decorate.md","raw":"---\ntitle: 装饰器的使用\ndate: 2017/11/15\ncover: https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png\ncategories:\n- Ecmascript\ntags: \n- decorate\n---\n# 装饰器之助力开发\n\n## 装饰器简介\n\n+ Es7的装饰器是Object.defineProperty(obj, name, descriptor)的一个语法糖。\n+ 装饰器提供定义劫持，能够对类及其方法、方法入参、属性的定义并没有提供任何附加元数据的功能。\n+ 配合Reflect给了我们在类及其属性、方法、入参上存储读取数据的能力\n\n> Decorators make it possible to annotate and modify classes and properties at design time.\n>\n> 官方给这个提案的评价是可以对类和类的属性进行注解和修改，这也是这一语法糖的价值所在\n\n\n\n```javascript\nfunction log(target, key, descriptor) {\n    console.log(target);\n    console.log(target.hasOwnProperty('constructor'));\n    console.log(target.constructor);\n    console.log(key);\n    console.log(descriptor);\n}\n\nclass Bar {\n    @log;\n    bar() {}\n}\n\n// {}\n// true\n// function Bar() { ...\n// bar\n// {\"enumerable\":false,\"configurable\":true,\"writable\":true}\n\n```\n\n关于方法装饰器的总结\n\n+ target  -> className.prototType\n+ Key -> method name\n+ Descriptor  -> defineProperty\n+ class decorate 情况下 target -> class \n\ndefineProperty的基本内容如下：\n\n- `configurable`控制是不是能删、能修改`descriptor`本身。\n- `writable`控制是不是能修改值。\n- `enumerable`控制是不是能枚举出属性。\n- `value`控制对应的值，方法只是一个`value`是函数的属性。\n- `get`和`set`控制访问咕噜的读和写逻辑。\n\n### 利用这些简单的特性我们可以实现一个简单的单例\n\n```javascript\nfunction singleton (target) {\n    return class Singleton extends target {\n        constructor() {\n          \n        }\n     static singleton = null；\n\n    static getInstance(){\n             if(singleton == null) {                        \n                 singleton = new Singleton ();  \n             }\n             return singleton ；\n\n     }\n    }\n}\n\n@singleton\nclass DoA {\n    // ....\n    runSql(){}\n}\n\nDoA.getInstance().runSql();\n\n@singleton\nclass DoB {\n    // ....\n    runSql(){}\n}\n\nDoB.getInstance().runSql();\n```\n\n\n\n\n\n### 与spring的annotation比较\n\n在Java中有一种提供元信息的方式，叫做注解，如果用spring写一个route：\n\n```java\n@RestController\n@SpringBootApplication\npublic class BookApplication {\n\n  @RequestMapping(value = \"/available\")\n  public String available() {\n    return \"Spring in Action\";\n  }\n\n  @RequestMapping(value = \"/checked-out\")\n  public String checkedOut() {\n    return \"Spring Boot in Action\";\n  }\n\n  public static void main(String[] args) {\n    SpringApplication.run(BookApplication.class, args);\n  }\n}\n```\n\n\n\n这种命令式的模式非常的直观，最后，用装饰器的方式实现一个基于express的route。\n\n```javascript\n// collectRoute.js\n// 用容器存储Route的信息\nconst routerList = [];\nconst logger = require('../log/logger');\n\n\nfunction Route(params) {\n  return function (target) {\n    try {\n      const methodObj = target.prototype;\n      if(routerList.filter(v => v.prefix === params) !== []) {\n        routerList.push(Object.assign({ prefix: params }, methodObj));\n      } else throw new Error('the same route name is not allow');\n    } catch (e) {\n      logger.error(e);\n    }\n  };\n}\n\nmodule.exports = {\n  Route,\n  routerList,\n};\n\n\n// httpMethod.js\n// 用method 装饰器存储http method 的描述信息\nconst logger = require('../log/logger');\n\nconst method = ['GET', 'POST', 'PUT', 'DELETE'];\nlet methodList = [];\nconst totalMethod = {};\nmethod.forEach((v) => {\n  totalMethod[v] = function (params) {\n    methodList = [];\n    return function (target, name, descriptor) {\n      try {\n        const old = descriptor.value;\n        methodList.push({ method: v.toLowerCase(), path: params, handle: old });\n        target.methodList = methodList;\n        descriptor.value = function () {\n          return old(...arguments);\n        };\n        return descriptor;\n      } catch (e) {\n        logger.error(e);\n      }\n    };\n  };\n});\n\nmodule.exports = totalMethod;\n\n// server.js\n// 结合express遍历记录的信息\nrouterList.forEach((routerItem) => {\n  const router = require('express').Router();\n  const { methodList } = routerItem;\n\n  methodList.forEach((methodDescription) => {\n    const { method, path, handle } = methodDescription;\n    router[method](path, (req, res) => {\n      handle(req, res);\n    });\n  });\n\n  app.use(routerItem.prefix, router);\n});\n\n//Controller/User.js\n\n// 实现命令式的Http method\nconst { Route } = require('../core/collection-router');\nconst { GET, PUT } = require('../core/http-method');\n\n@Route('/user')\nclass User {\n  @GET('/:id')\n  findWordBy(req, res) {\n    const { params } = req;\n    res.send(params.id);\n  }\n\n  @PUT('/:id')\n  updateWordBy(req, res) {\n    const { params } = req;\n    res.send(params.id);\n  }\n}\n\nmodule.exports = {\n  UserRouter: User\n};\n\n```\n\n","slug":"decorate","published":1,"updated":"2024-04-10T17:46:25.877Z","_id":"cluvjqddb00110wpd7lm52ohj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"装饰器之助力开发\"><a href=\"#装饰器之助力开发\" class=\"headerlink\" title=\"装饰器之助力开发\"></a>装饰器之助力开发</h1><h2 id=\"装饰器简介\"><a href=\"#装饰器简介\" class=\"headerlink\" title=\"装饰器简介\"></a>装饰器简介</h2><ul>\n<li>Es7的装饰器是Object.defineProperty(obj, name, descriptor)的一个语法糖。</li>\n<li>装饰器提供定义劫持，能够对类及其方法、方法入参、属性的定义并没有提供任何附加元数据的功能。</li>\n<li>配合Reflect给了我们在类及其属性、方法、入参上存储读取数据的能力</li>\n</ul>\n<blockquote>\n<p>Decorators make it possible to annotate and modify classes and properties at design time.</p>\n<p>官方给这个提案的评价是可以对类和类的属性进行注解和修改，这也是这一语法糖的价值所在</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">target, key, descriptor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;constructor&#x27;</span>));</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target.<span class=\"property\">constructor</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(descriptor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> &#123;</span><br><span class=\"line\">    @log;</span><br><span class=\"line\">    <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// function Bar() &#123; ...</span></span><br><span class=\"line\"><span class=\"comment\">// bar</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;&quot;enumerable&quot;:false,&quot;configurable&quot;:true,&quot;writable&quot;:true&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>关于方法装饰器的总结</p>\n<ul>\n<li>target  -&gt; className.prototType</li>\n<li>Key -&gt; method name</li>\n<li>Descriptor  -&gt; defineProperty</li>\n<li>class decorate 情况下 target -&gt; class</li>\n</ul>\n<p>defineProperty的基本内容如下：</p>\n<ul>\n<li><code>configurable</code>控制是不是能删、能修改<code>descriptor</code>本身。</li>\n<li><code>writable</code>控制是不是能修改值。</li>\n<li><code>enumerable</code>控制是不是能枚举出属性。</li>\n<li><code>value</code>控制对应的值，方法只是一个<code>value</code>是函数的属性。</li>\n<li><code>get</code>和<code>set</code>控制访问咕噜的读和写逻辑。</li>\n</ul>\n<h3 id=\"利用这些简单的特性我们可以实现一个简单的单例\"><a href=\"#利用这些简单的特性我们可以实现一个简单的单例\" class=\"headerlink\" title=\"利用这些简单的特性我们可以实现一个简单的单例\"></a>利用这些简单的特性我们可以实现一个简单的单例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">singleton</span> (target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">target</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"keyword\">static</span> singleton = <span class=\"literal\">null</span>；</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">getInstance</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(singleton == <span class=\"literal\">null</span>) &#123;                        </span><br><span class=\"line\">                 singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span> ();  </span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> singleton ；</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@singleton</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoA</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"title function_\">runSql</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DoA</span>.<span class=\"title function_\">getInstance</span>().<span class=\"title function_\">runSql</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">@singleton</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoB</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"title function_\">runSql</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DoB</span>.<span class=\"title function_\">getInstance</span>().<span class=\"title function_\">runSql</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"与spring的annotation比较\"><a href=\"#与spring的annotation比较\" class=\"headerlink\" title=\"与spring的annotation比较\"></a>与spring的annotation比较</h3><p>在Java中有一种提供元信息的方式，叫做注解，如果用spring写一个route：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(value = &quot;/available&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">available</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Spring in Action&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(value = &quot;/checked-out&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">checkedOut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Spring Boot in Action&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    SpringApplication.run(BookApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这种命令式的模式非常的直观，最后，用装饰器的方式实现一个基于express的route。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// collectRoute.js</span></span><br><span class=\"line\"><span class=\"comment\">// 用容器存储Route的信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routerList = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../log/logger&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Route</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> methodObj = target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(routerList.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v.<span class=\"property\">prefix</span> === params) !== []) &#123;</span><br><span class=\"line\">        routerList.<span class=\"title function_\">push</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123; <span class=\"attr\">prefix</span>: params &#125;, methodObj));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;the same route name is not allow&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      logger.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Route</span>,</span><br><span class=\"line\">  routerList,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// httpMethod.js</span></span><br><span class=\"line\"><span class=\"comment\">// 用method 装饰器存储http method 的描述信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../log/logger&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> method = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;PUT&#x27;</span>, <span class=\"string\">&#x27;DELETE&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> methodList = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> totalMethod = &#123;&#125;;</span><br><span class=\"line\">method.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  totalMethod[v] = <span class=\"keyword\">function</span> (<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">    methodList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target, name, descriptor</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> old = descriptor.<span class=\"property\">value</span>;</span><br><span class=\"line\">        methodList.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">method</span>: v.<span class=\"title function_\">toLowerCase</span>(), <span class=\"attr\">path</span>: params, <span class=\"attr\">handle</span>: old &#125;);</span><br><span class=\"line\">        target.<span class=\"property\">methodList</span> = methodList;</span><br><span class=\"line\">        descriptor.<span class=\"property\">value</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">old</span>(...<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        logger.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = totalMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\"><span class=\"comment\">// 结合express遍历记录的信息</span></span><br><span class=\"line\">routerList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">routerItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>).<span class=\"title class_\">Router</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; methodList &#125; = routerItem;</span><br><span class=\"line\"></span><br><span class=\"line\">  methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">methodDescription</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; method, path, handle &#125; = methodDescription;</span><br><span class=\"line\">    router[method](path, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">handle</span>(req, res);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  app.<span class=\"title function_\">use</span>(routerItem.<span class=\"property\">prefix</span>, router);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Controller/User.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现命令式的Http method</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Route</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../core/collection-router&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">GET</span>, <span class=\"variable constant_\">PUT</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../core/http-method&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title class_\">Route</span>(<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  @<span class=\"title function_\">GET</span>(<span class=\"string\">&#x27;/:id&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">findWordBy</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; params &#125; = req;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(params.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title function_\">PUT</span>(<span class=\"string\">&#x27;/:id&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">updateWordBy</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; params &#125; = req;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(params.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">UserRouter</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"装饰器之助力开发\"><a href=\"#装饰器之助力开发\" class=\"headerlink\" title=\"装饰器之助力开发\"></a>装饰器之助力开发</h1><h2 id=\"装饰器简介\"><a href=\"#装饰器简介\" class=\"headerlink\" title=\"装饰器简介\"></a>装饰器简介</h2><ul>\n<li>Es7的装饰器是Object.defineProperty(obj, name, descriptor)的一个语法糖。</li>\n<li>装饰器提供定义劫持，能够对类及其方法、方法入参、属性的定义并没有提供任何附加元数据的功能。</li>\n<li>配合Reflect给了我们在类及其属性、方法、入参上存储读取数据的能力</li>\n</ul>\n<blockquote>\n<p>Decorators make it possible to annotate and modify classes and properties at design time.</p>\n<p>官方给这个提案的评价是可以对类和类的属性进行注解和修改，这也是这一语法糖的价值所在</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">target, key, descriptor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;constructor&#x27;</span>));</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target.<span class=\"property\">constructor</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(descriptor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> &#123;</span><br><span class=\"line\">    @log;</span><br><span class=\"line\">    <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// function Bar() &#123; ...</span></span><br><span class=\"line\"><span class=\"comment\">// bar</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;&quot;enumerable&quot;:false,&quot;configurable&quot;:true,&quot;writable&quot;:true&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>关于方法装饰器的总结</p>\n<ul>\n<li>target  -&gt; className.prototType</li>\n<li>Key -&gt; method name</li>\n<li>Descriptor  -&gt; defineProperty</li>\n<li>class decorate 情况下 target -&gt; class</li>\n</ul>\n<p>defineProperty的基本内容如下：</p>\n<ul>\n<li><code>configurable</code>控制是不是能删、能修改<code>descriptor</code>本身。</li>\n<li><code>writable</code>控制是不是能修改值。</li>\n<li><code>enumerable</code>控制是不是能枚举出属性。</li>\n<li><code>value</code>控制对应的值，方法只是一个<code>value</code>是函数的属性。</li>\n<li><code>get</code>和<code>set</code>控制访问咕噜的读和写逻辑。</li>\n</ul>\n<h3 id=\"利用这些简单的特性我们可以实现一个简单的单例\"><a href=\"#利用这些简单的特性我们可以实现一个简单的单例\" class=\"headerlink\" title=\"利用这些简单的特性我们可以实现一个简单的单例\"></a>利用这些简单的特性我们可以实现一个简单的单例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">singleton</span> (target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">target</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"keyword\">static</span> singleton = <span class=\"literal\">null</span>；</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">getInstance</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(singleton == <span class=\"literal\">null</span>) &#123;                        </span><br><span class=\"line\">                 singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span> ();  </span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> singleton ；</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@singleton</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoA</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"title function_\">runSql</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DoA</span>.<span class=\"title function_\">getInstance</span>().<span class=\"title function_\">runSql</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">@singleton</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoB</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"title function_\">runSql</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DoB</span>.<span class=\"title function_\">getInstance</span>().<span class=\"title function_\">runSql</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"与spring的annotation比较\"><a href=\"#与spring的annotation比较\" class=\"headerlink\" title=\"与spring的annotation比较\"></a>与spring的annotation比较</h3><p>在Java中有一种提供元信息的方式，叫做注解，如果用spring写一个route：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(value = &quot;/available&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">available</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Spring in Action&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(value = &quot;/checked-out&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">checkedOut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Spring Boot in Action&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    SpringApplication.run(BookApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这种命令式的模式非常的直观，最后，用装饰器的方式实现一个基于express的route。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// collectRoute.js</span></span><br><span class=\"line\"><span class=\"comment\">// 用容器存储Route的信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routerList = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../log/logger&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Route</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> methodObj = target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(routerList.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v.<span class=\"property\">prefix</span> === params) !== []) &#123;</span><br><span class=\"line\">        routerList.<span class=\"title function_\">push</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123; <span class=\"attr\">prefix</span>: params &#125;, methodObj));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;the same route name is not allow&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      logger.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Route</span>,</span><br><span class=\"line\">  routerList,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// httpMethod.js</span></span><br><span class=\"line\"><span class=\"comment\">// 用method 装饰器存储http method 的描述信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../log/logger&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> method = [<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;PUT&#x27;</span>, <span class=\"string\">&#x27;DELETE&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> methodList = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> totalMethod = &#123;&#125;;</span><br><span class=\"line\">method.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  totalMethod[v] = <span class=\"keyword\">function</span> (<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">    methodList = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target, name, descriptor</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> old = descriptor.<span class=\"property\">value</span>;</span><br><span class=\"line\">        methodList.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">method</span>: v.<span class=\"title function_\">toLowerCase</span>(), <span class=\"attr\">path</span>: params, <span class=\"attr\">handle</span>: old &#125;);</span><br><span class=\"line\">        target.<span class=\"property\">methodList</span> = methodList;</span><br><span class=\"line\">        descriptor.<span class=\"property\">value</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">old</span>(...<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        logger.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = totalMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\"><span class=\"comment\">// 结合express遍历记录的信息</span></span><br><span class=\"line\">routerList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">routerItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>).<span class=\"title class_\">Router</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; methodList &#125; = routerItem;</span><br><span class=\"line\"></span><br><span class=\"line\">  methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">methodDescription</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; method, path, handle &#125; = methodDescription;</span><br><span class=\"line\">    router[method](path, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">handle</span>(req, res);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  app.<span class=\"title function_\">use</span>(routerItem.<span class=\"property\">prefix</span>, router);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Controller/User.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现命令式的Http method</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Route</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../core/collection-router&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">GET</span>, <span class=\"variable constant_\">PUT</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../core/http-method&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title class_\">Route</span>(<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  @<span class=\"title function_\">GET</span>(<span class=\"string\">&#x27;/:id&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">findWordBy</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; params &#125; = req;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(params.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title function_\">PUT</span>(<span class=\"string\">&#x27;/:id&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">updateWordBy</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; params &#125; = req;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(params.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">UserRouter</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Webpack KING！！ (一)","date":"2019-08-14T16:00:00.000Z","cover":"https://raw.githubusercontent.com/webpack-contrib/awesome-webpack/master/media/awesome_webpack_branding.png","_content":"# Webpack KING！！ (一)\n\n## source map\n\nwebpack 中的几种不同的模式\n\n| devtool                   | performance                              | production | quality        | comment                                                      |\n| :------------------------ | :--------------------------------------- | :--------- | :------------- | :----------------------------------------------------------- |\n| (none)                    | **build**: fastest  **rebuild**: fastest | yes        | bundle         | Recommended choice for production builds with maximum performance. |\n| **`eval`**                | **build**: fast  **rebuild**: fastest    | no         | generated      | Recommended choice for development builds with maximum performance. |\n|                           |                                          |            |                |                                                              |\n|                           |                                          |            |                |                                                              |\n| **`eval-source-map`**     | **build**: slowest  **rebuild**: ok      | no         | original       | Recommended choice for development builds with high quality SourceMaps. |\n| `cheap-source-map`        | **build**: ok  **rebuild**: slow         | no         | transformed    |                                                              |\n| `cheap-module-source-map` | **build**: slow  **rebuild**: slow       | no         | original lines |                                                              |\n| **`source-map`**          | **build**: slowest  **rebuild**: slowest | yes        | original       | Recommended choice for production builds with high quality SourceMaps. |\n\nresolve\n\n```json\nresolve: {\nmodules: [path.resolve('node_modules')],\nalias: {\n\"@\": \"./\"\n},\nextensions: [\".js\", \".css\"]\n}\n```\n\n### 优化点\n\nmodule.noParse\n\n```\nRegExp` `[RegExp]` `function(resource)` `string` `[string]\n```\n\n防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略的文件中 **不应该含有** `import`, `require`, `define` 的调用，或任何其他导入机制。忽略大型的 library 可以提高构建性能。\n\n**include/exclude**\n\n引入符合以下任何条件的模块。如果你提供了 `Rule.include` 选项，就不能再提供 `Rule.resource`。\n\n排除所有符合条件的模块。如果你提供了 `Rule.exclude` 选项，就不能再提供 `Rule.resource`\n\n**webpack.IgnorePlugin()**\n\n- `resourceRegExp`: A RegExp to test the resource against.\n- `contextRegExp`: (optional) A RegExp to test the context (directory) against.\n\n```javascript\nnew webpack.IgnorePlugin({ resourceRegExp, contextRegExp });\n// Supported in webpack 4 and earlier, unsupported in webpack 5:\nnew webpack.IgnorePlugin(resourceRegExp, [contextRegExp]);\n```\n\n**DLLPlugin**\n\n```javascript\n\n{\n  entry: {\n    react: ['react', 'react-dom']\n  },\n    output: {\n      filename: '[name].js',\n      path: path.resolve(__dirname, 'build'),\n      library: '[name]'\n    },\n      plugins: [\n        new webpack.DllPlugin({\n          name: '[name]',\n          path: path.resolve(__dirname, 'build', 'manifest.json')\n        })\n      ]\n}\n\n----\n\nnew DLLReferencePlugins({\n  manifest: path.resolve(__dirname, 'build', 'manifest.json')\n})\n```\n\n**happyPack**\n\n> 多线程打包\n\n```javascript\nuse: 'Happypack/loader?id=optmize'\nnew HappyPack({\n{id: 'optmize'},\nuse: [\n{\nloader: 'babel-loader',\noptions: {\npresets: [\n'@babel/preset-env'\n]\n}\n}\n]\n})\n```\n\n### tree shaking\n\n> require模块会讲export的内容放在Module.default上，故不支持tree shaking。\n\n### scope hosting\n\n>  自动简化代码\n\n### Optimization\n\n## `optimization.minimize` \n\n```\nboolean = true\n```\n\n告知 webpack 使用 [TerserPlugin](https://webpack.docschina.org/plugins/terser-webpack-plugin/) 或其它在 [`optimization.minimizer`](https://webpack.docschina.org/configuration/optimization/#optimizationminimizer) 定义的插件压缩 bundle。\n\n## `optimization.removeEmptyChunks` \n\n```\nboolean = true\n```\n\n如果 chunk 为空，告知 webpack 检测或移除这些 chunk。将 `optimization.removeEmptyChunks` 设置为 `false` 以禁用这项优化。\n\n## `optimization.mergeDuplicateChunks` \n\n```\nboolean = true\n```\n\n告知 webpack 合并含有相同模块的 chunk。将 `optimization.mergeDuplicateChunks` 设置为 `false` 以禁用这项优化。\n\n## `optimization.providedExports` \n\n```\nboolean\n```\n\n告知 webpack 去确定那些由模块提供的导出内容，为 `export * from ...` 生成更多高效的代码。默认 `optimization.providedExports` 会被启用。\n\n```javascript\nconst TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n  optimization: {\n    minimizer: [\n      new TerserPlugin({\n        parallel: true,\n        sourceMap: true, // 如果在生产环境中使用 source-maps，必须设置为 true\n        terserOptions: {\n          // https://github.com/webpack-contrib/terser-webpack-plugin#terseroptions\n        },\n      }),\n    ],\n  },\n};\n\nsplitChunks: {\n\tcacheGroup: { \n\t\tcommon: {\n      chunk: 'initial'\n    },\n    thirdPart:{\n      test: /node_modules/,\n      chunks: 'initial',\n      priority: 2\n    }\n\t}\n}\n\n```\n\n\n\n### 懒加载\n\n> Babel-sytax-dynamic-import\n\n### dynamic import 原理\n\n> 基于JSONP实现\n\n\n\n1. 把获得promise push实例并挂在installedChunks 的List。\n2. document.creatementElement（'script'）; script.src = publicpath + func(chunckID)\n3. scriptComplete\n\n4. 重写push执行webpackJsonpCallback\n\n5. 将模块标记为已加载\n\n6. 将模块代码挂载到modules exports上用promise包裹的。\n\n7. 通过thenable获取到code\n\n### 热更新原理\n\n> 通过websocket建立建立双向通信，监听文件变化（时间变化而非hash变化），将文件内容放入内存（memory-fs），发送实时通知。\n\n\n\n当监听文件变化，就会调用`_sendStats`方法通过`websocket`给浏览器发送文件变动数据，以让浏览器拿到最新的hash。\n\n热更新过程\n\n1. 通过 hotUpdate 查找旧模块\n2. 将新的 加入 hotUpdate\n3. 然后webpack——require执行\n\n### 完整流程\n\n1. 启动项目时会启动一个websocket连接\n2. 启动编译\n3. 调用setupHooks监听编译状态\n4. 编译完成调用_sendStats发送事件\n5. 客户端监听两个事件（ha sh/ok）\n6. 触发 OK 事件调用reloadApp（）\n7. reloadApp 发送webpackHotUpdate事件和当前hash给wbpack\n8. 通过module.hot.check方法检查更新\n9. 调用`hotDownloadUpdateChunk`发送`xxx/hash.hot-update.js` 请求。\n10. 在webpackHotUpdate调用\n11. 通过 hotUpdate 查找旧模块并将新的 加入 hotUpdate\n12. 通过webpack_require加载执行","source":"_posts/webpack.md","raw":"title: Webpack KING！！ (一)\ndate: 2019/08/15\ncover: https://raw.githubusercontent.com/webpack-contrib/awesome-webpack/master/media/awesome_webpack_branding.png\ncategories:\n- tool\ntags:\n- webpack\n\n---\n# Webpack KING！！ (一)\n\n## source map\n\nwebpack 中的几种不同的模式\n\n| devtool                   | performance                              | production | quality        | comment                                                      |\n| :------------------------ | :--------------------------------------- | :--------- | :------------- | :----------------------------------------------------------- |\n| (none)                    | **build**: fastest  **rebuild**: fastest | yes        | bundle         | Recommended choice for production builds with maximum performance. |\n| **`eval`**                | **build**: fast  **rebuild**: fastest    | no         | generated      | Recommended choice for development builds with maximum performance. |\n|                           |                                          |            |                |                                                              |\n|                           |                                          |            |                |                                                              |\n| **`eval-source-map`**     | **build**: slowest  **rebuild**: ok      | no         | original       | Recommended choice for development builds with high quality SourceMaps. |\n| `cheap-source-map`        | **build**: ok  **rebuild**: slow         | no         | transformed    |                                                              |\n| `cheap-module-source-map` | **build**: slow  **rebuild**: slow       | no         | original lines |                                                              |\n| **`source-map`**          | **build**: slowest  **rebuild**: slowest | yes        | original       | Recommended choice for production builds with high quality SourceMaps. |\n\nresolve\n\n```json\nresolve: {\nmodules: [path.resolve('node_modules')],\nalias: {\n\"@\": \"./\"\n},\nextensions: [\".js\", \".css\"]\n}\n```\n\n### 优化点\n\nmodule.noParse\n\n```\nRegExp` `[RegExp]` `function(resource)` `string` `[string]\n```\n\n防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略的文件中 **不应该含有** `import`, `require`, `define` 的调用，或任何其他导入机制。忽略大型的 library 可以提高构建性能。\n\n**include/exclude**\n\n引入符合以下任何条件的模块。如果你提供了 `Rule.include` 选项，就不能再提供 `Rule.resource`。\n\n排除所有符合条件的模块。如果你提供了 `Rule.exclude` 选项，就不能再提供 `Rule.resource`\n\n**webpack.IgnorePlugin()**\n\n- `resourceRegExp`: A RegExp to test the resource against.\n- `contextRegExp`: (optional) A RegExp to test the context (directory) against.\n\n```javascript\nnew webpack.IgnorePlugin({ resourceRegExp, contextRegExp });\n// Supported in webpack 4 and earlier, unsupported in webpack 5:\nnew webpack.IgnorePlugin(resourceRegExp, [contextRegExp]);\n```\n\n**DLLPlugin**\n\n```javascript\n\n{\n  entry: {\n    react: ['react', 'react-dom']\n  },\n    output: {\n      filename: '[name].js',\n      path: path.resolve(__dirname, 'build'),\n      library: '[name]'\n    },\n      plugins: [\n        new webpack.DllPlugin({\n          name: '[name]',\n          path: path.resolve(__dirname, 'build', 'manifest.json')\n        })\n      ]\n}\n\n----\n\nnew DLLReferencePlugins({\n  manifest: path.resolve(__dirname, 'build', 'manifest.json')\n})\n```\n\n**happyPack**\n\n> 多线程打包\n\n```javascript\nuse: 'Happypack/loader?id=optmize'\nnew HappyPack({\n{id: 'optmize'},\nuse: [\n{\nloader: 'babel-loader',\noptions: {\npresets: [\n'@babel/preset-env'\n]\n}\n}\n]\n})\n```\n\n### tree shaking\n\n> require模块会讲export的内容放在Module.default上，故不支持tree shaking。\n\n### scope hosting\n\n>  自动简化代码\n\n### Optimization\n\n## `optimization.minimize` \n\n```\nboolean = true\n```\n\n告知 webpack 使用 [TerserPlugin](https://webpack.docschina.org/plugins/terser-webpack-plugin/) 或其它在 [`optimization.minimizer`](https://webpack.docschina.org/configuration/optimization/#optimizationminimizer) 定义的插件压缩 bundle。\n\n## `optimization.removeEmptyChunks` \n\n```\nboolean = true\n```\n\n如果 chunk 为空，告知 webpack 检测或移除这些 chunk。将 `optimization.removeEmptyChunks` 设置为 `false` 以禁用这项优化。\n\n## `optimization.mergeDuplicateChunks` \n\n```\nboolean = true\n```\n\n告知 webpack 合并含有相同模块的 chunk。将 `optimization.mergeDuplicateChunks` 设置为 `false` 以禁用这项优化。\n\n## `optimization.providedExports` \n\n```\nboolean\n```\n\n告知 webpack 去确定那些由模块提供的导出内容，为 `export * from ...` 生成更多高效的代码。默认 `optimization.providedExports` 会被启用。\n\n```javascript\nconst TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n  optimization: {\n    minimizer: [\n      new TerserPlugin({\n        parallel: true,\n        sourceMap: true, // 如果在生产环境中使用 source-maps，必须设置为 true\n        terserOptions: {\n          // https://github.com/webpack-contrib/terser-webpack-plugin#terseroptions\n        },\n      }),\n    ],\n  },\n};\n\nsplitChunks: {\n\tcacheGroup: { \n\t\tcommon: {\n      chunk: 'initial'\n    },\n    thirdPart:{\n      test: /node_modules/,\n      chunks: 'initial',\n      priority: 2\n    }\n\t}\n}\n\n```\n\n\n\n### 懒加载\n\n> Babel-sytax-dynamic-import\n\n### dynamic import 原理\n\n> 基于JSONP实现\n\n\n\n1. 把获得promise push实例并挂在installedChunks 的List。\n2. document.creatementElement（'script'）; script.src = publicpath + func(chunckID)\n3. scriptComplete\n\n4. 重写push执行webpackJsonpCallback\n\n5. 将模块标记为已加载\n\n6. 将模块代码挂载到modules exports上用promise包裹的。\n\n7. 通过thenable获取到code\n\n### 热更新原理\n\n> 通过websocket建立建立双向通信，监听文件变化（时间变化而非hash变化），将文件内容放入内存（memory-fs），发送实时通知。\n\n\n\n当监听文件变化，就会调用`_sendStats`方法通过`websocket`给浏览器发送文件变动数据，以让浏览器拿到最新的hash。\n\n热更新过程\n\n1. 通过 hotUpdate 查找旧模块\n2. 将新的 加入 hotUpdate\n3. 然后webpack——require执行\n\n### 完整流程\n\n1. 启动项目时会启动一个websocket连接\n2. 启动编译\n3. 调用setupHooks监听编译状态\n4. 编译完成调用_sendStats发送事件\n5. 客户端监听两个事件（ha sh/ok）\n6. 触发 OK 事件调用reloadApp（）\n7. reloadApp 发送webpackHotUpdate事件和当前hash给wbpack\n8. 通过module.hot.check方法检查更新\n9. 调用`hotDownloadUpdateChunk`发送`xxx/hash.hot-update.js` 请求。\n10. 在webpackHotUpdate调用\n11. 通过 hotUpdate 查找旧模块并将新的 加入 hotUpdate\n12. 通过webpack_require加载执行","slug":"webpack","published":1,"updated":"2024-04-10T17:46:25.879Z","_id":"cluvjqddc00160wpd4sgha55g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Webpack-KING！！-一\"><a href=\"#Webpack-KING！！-一\" class=\"headerlink\" title=\"Webpack KING！！ (一)\"></a>Webpack KING！！ (一)</h1><h2 id=\"source-map\"><a href=\"#source-map\" class=\"headerlink\" title=\"source map\"></a>source map</h2><p>webpack 中的几种不同的模式</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">devtool</th>\n<th align=\"left\">performance</th>\n<th align=\"left\">production</th>\n<th align=\"left\">quality</th>\n<th align=\"left\">comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">(none)</td>\n<td align=\"left\"><strong>build</strong>: fastest  <strong>rebuild</strong>: fastest</td>\n<td align=\"left\">yes</td>\n<td align=\"left\">bundle</td>\n<td align=\"left\">Recommended choice for production builds with maximum performance.</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code>eval</code></strong></td>\n<td align=\"left\"><strong>build</strong>: fast  <strong>rebuild</strong>: fastest</td>\n<td align=\"left\">no</td>\n<td align=\"left\">generated</td>\n<td align=\"left\">Recommended choice for development builds with maximum performance.</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code>eval-source-map</code></strong></td>\n<td align=\"left\"><strong>build</strong>: slowest  <strong>rebuild</strong>: ok</td>\n<td align=\"left\">no</td>\n<td align=\"left\">original</td>\n<td align=\"left\">Recommended choice for development builds with high quality SourceMaps.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>cheap-source-map</code></td>\n<td align=\"left\"><strong>build</strong>: ok  <strong>rebuild</strong>: slow</td>\n<td align=\"left\">no</td>\n<td align=\"left\">transformed</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>cheap-module-source-map</code></td>\n<td align=\"left\"><strong>build</strong>: slow  <strong>rebuild</strong>: slow</td>\n<td align=\"left\">no</td>\n<td align=\"left\">original lines</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code>source-map</code></strong></td>\n<td align=\"left\"><strong>build</strong>: slowest  <strong>rebuild</strong>: slowest</td>\n<td align=\"left\">yes</td>\n<td align=\"left\">original</td>\n<td align=\"left\">Recommended choice for production builds with high quality SourceMaps.</td>\n</tr>\n</tbody></table>\n<p>resolve</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">modules<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>path.resolve(&#x27;node_modules&#x27;)<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">alias<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;@&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">extensions<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.css&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h3><p>module.noParse</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegExp` `[RegExp]` `function(resource)` `string` `[string]</span><br></pre></td></tr></table></figure>\n\n<p>防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略的文件中 <strong>不应该含有</strong> <code>import</code>, <code>require</code>, <code>define</code> 的调用，或任何其他导入机制。忽略大型的 library 可以提高构建性能。</p>\n<p><strong>include&#x2F;exclude</strong></p>\n<p>引入符合以下任何条件的模块。如果你提供了 <code>Rule.include</code> 选项，就不能再提供 <code>Rule.resource</code>。</p>\n<p>排除所有符合条件的模块。如果你提供了 <code>Rule.exclude</code> 选项，就不能再提供 <code>Rule.resource</code></p>\n<p><strong>webpack.IgnorePlugin()</strong></p>\n<ul>\n<li><code>resourceRegExp</code>: A RegExp to test the resource against.</li>\n<li><code>contextRegExp</code>: (optional) A RegExp to test the context (directory) against.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(&#123; resourceRegExp, contextRegExp &#125;);</span><br><span class=\"line\"><span class=\"comment\">// Supported in webpack 4 and earlier, unsupported in webpack 5:</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(resourceRegExp, [contextRegExp]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>DLLPlugin</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">react</span>: [<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"string\">&#x27;react-dom&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">library</span>: <span class=\"string\">&#x27;[name]&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DllPlugin</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name]&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>, <span class=\"string\">&#x27;manifest.json&#x27;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">DLLReferencePlugins</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">manifest</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>, <span class=\"string\">&#x27;manifest.json&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>happyPack</strong></p>\n<blockquote>\n<p>多线程打包</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">use</span>: <span class=\"string\">&#x27;Happypack/loader?id=optmize&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">HappyPack</span>(&#123;</span><br><span class=\"line\">&#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;optmize&#x27;</span>&#125;,</span><br><span class=\"line\"><span class=\"attr\">use</span>: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\"><span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\"><span class=\"attr\">presets</span>: [</span><br><span class=\"line\"><span class=\"string\">&#x27;@babel/preset-env&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tree-shaking\"><a href=\"#tree-shaking\" class=\"headerlink\" title=\"tree shaking\"></a>tree shaking</h3><blockquote>\n<p>require模块会讲export的内容放在Module.default上，故不支持tree shaking。</p>\n</blockquote>\n<h3 id=\"scope-hosting\"><a href=\"#scope-hosting\" class=\"headerlink\" title=\"scope hosting\"></a>scope hosting</h3><blockquote>\n<p> 自动简化代码</p>\n</blockquote>\n<h3 id=\"Optimization\"><a href=\"#Optimization\" class=\"headerlink\" title=\"Optimization\"></a>Optimization</h3><h2 id=\"optimization-minimize\"><a href=\"#optimization-minimize\" class=\"headerlink\" title=\"optimization.minimize\"></a><code>optimization.minimize</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean = true</span><br></pre></td></tr></table></figure>\n\n<p>告知 webpack 使用 <a href=\"https://webpack.docschina.org/plugins/terser-webpack-plugin/\">TerserPlugin</a> 或其它在 <a href=\"https://webpack.docschina.org/configuration/optimization/#optimizationminimizer\"><code>optimization.minimizer</code></a> 定义的插件压缩 bundle。</p>\n<h2 id=\"optimization-removeEmptyChunks\"><a href=\"#optimization-removeEmptyChunks\" class=\"headerlink\" title=\"optimization.removeEmptyChunks\"></a><code>optimization.removeEmptyChunks</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean = true</span><br></pre></td></tr></table></figure>\n\n<p>如果 chunk 为空，告知 webpack 检测或移除这些 chunk。将 <code>optimization.removeEmptyChunks</code> 设置为 <code>false</code> 以禁用这项优化。</p>\n<h2 id=\"optimization-mergeDuplicateChunks\"><a href=\"#optimization-mergeDuplicateChunks\" class=\"headerlink\" title=\"optimization.mergeDuplicateChunks\"></a><code>optimization.mergeDuplicateChunks</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean = true</span><br></pre></td></tr></table></figure>\n\n<p>告知 webpack 合并含有相同模块的 chunk。将 <code>optimization.mergeDuplicateChunks</code> 设置为 <code>false</code> 以禁用这项优化。</p>\n<h2 id=\"optimization-providedExports\"><a href=\"#optimization-providedExports\" class=\"headerlink\" title=\"optimization.providedExports\"></a><code>optimization.providedExports</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean</span><br></pre></td></tr></table></figure>\n\n<p>告知 webpack 去确定那些由模块提供的导出内容，为 <code>export * from ...</code> 生成更多高效的代码。默认 <code>optimization.providedExports</code> 会被启用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">sourceMap</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果在生产环境中使用 source-maps，必须设置为 true</span></span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// https://github.com/webpack-contrib/terser-webpack-plugin#terseroptions</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">\t<span class=\"attr\">cacheGroup</span>: &#123; </span><br><span class=\"line\">\t\t<span class=\"attr\">common</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunk</span>: <span class=\"string\">&#x27;initial&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">thirdPart</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">priority</span>: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h3><blockquote>\n<p>Babel-sytax-dynamic-import</p>\n</blockquote>\n<h3 id=\"dynamic-import-原理\"><a href=\"#dynamic-import-原理\" class=\"headerlink\" title=\"dynamic import 原理\"></a>dynamic import 原理</h3><blockquote>\n<p>基于JSONP实现</p>\n</blockquote>\n<ol>\n<li><p>把获得promise push实例并挂在installedChunks 的List。</p>\n</li>\n<li><p>document.creatementElement（’script’）; script.src &#x3D; publicpath + func(chunckID)</p>\n</li>\n<li><p>scriptComplete</p>\n</li>\n<li><p>重写push执行webpackJsonpCallback</p>\n</li>\n<li><p>将模块标记为已加载</p>\n</li>\n<li><p>将模块代码挂载到modules exports上用promise包裹的。</p>\n</li>\n<li><p>通过thenable获取到code</p>\n</li>\n</ol>\n<h3 id=\"热更新原理\"><a href=\"#热更新原理\" class=\"headerlink\" title=\"热更新原理\"></a>热更新原理</h3><blockquote>\n<p>通过websocket建立建立双向通信，监听文件变化（时间变化而非hash变化），将文件内容放入内存（memory-fs），发送实时通知。</p>\n</blockquote>\n<p>当监听文件变化，就会调用<code>_sendStats</code>方法通过<code>websocket</code>给浏览器发送文件变动数据，以让浏览器拿到最新的hash。</p>\n<p>热更新过程</p>\n<ol>\n<li>通过 hotUpdate 查找旧模块</li>\n<li>将新的 加入 hotUpdate</li>\n<li>然后webpack——require执行</li>\n</ol>\n<h3 id=\"完整流程\"><a href=\"#完整流程\" class=\"headerlink\" title=\"完整流程\"></a>完整流程</h3><ol>\n<li>启动项目时会启动一个websocket连接</li>\n<li>启动编译</li>\n<li>调用setupHooks监听编译状态</li>\n<li>编译完成调用_sendStats发送事件</li>\n<li>客户端监听两个事件（ha sh&#x2F;ok）</li>\n<li>触发 OK 事件调用reloadApp（）</li>\n<li>reloadApp 发送webpackHotUpdate事件和当前hash给wbpack</li>\n<li>通过module.hot.check方法检查更新</li>\n<li>调用<code>hotDownloadUpdateChunk</code>发送<code>xxx/hash.hot-update.js</code> 请求。</li>\n<li>在webpackHotUpdate调用</li>\n<li>通过 hotUpdate 查找旧模块并将新的 加入 hotUpdate</li>\n<li>通过webpack_require加载执行</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Webpack-KING！！-一\"><a href=\"#Webpack-KING！！-一\" class=\"headerlink\" title=\"Webpack KING！！ (一)\"></a>Webpack KING！！ (一)</h1><h2 id=\"source-map\"><a href=\"#source-map\" class=\"headerlink\" title=\"source map\"></a>source map</h2><p>webpack 中的几种不同的模式</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">devtool</th>\n<th align=\"left\">performance</th>\n<th align=\"left\">production</th>\n<th align=\"left\">quality</th>\n<th align=\"left\">comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">(none)</td>\n<td align=\"left\"><strong>build</strong>: fastest  <strong>rebuild</strong>: fastest</td>\n<td align=\"left\">yes</td>\n<td align=\"left\">bundle</td>\n<td align=\"left\">Recommended choice for production builds with maximum performance.</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code>eval</code></strong></td>\n<td align=\"left\"><strong>build</strong>: fast  <strong>rebuild</strong>: fastest</td>\n<td align=\"left\">no</td>\n<td align=\"left\">generated</td>\n<td align=\"left\">Recommended choice for development builds with maximum performance.</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code>eval-source-map</code></strong></td>\n<td align=\"left\"><strong>build</strong>: slowest  <strong>rebuild</strong>: ok</td>\n<td align=\"left\">no</td>\n<td align=\"left\">original</td>\n<td align=\"left\">Recommended choice for development builds with high quality SourceMaps.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>cheap-source-map</code></td>\n<td align=\"left\"><strong>build</strong>: ok  <strong>rebuild</strong>: slow</td>\n<td align=\"left\">no</td>\n<td align=\"left\">transformed</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>cheap-module-source-map</code></td>\n<td align=\"left\"><strong>build</strong>: slow  <strong>rebuild</strong>: slow</td>\n<td align=\"left\">no</td>\n<td align=\"left\">original lines</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code>source-map</code></strong></td>\n<td align=\"left\"><strong>build</strong>: slowest  <strong>rebuild</strong>: slowest</td>\n<td align=\"left\">yes</td>\n<td align=\"left\">original</td>\n<td align=\"left\">Recommended choice for production builds with high quality SourceMaps.</td>\n</tr>\n</tbody></table>\n<p>resolve</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">modules<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>path.resolve(&#x27;node_modules&#x27;)<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">alias<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;@&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">extensions<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.css&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h3><p>module.noParse</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegExp` `[RegExp]` `function(resource)` `string` `[string]</span><br></pre></td></tr></table></figure>\n\n<p>防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略的文件中 <strong>不应该含有</strong> <code>import</code>, <code>require</code>, <code>define</code> 的调用，或任何其他导入机制。忽略大型的 library 可以提高构建性能。</p>\n<p><strong>include&#x2F;exclude</strong></p>\n<p>引入符合以下任何条件的模块。如果你提供了 <code>Rule.include</code> 选项，就不能再提供 <code>Rule.resource</code>。</p>\n<p>排除所有符合条件的模块。如果你提供了 <code>Rule.exclude</code> 选项，就不能再提供 <code>Rule.resource</code></p>\n<p><strong>webpack.IgnorePlugin()</strong></p>\n<ul>\n<li><code>resourceRegExp</code>: A RegExp to test the resource against.</li>\n<li><code>contextRegExp</code>: (optional) A RegExp to test the context (directory) against.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(&#123; resourceRegExp, contextRegExp &#125;);</span><br><span class=\"line\"><span class=\"comment\">// Supported in webpack 4 and earlier, unsupported in webpack 5:</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(resourceRegExp, [contextRegExp]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>DLLPlugin</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">react</span>: [<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"string\">&#x27;react-dom&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">library</span>: <span class=\"string\">&#x27;[name]&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DllPlugin</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name]&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>, <span class=\"string\">&#x27;manifest.json&#x27;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">DLLReferencePlugins</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">manifest</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>, <span class=\"string\">&#x27;manifest.json&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>happyPack</strong></p>\n<blockquote>\n<p>多线程打包</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">use</span>: <span class=\"string\">&#x27;Happypack/loader?id=optmize&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">HappyPack</span>(&#123;</span><br><span class=\"line\">&#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;optmize&#x27;</span>&#125;,</span><br><span class=\"line\"><span class=\"attr\">use</span>: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\"><span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\"><span class=\"attr\">presets</span>: [</span><br><span class=\"line\"><span class=\"string\">&#x27;@babel/preset-env&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tree-shaking\"><a href=\"#tree-shaking\" class=\"headerlink\" title=\"tree shaking\"></a>tree shaking</h3><blockquote>\n<p>require模块会讲export的内容放在Module.default上，故不支持tree shaking。</p>\n</blockquote>\n<h3 id=\"scope-hosting\"><a href=\"#scope-hosting\" class=\"headerlink\" title=\"scope hosting\"></a>scope hosting</h3><blockquote>\n<p> 自动简化代码</p>\n</blockquote>\n<h3 id=\"Optimization\"><a href=\"#Optimization\" class=\"headerlink\" title=\"Optimization\"></a>Optimization</h3><h2 id=\"optimization-minimize\"><a href=\"#optimization-minimize\" class=\"headerlink\" title=\"optimization.minimize\"></a><code>optimization.minimize</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean = true</span><br></pre></td></tr></table></figure>\n\n<p>告知 webpack 使用 <a href=\"https://webpack.docschina.org/plugins/terser-webpack-plugin/\">TerserPlugin</a> 或其它在 <a href=\"https://webpack.docschina.org/configuration/optimization/#optimizationminimizer\"><code>optimization.minimizer</code></a> 定义的插件压缩 bundle。</p>\n<h2 id=\"optimization-removeEmptyChunks\"><a href=\"#optimization-removeEmptyChunks\" class=\"headerlink\" title=\"optimization.removeEmptyChunks\"></a><code>optimization.removeEmptyChunks</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean = true</span><br></pre></td></tr></table></figure>\n\n<p>如果 chunk 为空，告知 webpack 检测或移除这些 chunk。将 <code>optimization.removeEmptyChunks</code> 设置为 <code>false</code> 以禁用这项优化。</p>\n<h2 id=\"optimization-mergeDuplicateChunks\"><a href=\"#optimization-mergeDuplicateChunks\" class=\"headerlink\" title=\"optimization.mergeDuplicateChunks\"></a><code>optimization.mergeDuplicateChunks</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean = true</span><br></pre></td></tr></table></figure>\n\n<p>告知 webpack 合并含有相同模块的 chunk。将 <code>optimization.mergeDuplicateChunks</code> 设置为 <code>false</code> 以禁用这项优化。</p>\n<h2 id=\"optimization-providedExports\"><a href=\"#optimization-providedExports\" class=\"headerlink\" title=\"optimization.providedExports\"></a><code>optimization.providedExports</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean</span><br></pre></td></tr></table></figure>\n\n<p>告知 webpack 去确定那些由模块提供的导出内容，为 <code>export * from ...</code> 生成更多高效的代码。默认 <code>optimization.providedExports</code> 会被启用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">sourceMap</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果在生产环境中使用 source-maps，必须设置为 true</span></span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// https://github.com/webpack-contrib/terser-webpack-plugin#terseroptions</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">\t<span class=\"attr\">cacheGroup</span>: &#123; </span><br><span class=\"line\">\t\t<span class=\"attr\">common</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunk</span>: <span class=\"string\">&#x27;initial&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">thirdPart</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">priority</span>: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h3><blockquote>\n<p>Babel-sytax-dynamic-import</p>\n</blockquote>\n<h3 id=\"dynamic-import-原理\"><a href=\"#dynamic-import-原理\" class=\"headerlink\" title=\"dynamic import 原理\"></a>dynamic import 原理</h3><blockquote>\n<p>基于JSONP实现</p>\n</blockquote>\n<ol>\n<li><p>把获得promise push实例并挂在installedChunks 的List。</p>\n</li>\n<li><p>document.creatementElement（’script’）; script.src &#x3D; publicpath + func(chunckID)</p>\n</li>\n<li><p>scriptComplete</p>\n</li>\n<li><p>重写push执行webpackJsonpCallback</p>\n</li>\n<li><p>将模块标记为已加载</p>\n</li>\n<li><p>将模块代码挂载到modules exports上用promise包裹的。</p>\n</li>\n<li><p>通过thenable获取到code</p>\n</li>\n</ol>\n<h3 id=\"热更新原理\"><a href=\"#热更新原理\" class=\"headerlink\" title=\"热更新原理\"></a>热更新原理</h3><blockquote>\n<p>通过websocket建立建立双向通信，监听文件变化（时间变化而非hash变化），将文件内容放入内存（memory-fs），发送实时通知。</p>\n</blockquote>\n<p>当监听文件变化，就会调用<code>_sendStats</code>方法通过<code>websocket</code>给浏览器发送文件变动数据，以让浏览器拿到最新的hash。</p>\n<p>热更新过程</p>\n<ol>\n<li>通过 hotUpdate 查找旧模块</li>\n<li>将新的 加入 hotUpdate</li>\n<li>然后webpack——require执行</li>\n</ol>\n<h3 id=\"完整流程\"><a href=\"#完整流程\" class=\"headerlink\" title=\"完整流程\"></a>完整流程</h3><ol>\n<li>启动项目时会启动一个websocket连接</li>\n<li>启动编译</li>\n<li>调用setupHooks监听编译状态</li>\n<li>编译完成调用_sendStats发送事件</li>\n<li>客户端监听两个事件（ha sh&#x2F;ok）</li>\n<li>触发 OK 事件调用reloadApp（）</li>\n<li>reloadApp 发送webpackHotUpdate事件和当前hash给wbpack</li>\n<li>通过module.hot.check方法检查更新</li>\n<li>调用<code>hotDownloadUpdateChunk</code>发送<code>xxx/hash.hot-update.js</code> 请求。</li>\n<li>在webpackHotUpdate调用</li>\n<li>通过 hotUpdate 查找旧模块并将新的 加入 hotUpdate</li>\n<li>通过webpack_require加载执行</li>\n</ol>\n"},{"title":"垒积木之实现一个MiniReact","date":"2017-12-04T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/react.png","_content":"\n![rs](https://images.pexels.com/photos/1056555/pexels-photo-1056555.jpeg?cs=srgb&dl=abstract-arms-art-1056555.jpg&fm=jpg)\n# 垒积木之实现一个MiniReact\n\n> 最近在学习React source code， 一点一点的总算是啃完了，于是也想实现一个React的lib，不求事无巨细的实现框架的每一个细节，希望能体现React的精髓帮助学习。\n\n### 以一个hello world开始实现virtual dom\n\n如果我们写一个React的App，代码可能是：\n\n```javascript\nclass Hello extends Component {\n    render() {\n        return (\n        \t<p>hello world</p>\n        )\n    }\n}\n\nReactDOM.render(<Hello />, document.getElementById('root'));\n\n// JSX 最后会被编译成形如\n\nReactDOM.render(\n  React.createElement('p', null, 'Hello World'),\n  document.getElementById('root')\n);\n\n```\n\n所以，一个React Component 起点就是createElement方法，\n\n```javascript\nfunction createVDOM(type, props, contArg) {\n    let content, args;\n    content = contArg || \"\";\n    // 生成抽象DOM结构。\n    return {\n        vDom: true,\n        type,\n       \tkey: props.key || null,\n        props: props || {},\n        content: [{text: content}]\n    }\n}\n\n// render method\n\nfunction render(vDOM) {\n    const node;\n    if(vDOM.text) {\n        node = document.createTextNode(vDOM.text);\n    } else if (vDOM.vDom) {\n        let {vDom, type, key, props, content} = vDOM;\n        \n        if(typeof type === 'string') {\n             node = document.createElement(type);\n        }\n        if(_.isArray(\"content\")){\n            appendChildren(node, render(content));\n        }\n    }\n}\n\n\n// appendChildren 方法插入节点\nfunction appendChildren(\n  parent,\n  children,\n  start = 0,\n  end = children.length - 1,\n  beforeNode\n) {\n  while (start <= end) {\n    var ch = children[start++];\n    parent.insertBefore(mount(ch), beforeNode);\n  }\n}\n\n// 拥有了这三个基本的方法我们就可以完成一个，简单的hello world\n\nvar vDOM = createVDOM('p', null, 'hello world');\ndocument.getElelment('root').appendChild(render(vDOM));\n\n```\n\n\n\n### 增加 Props的支持\n\n```javascript\nfunction createVDOM(type, props, contArg) {\n    let content, args;\n    // 生成抽象DOM结构。\n    if (typeof type !== 'string') {\n        // 处理嵌套逻辑\n    } else {\n        content = [{ _text: contArg == null ? \"\" : contArg }];\n    }\n    return {\n        vDom: true,\n        type,\n       \tkey: props.key || null,\n        props: props || {},\n        content\n    }\n}\n\n// render method\n\nfunction render(vDOM) {\n    const node;\n    if(vDOM.text) {\n        node = document.createTextNode(vDOM.text);\n    } else if (vDOM.vDom) {\n        let {vDom, type, key, props, content} = vDOM;\n        \n        if(typeof type === 'string') {\n             node = document.createElement(type);\n             if(_.isArray(\"content\")){\n            appendChildren(node, render(content));\n        \t}\n        } else {\n            var vnode = type(props, content);\n            node = mount(vnode);\n            vDOM.text = vnode;\n        }\n       \n    }\n    return node;\n}\n\n\n// appendChildren 方法插入节点\nfunction appendChildren(\n  parent,\n  children,\n  start = 0,\n  end = children.length - 1,\n  beforeNode\n) {\n  while (start <= end) {\n    var ch = children[start++];\n    parent.insertBefore(mount(ch), beforeNode);\n  }\n}\n// 通过对function的分流，可以讲props以回调的形式交给render函数处理\n\nvar vDOM = (props) => createVDOM('p', null, `hello ${props.name}`);\nvar div = createVDOM(vDOM, {name: 'mark'})\ndocument.getElelment('root').appendChild(render(div));\n```\n\n\n\n### 添加多节点的处理\n\n```javascript\nfunction createVDOM(type, props, contArg) {\n    let content, args;\n    // contArg参数的数量，做判断\n    args = arguments - 2;\n    // 生成抽象DOM结构。\n    if (typeof type !== 'string') {\n        // 处理嵌套逻辑\n        if(args == 1){\n            content = contArg;\n        }\n    } else {\n        if (args > 1) {\n            args = Array(len);\n            for (i = 0; i < len; i++) {\n              args[i] = arguments[i + 2];\n            }\n            content = maybeFlatten(args, false);\n        }\n        \n        if (args < 1) {\n            content = {};\n        }\n        content = [{ _text: contArg == null ? \"\" : contArg }];\n    }\n    return {\n        vDom: true,\n        type,\n       \tkey: props.key || null,\n        props: props || {},\n        content\n    }\n}\n\n//压平\nfunction maybeFlatten(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      var ch = arr[i];\n   \tif (!ch.vDom) {\n      arr[i] = { _text: ch == null ? \"\" : ch };\n    }\n  }\n  return arr;\n}\n\n// render method\n\nfunction render(vDOM) {\n    const node;\n    if(vDOM.text) {\n        node = document.createTextNode(vDOM.text);\n    } else if (vDOM.vDom) {\n        let {vDom, type, key, props, content} = vDOM;\n        \n        if(typeof type === 'string') {\n             node = document.createElement(type);\n             if(_.isArray(\"content\")){\n            appendChildren(node, render(content));\n        \t}\n        } else {\n            var vnode = type(props, content);\n            node = mount(vnode);\n            vDOM.text = vnode;\n        }\n       \n    }\n    return node;\n}\n\n\n// appendChildren 方法插入节点\nfunction appendChildren(\n  parent,\n  children,\n  start = 0,\n  end = children.length - 1,\n  beforeNode\n) {\n  while (start <= end) {\n    var ch = children[start++];\n    parent.insertBefore(mount(ch), beforeNode);\n  }\n}\n// 通过对function的分流，可以讲props以回调的形式交给render函数处理\n\n// 支持参数数组多节点\nfunction Box(props, content) {\n      return createVDOM('div', null, createVDOM('h1', null, props.title), createVDOM('p', null, content));\n    }\n\n    const vnode = createVDOM('div', null, createVDOM(Box, { title: 'Fancy Box' }, 'content'));\ndocument.getElelment('root').appendChild(render(vnode));\n\n```\n\n到此，React的VDOM产生真实DOM的整个过程已经可以粗糙的模拟出来，对VDOM的了解也更进一步。","source":"_posts/MiniReact.md","raw":"---\ntitle: 垒积木之实现一个MiniReact\ndate: 2017/12/05\ncover: https://technologybook.tech/assets/img/react.png\ncategories:\n- react\ntags: \n- react source\n\n---\n\n![rs](https://images.pexels.com/photos/1056555/pexels-photo-1056555.jpeg?cs=srgb&dl=abstract-arms-art-1056555.jpg&fm=jpg)\n# 垒积木之实现一个MiniReact\n\n> 最近在学习React source code， 一点一点的总算是啃完了，于是也想实现一个React的lib，不求事无巨细的实现框架的每一个细节，希望能体现React的精髓帮助学习。\n\n### 以一个hello world开始实现virtual dom\n\n如果我们写一个React的App，代码可能是：\n\n```javascript\nclass Hello extends Component {\n    render() {\n        return (\n        \t<p>hello world</p>\n        )\n    }\n}\n\nReactDOM.render(<Hello />, document.getElementById('root'));\n\n// JSX 最后会被编译成形如\n\nReactDOM.render(\n  React.createElement('p', null, 'Hello World'),\n  document.getElementById('root')\n);\n\n```\n\n所以，一个React Component 起点就是createElement方法，\n\n```javascript\nfunction createVDOM(type, props, contArg) {\n    let content, args;\n    content = contArg || \"\";\n    // 生成抽象DOM结构。\n    return {\n        vDom: true,\n        type,\n       \tkey: props.key || null,\n        props: props || {},\n        content: [{text: content}]\n    }\n}\n\n// render method\n\nfunction render(vDOM) {\n    const node;\n    if(vDOM.text) {\n        node = document.createTextNode(vDOM.text);\n    } else if (vDOM.vDom) {\n        let {vDom, type, key, props, content} = vDOM;\n        \n        if(typeof type === 'string') {\n             node = document.createElement(type);\n        }\n        if(_.isArray(\"content\")){\n            appendChildren(node, render(content));\n        }\n    }\n}\n\n\n// appendChildren 方法插入节点\nfunction appendChildren(\n  parent,\n  children,\n  start = 0,\n  end = children.length - 1,\n  beforeNode\n) {\n  while (start <= end) {\n    var ch = children[start++];\n    parent.insertBefore(mount(ch), beforeNode);\n  }\n}\n\n// 拥有了这三个基本的方法我们就可以完成一个，简单的hello world\n\nvar vDOM = createVDOM('p', null, 'hello world');\ndocument.getElelment('root').appendChild(render(vDOM));\n\n```\n\n\n\n### 增加 Props的支持\n\n```javascript\nfunction createVDOM(type, props, contArg) {\n    let content, args;\n    // 生成抽象DOM结构。\n    if (typeof type !== 'string') {\n        // 处理嵌套逻辑\n    } else {\n        content = [{ _text: contArg == null ? \"\" : contArg }];\n    }\n    return {\n        vDom: true,\n        type,\n       \tkey: props.key || null,\n        props: props || {},\n        content\n    }\n}\n\n// render method\n\nfunction render(vDOM) {\n    const node;\n    if(vDOM.text) {\n        node = document.createTextNode(vDOM.text);\n    } else if (vDOM.vDom) {\n        let {vDom, type, key, props, content} = vDOM;\n        \n        if(typeof type === 'string') {\n             node = document.createElement(type);\n             if(_.isArray(\"content\")){\n            appendChildren(node, render(content));\n        \t}\n        } else {\n            var vnode = type(props, content);\n            node = mount(vnode);\n            vDOM.text = vnode;\n        }\n       \n    }\n    return node;\n}\n\n\n// appendChildren 方法插入节点\nfunction appendChildren(\n  parent,\n  children,\n  start = 0,\n  end = children.length - 1,\n  beforeNode\n) {\n  while (start <= end) {\n    var ch = children[start++];\n    parent.insertBefore(mount(ch), beforeNode);\n  }\n}\n// 通过对function的分流，可以讲props以回调的形式交给render函数处理\n\nvar vDOM = (props) => createVDOM('p', null, `hello ${props.name}`);\nvar div = createVDOM(vDOM, {name: 'mark'})\ndocument.getElelment('root').appendChild(render(div));\n```\n\n\n\n### 添加多节点的处理\n\n```javascript\nfunction createVDOM(type, props, contArg) {\n    let content, args;\n    // contArg参数的数量，做判断\n    args = arguments - 2;\n    // 生成抽象DOM结构。\n    if (typeof type !== 'string') {\n        // 处理嵌套逻辑\n        if(args == 1){\n            content = contArg;\n        }\n    } else {\n        if (args > 1) {\n            args = Array(len);\n            for (i = 0; i < len; i++) {\n              args[i] = arguments[i + 2];\n            }\n            content = maybeFlatten(args, false);\n        }\n        \n        if (args < 1) {\n            content = {};\n        }\n        content = [{ _text: contArg == null ? \"\" : contArg }];\n    }\n    return {\n        vDom: true,\n        type,\n       \tkey: props.key || null,\n        props: props || {},\n        content\n    }\n}\n\n//压平\nfunction maybeFlatten(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      var ch = arr[i];\n   \tif (!ch.vDom) {\n      arr[i] = { _text: ch == null ? \"\" : ch };\n    }\n  }\n  return arr;\n}\n\n// render method\n\nfunction render(vDOM) {\n    const node;\n    if(vDOM.text) {\n        node = document.createTextNode(vDOM.text);\n    } else if (vDOM.vDom) {\n        let {vDom, type, key, props, content} = vDOM;\n        \n        if(typeof type === 'string') {\n             node = document.createElement(type);\n             if(_.isArray(\"content\")){\n            appendChildren(node, render(content));\n        \t}\n        } else {\n            var vnode = type(props, content);\n            node = mount(vnode);\n            vDOM.text = vnode;\n        }\n       \n    }\n    return node;\n}\n\n\n// appendChildren 方法插入节点\nfunction appendChildren(\n  parent,\n  children,\n  start = 0,\n  end = children.length - 1,\n  beforeNode\n) {\n  while (start <= end) {\n    var ch = children[start++];\n    parent.insertBefore(mount(ch), beforeNode);\n  }\n}\n// 通过对function的分流，可以讲props以回调的形式交给render函数处理\n\n// 支持参数数组多节点\nfunction Box(props, content) {\n      return createVDOM('div', null, createVDOM('h1', null, props.title), createVDOM('p', null, content));\n    }\n\n    const vnode = createVDOM('div', null, createVDOM(Box, { title: 'Fancy Box' }, 'content'));\ndocument.getElelment('root').appendChild(render(vnode));\n\n```\n\n到此，React的VDOM产生真实DOM的整个过程已经可以粗糙的模拟出来，对VDOM的了解也更进一步。","slug":"MiniReact","published":1,"updated":"2024-04-10T17:46:25.875Z","_id":"cluvjqddp001b0wpdhk6m0t99","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://images.pexels.com/photos/1056555/pexels-photo-1056555.jpeg?cs=srgb&dl=abstract-arms-art-1056555.jpg&fm=jpg\" alt=\"rs\"></p>\n<h1 id=\"垒积木之实现一个MiniReact\"><a href=\"#垒积木之实现一个MiniReact\" class=\"headerlink\" title=\"垒积木之实现一个MiniReact\"></a>垒积木之实现一个MiniReact</h1><blockquote>\n<p>最近在学习React source code， 一点一点的总算是啃完了，于是也想实现一个React的lib，不求事无巨细的实现框架的每一个细节，希望能体现React的精髓帮助学习。</p>\n</blockquote>\n<h3 id=\"以一个hello-world开始实现virtual-dom\"><a href=\"#以一个hello-world开始实现virtual-dom\" class=\"headerlink\" title=\"以一个hello world开始实现virtual dom\"></a>以一个hello world开始实现virtual dom</h3><p>如果我们写一个React的App，代码可能是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        \t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Hello</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSX 最后会被编译成形如</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Hello World&#x27;</span>),</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所以，一个React Component 起点就是createElement方法，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVDOM</span>(<span class=\"params\">type, props, contArg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content, args;</span><br><span class=\"line\">    content = contArg || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 生成抽象DOM结构。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">vDom</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">       \t<span class=\"attr\">key</span>: props.<span class=\"property\">key</span> || <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: props || &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">content</span>: [&#123;<span class=\"attr\">text</span>: content&#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render method</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">vDOM</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vDOM.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(vDOM.<span class=\"property\">text</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vDOM.<span class=\"property\">vDom</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;vDom, type, key, props, content&#125; = vDOM;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> type === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">             node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;content&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"title function_\">appendChildren</span>(node, <span class=\"title function_\">render</span>(content));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendChildren 方法插入节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">appendChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  parent,</span></span><br><span class=\"line\"><span class=\"params\">  children,</span></span><br><span class=\"line\"><span class=\"params\">  start = <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"params\">  end = children.length - <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"params\">  beforeNode</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = children[start++];</span><br><span class=\"line\">    parent.<span class=\"title function_\">insertBefore</span>(<span class=\"title function_\">mount</span>(ch), beforeNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拥有了这三个基本的方法我们就可以完成一个，简单的hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vDOM = <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElelment</span>(<span class=\"string\">&#x27;root&#x27;</span>).<span class=\"title function_\">appendChild</span>(<span class=\"title function_\">render</span>(vDOM));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"增加-Props的支持\"><a href=\"#增加-Props的支持\" class=\"headerlink\" title=\"增加 Props的支持\"></a>增加 Props的支持</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVDOM</span>(<span class=\"params\">type, props, contArg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content, args;</span><br><span class=\"line\">    <span class=\"comment\">// 生成抽象DOM结构。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> type !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理嵌套逻辑</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        content = [&#123; <span class=\"attr\">_text</span>: contArg == <span class=\"literal\">null</span> ? <span class=\"string\">&quot;&quot;</span> : contArg &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">vDom</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">       \t<span class=\"attr\">key</span>: props.<span class=\"property\">key</span> || <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: props || &#123;&#125;,</span><br><span class=\"line\">        content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render method</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">vDOM</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vDOM.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(vDOM.<span class=\"property\">text</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vDOM.<span class=\"property\">vDom</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;vDom, type, key, props, content&#125; = vDOM;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> type === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">             node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(_.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;content&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"title function_\">appendChildren</span>(node, <span class=\"title function_\">render</span>(content));</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> vnode = <span class=\"title function_\">type</span>(props, content);</span><br><span class=\"line\">            node = <span class=\"title function_\">mount</span>(vnode);</span><br><span class=\"line\">            vDOM.<span class=\"property\">text</span> = vnode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendChildren 方法插入节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">appendChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  parent,</span></span><br><span class=\"line\"><span class=\"params\">  children,</span></span><br><span class=\"line\"><span class=\"params\">  start = <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"params\">  end = children.length - <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"params\">  beforeNode</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = children[start++];</span><br><span class=\"line\">    parent.<span class=\"title function_\">insertBefore</span>(<span class=\"title function_\">mount</span>(ch), beforeNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过对function的分流，可以讲props以回调的形式交给render函数处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">vDOM</span> = (<span class=\"params\">props</span>) =&gt; <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"string\">`hello <span class=\"subst\">$&#123;props.name&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"title function_\">createVDOM</span>(vDOM, &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;mark&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElelment</span>(<span class=\"string\">&#x27;root&#x27;</span>).<span class=\"title function_\">appendChild</span>(<span class=\"title function_\">render</span>(div));</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"添加多节点的处理\"><a href=\"#添加多节点的处理\" class=\"headerlink\" title=\"添加多节点的处理\"></a>添加多节点的处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVDOM</span>(<span class=\"params\">type, props, contArg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content, args;</span><br><span class=\"line\">    <span class=\"comment\">// contArg参数的数量，做判断</span></span><br><span class=\"line\">    args = <span class=\"variable language_\">arguments</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 生成抽象DOM结构。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> type !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理嵌套逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(args == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            content = contArg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            args = <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">              args[i] = <span class=\"variable language_\">arguments</span>[i + <span class=\"number\">2</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            content = <span class=\"title function_\">maybeFlatten</span>(args, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            content = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        content = [&#123; <span class=\"attr\">_text</span>: contArg == <span class=\"literal\">null</span> ? <span class=\"string\">&quot;&quot;</span> : contArg &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">vDom</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">       \t<span class=\"attr\">key</span>: props.<span class=\"property\">key</span> || <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: props || &#123;&#125;,</span><br><span class=\"line\">        content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//压平</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maybeFlatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ch = arr[i];</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (!ch.<span class=\"property\">vDom</span>) &#123;</span><br><span class=\"line\">      arr[i] = &#123; <span class=\"attr\">_text</span>: ch == <span class=\"literal\">null</span> ? <span class=\"string\">&quot;&quot;</span> : ch &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render method</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">vDOM</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vDOM.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(vDOM.<span class=\"property\">text</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vDOM.<span class=\"property\">vDom</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;vDom, type, key, props, content&#125; = vDOM;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> type === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">             node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(_.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;content&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"title function_\">appendChildren</span>(node, <span class=\"title function_\">render</span>(content));</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> vnode = <span class=\"title function_\">type</span>(props, content);</span><br><span class=\"line\">            node = <span class=\"title function_\">mount</span>(vnode);</span><br><span class=\"line\">            vDOM.<span class=\"property\">text</span> = vnode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendChildren 方法插入节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">appendChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  parent,</span></span><br><span class=\"line\"><span class=\"params\">  children,</span></span><br><span class=\"line\"><span class=\"params\">  start = <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"params\">  end = children.length - <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"params\">  beforeNode</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = children[start++];</span><br><span class=\"line\">    parent.<span class=\"title function_\">insertBefore</span>(<span class=\"title function_\">mount</span>(ch), beforeNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过对function的分流，可以讲props以回调的形式交给render函数处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 支持参数数组多节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Box</span>(<span class=\"params\">props, content</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;div&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;h1&#x27;</span>, <span class=\"literal\">null</span>, props.<span class=\"property\">title</span>), <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, content));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vnode = <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;div&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"title function_\">createVDOM</span>(<span class=\"title class_\">Box</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Fancy Box&#x27;</span> &#125;, <span class=\"string\">&#x27;content&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElelment</span>(<span class=\"string\">&#x27;root&#x27;</span>).<span class=\"title function_\">appendChild</span>(<span class=\"title function_\">render</span>(vnode));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>到此，React的VDOM产生真实DOM的整个过程已经可以粗糙的模拟出来，对VDOM的了解也更进一步。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://images.pexels.com/photos/1056555/pexels-photo-1056555.jpeg?cs=srgb&dl=abstract-arms-art-1056555.jpg&fm=jpg\" alt=\"rs\"></p>\n<h1 id=\"垒积木之实现一个MiniReact\"><a href=\"#垒积木之实现一个MiniReact\" class=\"headerlink\" title=\"垒积木之实现一个MiniReact\"></a>垒积木之实现一个MiniReact</h1><blockquote>\n<p>最近在学习React source code， 一点一点的总算是啃完了，于是也想实现一个React的lib，不求事无巨细的实现框架的每一个细节，希望能体现React的精髓帮助学习。</p>\n</blockquote>\n<h3 id=\"以一个hello-world开始实现virtual-dom\"><a href=\"#以一个hello-world开始实现virtual-dom\" class=\"headerlink\" title=\"以一个hello world开始实现virtual dom\"></a>以一个hello world开始实现virtual dom</h3><p>如果我们写一个React的App，代码可能是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        \t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Hello</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSX 最后会被编译成形如</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Hello World&#x27;</span>),</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所以，一个React Component 起点就是createElement方法，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVDOM</span>(<span class=\"params\">type, props, contArg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content, args;</span><br><span class=\"line\">    content = contArg || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 生成抽象DOM结构。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">vDom</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">       \t<span class=\"attr\">key</span>: props.<span class=\"property\">key</span> || <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: props || &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">content</span>: [&#123;<span class=\"attr\">text</span>: content&#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render method</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">vDOM</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vDOM.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(vDOM.<span class=\"property\">text</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vDOM.<span class=\"property\">vDom</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;vDom, type, key, props, content&#125; = vDOM;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> type === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">             node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;content&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"title function_\">appendChildren</span>(node, <span class=\"title function_\">render</span>(content));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendChildren 方法插入节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">appendChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  parent,</span></span><br><span class=\"line\"><span class=\"params\">  children,</span></span><br><span class=\"line\"><span class=\"params\">  start = <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"params\">  end = children.length - <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"params\">  beforeNode</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = children[start++];</span><br><span class=\"line\">    parent.<span class=\"title function_\">insertBefore</span>(<span class=\"title function_\">mount</span>(ch), beforeNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拥有了这三个基本的方法我们就可以完成一个，简单的hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vDOM = <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElelment</span>(<span class=\"string\">&#x27;root&#x27;</span>).<span class=\"title function_\">appendChild</span>(<span class=\"title function_\">render</span>(vDOM));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"增加-Props的支持\"><a href=\"#增加-Props的支持\" class=\"headerlink\" title=\"增加 Props的支持\"></a>增加 Props的支持</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVDOM</span>(<span class=\"params\">type, props, contArg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content, args;</span><br><span class=\"line\">    <span class=\"comment\">// 生成抽象DOM结构。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> type !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理嵌套逻辑</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        content = [&#123; <span class=\"attr\">_text</span>: contArg == <span class=\"literal\">null</span> ? <span class=\"string\">&quot;&quot;</span> : contArg &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">vDom</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">       \t<span class=\"attr\">key</span>: props.<span class=\"property\">key</span> || <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: props || &#123;&#125;,</span><br><span class=\"line\">        content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render method</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">vDOM</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vDOM.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(vDOM.<span class=\"property\">text</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vDOM.<span class=\"property\">vDom</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;vDom, type, key, props, content&#125; = vDOM;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> type === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">             node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(_.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;content&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"title function_\">appendChildren</span>(node, <span class=\"title function_\">render</span>(content));</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> vnode = <span class=\"title function_\">type</span>(props, content);</span><br><span class=\"line\">            node = <span class=\"title function_\">mount</span>(vnode);</span><br><span class=\"line\">            vDOM.<span class=\"property\">text</span> = vnode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendChildren 方法插入节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">appendChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  parent,</span></span><br><span class=\"line\"><span class=\"params\">  children,</span></span><br><span class=\"line\"><span class=\"params\">  start = <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"params\">  end = children.length - <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"params\">  beforeNode</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = children[start++];</span><br><span class=\"line\">    parent.<span class=\"title function_\">insertBefore</span>(<span class=\"title function_\">mount</span>(ch), beforeNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过对function的分流，可以讲props以回调的形式交给render函数处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">vDOM</span> = (<span class=\"params\">props</span>) =&gt; <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"string\">`hello <span class=\"subst\">$&#123;props.name&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"title function_\">createVDOM</span>(vDOM, &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;mark&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElelment</span>(<span class=\"string\">&#x27;root&#x27;</span>).<span class=\"title function_\">appendChild</span>(<span class=\"title function_\">render</span>(div));</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"添加多节点的处理\"><a href=\"#添加多节点的处理\" class=\"headerlink\" title=\"添加多节点的处理\"></a>添加多节点的处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVDOM</span>(<span class=\"params\">type, props, contArg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content, args;</span><br><span class=\"line\">    <span class=\"comment\">// contArg参数的数量，做判断</span></span><br><span class=\"line\">    args = <span class=\"variable language_\">arguments</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 生成抽象DOM结构。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> type !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理嵌套逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(args == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            content = contArg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            args = <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">              args[i] = <span class=\"variable language_\">arguments</span>[i + <span class=\"number\">2</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            content = <span class=\"title function_\">maybeFlatten</span>(args, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            content = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        content = [&#123; <span class=\"attr\">_text</span>: contArg == <span class=\"literal\">null</span> ? <span class=\"string\">&quot;&quot;</span> : contArg &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">vDom</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">       \t<span class=\"attr\">key</span>: props.<span class=\"property\">key</span> || <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: props || &#123;&#125;,</span><br><span class=\"line\">        content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//压平</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maybeFlatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ch = arr[i];</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (!ch.<span class=\"property\">vDom</span>) &#123;</span><br><span class=\"line\">      arr[i] = &#123; <span class=\"attr\">_text</span>: ch == <span class=\"literal\">null</span> ? <span class=\"string\">&quot;&quot;</span> : ch &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render method</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">vDOM</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vDOM.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(vDOM.<span class=\"property\">text</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vDOM.<span class=\"property\">vDom</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;vDom, type, key, props, content&#125; = vDOM;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> type === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">             node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(_.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;content&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"title function_\">appendChildren</span>(node, <span class=\"title function_\">render</span>(content));</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> vnode = <span class=\"title function_\">type</span>(props, content);</span><br><span class=\"line\">            node = <span class=\"title function_\">mount</span>(vnode);</span><br><span class=\"line\">            vDOM.<span class=\"property\">text</span> = vnode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendChildren 方法插入节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">appendChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  parent,</span></span><br><span class=\"line\"><span class=\"params\">  children,</span></span><br><span class=\"line\"><span class=\"params\">  start = <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"params\">  end = children.length - <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"params\">  beforeNode</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = children[start++];</span><br><span class=\"line\">    parent.<span class=\"title function_\">insertBefore</span>(<span class=\"title function_\">mount</span>(ch), beforeNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过对function的分流，可以讲props以回调的形式交给render函数处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 支持参数数组多节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Box</span>(<span class=\"params\">props, content</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;div&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;h1&#x27;</span>, <span class=\"literal\">null</span>, props.<span class=\"property\">title</span>), <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, content));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vnode = <span class=\"title function_\">createVDOM</span>(<span class=\"string\">&#x27;div&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"title function_\">createVDOM</span>(<span class=\"title class_\">Box</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Fancy Box&#x27;</span> &#125;, <span class=\"string\">&#x27;content&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElelment</span>(<span class=\"string\">&#x27;root&#x27;</span>).<span class=\"title function_\">appendChild</span>(<span class=\"title function_\">render</span>(vnode));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>到此，React的VDOM产生真实DOM的整个过程已经可以粗糙的模拟出来，对VDOM的了解也更进一步。</p>\n"},{"title":"混合继承","date":"2017-01-12T16:00:00.000Z","_content":"# 混合继承\n\n```javascript\n/*  var obj =new Object();      //用于创建对象的\n\n  console.log(obj.constructor );  //检测实例的构造函数是哪个\n\n                  //实例会将对象中所有的属性都拷贝一份\n\n  function obj1 () {\n\n    this.name = \"mark\"\n\n  }\n\n  obj.constructor = obj1.constructor;\n\n  console.log(obj.constructor);//是构造函数的一个隐藏属性*/\n\n  //对象是function的一个实例\n\n  //原型属性和方法被所有实例共享\n\n  //被创造出来就具备prototype 和 constructor 和function对象中的一切属性和方法\n\n  //实例化的时候会拷贝构造函数中的方法\n\n  //prototype中保存的是地址 将实力和原型联系在一起\n\n  //指向相关就是指向地址\n\n  function man () {\n\n    this.dick = \"big\"\n\n  }\n\n  man.prototype = {\n\n    funk : function () {\n\n      console.log('每秒一百下');\n\n    }\n\n  }\n\n  var black = new man();\n\n  var white = new man();\n\n//当调用一个方法时首先在自己的prototype中查找 ，找不到时沿着construct 中的 proto向父类的原型中去寻找\n\n//prototype 包含一个对象的构造方式和自己的方法\n\n//delete 暴露原型\n\n  console.log(black.proto === man.prototype);\n\n</script\n\n正则 注册  formatString的实现\n\n/*var html = template(\"jsId{{}}\",\"json\")\n\ndocument.getElementById(\"htmlId\").innerHtml = html*/\n\n模板\n\n//简易模板\n\nvar data = [\n\n  {\n\n    \"name\" : :\"mark\",\n\n    \"age\" : 25},\n\n  {\n\n    \"name\" : :\"mark\",\n\n    \"age\" : 25},\n\n  {\n\n    \"name\" : :\"mark\",\n\n    \"age\" : 25}]\n\n  var source = \"<h1>{{name}}</h1>\"+\n\n         \"<h1>{{age}}</h1>\"\n\n  var render = template.compile(source);\n\n  var html = render(data);\n\n  function Temp (source,data) {\n\n    var render = template.compile(source);\n\n    var html = render(data);\n\n    return html\n\n  }\n\n-----------------------------------------------\n\nvar a = function () {\n\n  this.say = function () {\n\n    alert(1);\n\n  }\n\n}\n\nvar bb = new a();\n\nvar cc = {\n\n  \"say\" : function(){\n\n    alert(1);\n\n  }\n\n}\n\ncc.proto = a.prototype\n\nbb.say();//1\n\ncc.say();//1\n\n```\n\n\n\n***!!!!构造函数不通过__proto__ 继承***\n\n***！！new 实例一个函数  1新建对象  2让新建对象的__PROTO__ 指向 prototype（原型只继承原型内的 ， 不继承构造函数中的内容） 3继承方法***\n\n***1只有函数对象拥有原型属性***\n\n***2Foo.prototype = {}会创建一个对象导致 原型内的隐式属性发生变化改变构造器的内容  由Foo 变至 Object***                      \n\n![image-20210326174456631](https://technologybook.tech/assets/img/image-20210326174456631.png)\n\n\\#构造函数\n\n\n![image-20210326174535252](https://technologybook.tech/assets/img/image-20210326174535252.png)","source":"_posts/PROTOTYPE.md","raw":"title: 混合继承\ndate: 2017/01/13\ncategories:\n- js\ntags:\n- js\n\n---\n# 混合继承\n\n```javascript\n/*  var obj =new Object();      //用于创建对象的\n\n  console.log(obj.constructor );  //检测实例的构造函数是哪个\n\n                  //实例会将对象中所有的属性都拷贝一份\n\n  function obj1 () {\n\n    this.name = \"mark\"\n\n  }\n\n  obj.constructor = obj1.constructor;\n\n  console.log(obj.constructor);//是构造函数的一个隐藏属性*/\n\n  //对象是function的一个实例\n\n  //原型属性和方法被所有实例共享\n\n  //被创造出来就具备prototype 和 constructor 和function对象中的一切属性和方法\n\n  //实例化的时候会拷贝构造函数中的方法\n\n  //prototype中保存的是地址 将实力和原型联系在一起\n\n  //指向相关就是指向地址\n\n  function man () {\n\n    this.dick = \"big\"\n\n  }\n\n  man.prototype = {\n\n    funk : function () {\n\n      console.log('每秒一百下');\n\n    }\n\n  }\n\n  var black = new man();\n\n  var white = new man();\n\n//当调用一个方法时首先在自己的prototype中查找 ，找不到时沿着construct 中的 proto向父类的原型中去寻找\n\n//prototype 包含一个对象的构造方式和自己的方法\n\n//delete 暴露原型\n\n  console.log(black.proto === man.prototype);\n\n</script\n\n正则 注册  formatString的实现\n\n/*var html = template(\"jsId{{}}\",\"json\")\n\ndocument.getElementById(\"htmlId\").innerHtml = html*/\n\n模板\n\n//简易模板\n\nvar data = [\n\n  {\n\n    \"name\" : :\"mark\",\n\n    \"age\" : 25},\n\n  {\n\n    \"name\" : :\"mark\",\n\n    \"age\" : 25},\n\n  {\n\n    \"name\" : :\"mark\",\n\n    \"age\" : 25}]\n\n  var source = \"<h1>{{name}}</h1>\"+\n\n         \"<h1>{{age}}</h1>\"\n\n  var render = template.compile(source);\n\n  var html = render(data);\n\n  function Temp (source,data) {\n\n    var render = template.compile(source);\n\n    var html = render(data);\n\n    return html\n\n  }\n\n-----------------------------------------------\n\nvar a = function () {\n\n  this.say = function () {\n\n    alert(1);\n\n  }\n\n}\n\nvar bb = new a();\n\nvar cc = {\n\n  \"say\" : function(){\n\n    alert(1);\n\n  }\n\n}\n\ncc.proto = a.prototype\n\nbb.say();//1\n\ncc.say();//1\n\n```\n\n\n\n***!!!!构造函数不通过__proto__ 继承***\n\n***！！new 实例一个函数  1新建对象  2让新建对象的__PROTO__ 指向 prototype（原型只继承原型内的 ， 不继承构造函数中的内容） 3继承方法***\n\n***1只有函数对象拥有原型属性***\n\n***2Foo.prototype = {}会创建一个对象导致 原型内的隐式属性发生变化改变构造器的内容  由Foo 变至 Object***                      \n\n![image-20210326174456631](https://technologybook.tech/assets/img/image-20210326174456631.png)\n\n\\#构造函数\n\n\n![image-20210326174535252](https://technologybook.tech/assets/img/image-20210326174535252.png)","slug":"PROTOTYPE","published":1,"updated":"2024-04-10T17:46:25.875Z","_id":"cluvjqdds001g0wpd3kxgg4c2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"混合继承\"><a href=\"#混合继承\" class=\"headerlink\" title=\"混合继承\"></a>混合继承</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  var obj =new Object();      //用于创建对象的</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  console.log(obj.constructor );  //检测实例的构造函数是哪个</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                  //实例会将对象中所有的属性都拷贝一份</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  function obj1 () &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    this.name = &quot;mark&quot;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  obj.constructor = obj1.constructor;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  console.log(obj.constructor);//是构造函数的一个隐藏属性*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//对象是function的一个实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//原型属性和方法被所有实例共享</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//被创造出来就具备prototype 和 constructor 和function对象中的一切属性和方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//实例化的时候会拷贝构造函数中的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//prototype中保存的是地址 将实力和原型联系在一起</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//指向相关就是指向地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">man</span> () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dick</span> = <span class=\"string\">&quot;big&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  man.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    funk : <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;每秒一百下&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> black = <span class=\"keyword\">new</span> <span class=\"title function_\">man</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> white = <span class=\"keyword\">new</span> <span class=\"title function_\">man</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当调用一个方法时首先在自己的prototype中查找 ，找不到时沿着construct 中的 proto向父类的原型中去寻找</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//prototype 包含一个对象的构造方式和自己的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delete 暴露原型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(black.<span class=\"property\">proto</span> === man.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script</span><br><span class=\"line\"></span><br><span class=\"line\">正则 注册  formatString的实现</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*var html = template(&quot;jsId&#123;&#123;&#125;&#125;&quot;,&quot;json&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">document.getElementById(&quot;htmlId&quot;).innerHtml = html*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">模板</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简易模板</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : :<span class=\"string\">&quot;mark&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">25</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : :<span class=\"string\">&quot;mark&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">25</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : :<span class=\"string\">&quot;mark&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">25</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> source = <span class=\"string\">&quot;&lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;&quot;</span>+</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"string\">&quot;&lt;h1&gt;&#123;&#123;age&#125;&#125;&lt;/h1&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> render = template.<span class=\"title function_\">compile</span>(source);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> html = <span class=\"title function_\">render</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">Temp</span> (source,data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> render = template.<span class=\"title function_\">compile</span>(source);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> html = <span class=\"title function_\">render</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> html</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"keyword\">new</span> <span class=\"title function_\">a</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cc = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&quot;say&quot;</span> : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cc.<span class=\"property\">proto</span> = a.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">bb.<span class=\"title function_\">say</span>();<span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">cc.<span class=\"title function_\">say</span>();<span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><em><strong>!!!!构造函数不通过__proto__ 继承</strong></em></p>\n<p><em><strong>！！new 实例一个函数  1新建对象  2让新建对象的__PROTO__ 指向 prototype（原型只继承原型内的 ， 不继承构造函数中的内容） 3继承方法</strong></em></p>\n<p><em><strong>1只有函数对象拥有原型属性</strong></em></p>\n<p><em><strong>2Foo.prototype &#x3D; {}会创建一个对象导致 原型内的隐式属性发生变化改变构造器的内容  由Foo 变至 Object</strong></em>                      </p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210326174456631.png\" alt=\"image-20210326174456631\"></p>\n<p>#构造函数</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210326174535252.png\" alt=\"image-20210326174535252\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"混合继承\"><a href=\"#混合继承\" class=\"headerlink\" title=\"混合继承\"></a>混合继承</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  var obj =new Object();      //用于创建对象的</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  console.log(obj.constructor );  //检测实例的构造函数是哪个</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                  //实例会将对象中所有的属性都拷贝一份</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  function obj1 () &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    this.name = &quot;mark&quot;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  obj.constructor = obj1.constructor;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  console.log(obj.constructor);//是构造函数的一个隐藏属性*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//对象是function的一个实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//原型属性和方法被所有实例共享</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//被创造出来就具备prototype 和 constructor 和function对象中的一切属性和方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//实例化的时候会拷贝构造函数中的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//prototype中保存的是地址 将实力和原型联系在一起</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//指向相关就是指向地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">man</span> () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dick</span> = <span class=\"string\">&quot;big&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  man.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    funk : <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;每秒一百下&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> black = <span class=\"keyword\">new</span> <span class=\"title function_\">man</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> white = <span class=\"keyword\">new</span> <span class=\"title function_\">man</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当调用一个方法时首先在自己的prototype中查找 ，找不到时沿着construct 中的 proto向父类的原型中去寻找</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//prototype 包含一个对象的构造方式和自己的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delete 暴露原型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(black.<span class=\"property\">proto</span> === man.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script</span><br><span class=\"line\"></span><br><span class=\"line\">正则 注册  formatString的实现</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*var html = template(&quot;jsId&#123;&#123;&#125;&#125;&quot;,&quot;json&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">document.getElementById(&quot;htmlId&quot;).innerHtml = html*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">模板</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简易模板</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : :<span class=\"string\">&quot;mark&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">25</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : :<span class=\"string\">&quot;mark&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">25</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : :<span class=\"string\">&quot;mark&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">25</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> source = <span class=\"string\">&quot;&lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;&quot;</span>+</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"string\">&quot;&lt;h1&gt;&#123;&#123;age&#125;&#125;&lt;/h1&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> render = template.<span class=\"title function_\">compile</span>(source);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> html = <span class=\"title function_\">render</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">Temp</span> (source,data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> render = template.<span class=\"title function_\">compile</span>(source);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> html = <span class=\"title function_\">render</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> html</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"keyword\">new</span> <span class=\"title function_\">a</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cc = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&quot;say&quot;</span> : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cc.<span class=\"property\">proto</span> = a.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">bb.<span class=\"title function_\">say</span>();<span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">cc.<span class=\"title function_\">say</span>();<span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><em><strong>!!!!构造函数不通过__proto__ 继承</strong></em></p>\n<p><em><strong>！！new 实例一个函数  1新建对象  2让新建对象的__PROTO__ 指向 prototype（原型只继承原型内的 ， 不继承构造函数中的内容） 3继承方法</strong></em></p>\n<p><em><strong>1只有函数对象拥有原型属性</strong></em></p>\n<p><em><strong>2Foo.prototype &#x3D; {}会创建一个对象导致 原型内的隐式属性发生变化改变构造器的内容  由Foo 变至 Object</strong></em>                      </p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210326174456631.png\" alt=\"image-20210326174456631\"></p>\n<p>#构造函数</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210326174535252.png\" alt=\"image-20210326174535252\"></p>\n"},{"title":"React 系列（virtual DOM）","date":"2017-11-18T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/react.png","_content":"\n# React 系列（virtual DOM）\n\n> 一直以来，vDom以及react的diff算法都被认为是react性能的保障，二者相辅相成，构建高性能react base app发挥着作用，为了更深入的对react的了解，遂对react实现方式进行一次探究\n\n\tVDom之所以存在的原因，是由于传统的直接操作DOM的方式过于低效。根据浏览器的工作方式，操作一个DOM的过程如下:\n\n### DOM render process\n\n+ render engine 会解析HTML文件，生成DOM tree\n+ render style 创建 解释样式的 render tree\n+ reflow 根据renderer对象，分配一组屏幕坐标值\n+ painting 调用处理UI的API吊起GUI线程完成绘制\n\n而操作一个Vdom的过程则是：\n\n### Virtual DOM render process\n\n+ 对DOM信息进行抽象\n+ 修改节点时不会每次都重绘，把多次对Vdom的操作整合\n+ 调用DOM API （createElement， inserBfore等等。。）\n+ DOM render process\n\n可以看出Vdom是由于真实DOM操作成本过高的一种解决方案，Vdom是对dom的一种抽象，这个过程大大的优化了频繁操作DOM的成本。\n\n#### Vdom的模型\n\n> 简而言之Vdom是对real DOM 的抽象\n\n一个VDOM需要具备描述节点类型，传递节点信息，传递子节点信息的能力。\n\n```javascript\n// ReactElement描述的节点信息\n{\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    _owner: owner,\n  }\n```\n\n通过createElement创建Vdom的过程\n![vd](https://camo.githubusercontent.com/ad7c297c15083efd21c946cc23bd064a083d11be/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f31317567425477446b716e3670326e35466b7073317033456c70385a546f49527a587a764d344c4a4d5961552f7075623f773d35343326683d323239)\n\n```javascript\n// react source code \nexport function createElement(type, config, children) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n  let self = null;\n  let source = null;\n// 省略。。。\n  return ReactElement(\n    type,\n    key,\n    ref,\n    self,\n    source,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n    \n// reactElement 创建\nconst ReactElement = function(type, key, ref, self, source, owner, props) {\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner,\n  };\n    // ...\n```\n\n​\treact 会根据组件的Type来判断，组件是文字节点，标签，或是自定义组件，然后通过递归组件type并调用DOMAPI，createElement方法或createText生成real dom，最终返回一个真正意义上的DOM。\n\n在得到了一个Vdom的情况下需要进行vdom -> dom的转化，这个过程在源码中：\n\n```javascript\n// 在新架构之前ReactElement会调用一个instantiateReactComponent方法去处理相关逻辑\n// 在最新的版本中createElement$1负责构建DOM tree\nfunction createElement$1(type, props, rootContainerElement, parentNamespace) {\n  var isCustomComponentTag = void 0;\n// 在父容器的命名空间中创建标记\n// 标签没有命名空间。\n  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);\n  var domElement = void 0;\n  var namespaceURI = parentNamespace;\n  if (namespaceURI === HTML_NAMESPACE) {\n    namespaceURI = getIntrinsicNamespace(type);\n  }\n  if (namespaceURI === HTML_NAMESPACE) {\n    {\n      isCustomComponentTag = isCustomComponent(type, props);\n      // 判断是否是自定义Component或命名规范 \n      !(isCustomComponentTag || type === type.toLowerCase()) ? warning(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;\n    }\n\n    if (type === 'script') {\n      var div = ownerDocument.createElement('div');\n      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line\n      // 确保产生一个script\n      var firstChild = div.firstChild;\n      domElement = div.removeChild(firstChild);\n    } else if (typeof props.is === 'string') {\n        // 根据Type创建标签\n      domElement = ownerDocument.createElement(type, { is: props.is });\n    } else {\n      domElement = ownerDocument.createElement(type);\n    }\n  } else {\n    domElement = ownerDocument.createElementNS(namespaceURI, type);\n  }\n\n  {\n    if (namespaceURI === HTML_NAMESPACE) {\n      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {\n        warnedUnknownTags[type] = true;\n        warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);\n      }\n    }\n  }\n\n  return domElement;\n}\n\n```\n\n包括生成Text的方法，以及跳出递归的条件\n\n```\n// 生成TextNode的源码\nfunction createTextNode$1(text, rootContainerElement) {\n  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);\n}\nfunction getOwnerDocumentFromRootContainer(rootContainerElement) {\n  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n}\n```\n\nText作为React递归非错误的跳出条件，逻辑很简单。\n\n```\nfunction batchedUpdates（fn，bookkeeping）{\n   if（isBatching）{\n     //在restore state之前完全完成时，等待batching。\n     return fn（bookkeeping）;\n  }\n   isBatching = true;\n   try{\n     return _batchedUpdates（fn，bookkeeping）;\n   } finally {\n     //等到所有更新都传播完毕\n     //恢复受控组件的状态。\n     isBatching = false;\n     var controlledComponentsHavePendingUpdates = needsStateRestore（）;\n     if（controlledComponentsHavePendingUpdates）{\n       //如果触发了受控事件，需要恢复状态\n       // DOM节点返回受控值。\n       //确保没有操作DOM的情况。\n      _flushInteractiveUpdates（）;\n      restoreStateIfNeeded（）;\n    }\n  }\n}\n```\n\n至此react 从Vdom到dom的创建过程已经明了，当然React还包含了一套事件绑定机制，和充分利用rest 线程的fiber架构等等。","source":"_posts/ReactVdom.md","raw":"---\ntitle: React 系列（virtual DOM）\ndate: 2017/11/19\ncover: https://technologybook.tech/assets/img/react.png\ncategories:\n- react\ntags: \n- react source\n\n---\n\n# React 系列（virtual DOM）\n\n> 一直以来，vDom以及react的diff算法都被认为是react性能的保障，二者相辅相成，构建高性能react base app发挥着作用，为了更深入的对react的了解，遂对react实现方式进行一次探究\n\n\tVDom之所以存在的原因，是由于传统的直接操作DOM的方式过于低效。根据浏览器的工作方式，操作一个DOM的过程如下:\n\n### DOM render process\n\n+ render engine 会解析HTML文件，生成DOM tree\n+ render style 创建 解释样式的 render tree\n+ reflow 根据renderer对象，分配一组屏幕坐标值\n+ painting 调用处理UI的API吊起GUI线程完成绘制\n\n而操作一个Vdom的过程则是：\n\n### Virtual DOM render process\n\n+ 对DOM信息进行抽象\n+ 修改节点时不会每次都重绘，把多次对Vdom的操作整合\n+ 调用DOM API （createElement， inserBfore等等。。）\n+ DOM render process\n\n可以看出Vdom是由于真实DOM操作成本过高的一种解决方案，Vdom是对dom的一种抽象，这个过程大大的优化了频繁操作DOM的成本。\n\n#### Vdom的模型\n\n> 简而言之Vdom是对real DOM 的抽象\n\n一个VDOM需要具备描述节点类型，传递节点信息，传递子节点信息的能力。\n\n```javascript\n// ReactElement描述的节点信息\n{\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    _owner: owner,\n  }\n```\n\n通过createElement创建Vdom的过程\n![vd](https://camo.githubusercontent.com/ad7c297c15083efd21c946cc23bd064a083d11be/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f31317567425477446b716e3670326e35466b7073317033456c70385a546f49527a587a764d344c4a4d5961552f7075623f773d35343326683d323239)\n\n```javascript\n// react source code \nexport function createElement(type, config, children) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n  let self = null;\n  let source = null;\n// 省略。。。\n  return ReactElement(\n    type,\n    key,\n    ref,\n    self,\n    source,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n    \n// reactElement 创建\nconst ReactElement = function(type, key, ref, self, source, owner, props) {\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner,\n  };\n    // ...\n```\n\n​\treact 会根据组件的Type来判断，组件是文字节点，标签，或是自定义组件，然后通过递归组件type并调用DOMAPI，createElement方法或createText生成real dom，最终返回一个真正意义上的DOM。\n\n在得到了一个Vdom的情况下需要进行vdom -> dom的转化，这个过程在源码中：\n\n```javascript\n// 在新架构之前ReactElement会调用一个instantiateReactComponent方法去处理相关逻辑\n// 在最新的版本中createElement$1负责构建DOM tree\nfunction createElement$1(type, props, rootContainerElement, parentNamespace) {\n  var isCustomComponentTag = void 0;\n// 在父容器的命名空间中创建标记\n// 标签没有命名空间。\n  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);\n  var domElement = void 0;\n  var namespaceURI = parentNamespace;\n  if (namespaceURI === HTML_NAMESPACE) {\n    namespaceURI = getIntrinsicNamespace(type);\n  }\n  if (namespaceURI === HTML_NAMESPACE) {\n    {\n      isCustomComponentTag = isCustomComponent(type, props);\n      // 判断是否是自定义Component或命名规范 \n      !(isCustomComponentTag || type === type.toLowerCase()) ? warning(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;\n    }\n\n    if (type === 'script') {\n      var div = ownerDocument.createElement('div');\n      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line\n      // 确保产生一个script\n      var firstChild = div.firstChild;\n      domElement = div.removeChild(firstChild);\n    } else if (typeof props.is === 'string') {\n        // 根据Type创建标签\n      domElement = ownerDocument.createElement(type, { is: props.is });\n    } else {\n      domElement = ownerDocument.createElement(type);\n    }\n  } else {\n    domElement = ownerDocument.createElementNS(namespaceURI, type);\n  }\n\n  {\n    if (namespaceURI === HTML_NAMESPACE) {\n      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {\n        warnedUnknownTags[type] = true;\n        warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);\n      }\n    }\n  }\n\n  return domElement;\n}\n\n```\n\n包括生成Text的方法，以及跳出递归的条件\n\n```\n// 生成TextNode的源码\nfunction createTextNode$1(text, rootContainerElement) {\n  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);\n}\nfunction getOwnerDocumentFromRootContainer(rootContainerElement) {\n  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n}\n```\n\nText作为React递归非错误的跳出条件，逻辑很简单。\n\n```\nfunction batchedUpdates（fn，bookkeeping）{\n   if（isBatching）{\n     //在restore state之前完全完成时，等待batching。\n     return fn（bookkeeping）;\n  }\n   isBatching = true;\n   try{\n     return _batchedUpdates（fn，bookkeeping）;\n   } finally {\n     //等到所有更新都传播完毕\n     //恢复受控组件的状态。\n     isBatching = false;\n     var controlledComponentsHavePendingUpdates = needsStateRestore（）;\n     if（controlledComponentsHavePendingUpdates）{\n       //如果触发了受控事件，需要恢复状态\n       // DOM节点返回受控值。\n       //确保没有操作DOM的情况。\n      _flushInteractiveUpdates（）;\n      restoreStateIfNeeded（）;\n    }\n  }\n}\n```\n\n至此react 从Vdom到dom的创建过程已经明了，当然React还包含了一套事件绑定机制，和充分利用rest 线程的fiber架构等等。","slug":"ReactVdom","published":1,"updated":"2024-04-10T17:46:25.876Z","_id":"cluvjqddt001h0wpdh2u91888","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"React-系列（virtual-DOM）\"><a href=\"#React-系列（virtual-DOM）\" class=\"headerlink\" title=\"React 系列（virtual DOM）\"></a>React 系列（virtual DOM）</h1><blockquote>\n<p>一直以来，vDom以及react的diff算法都被认为是react性能的保障，二者相辅相成，构建高性能react base app发挥着作用，为了更深入的对react的了解，遂对react实现方式进行一次探究</p>\n</blockquote>\n<pre><code>VDom之所以存在的原因，是由于传统的直接操作DOM的方式过于低效。根据浏览器的工作方式，操作一个DOM的过程如下:\n</code></pre>\n<h3 id=\"DOM-render-process\"><a href=\"#DOM-render-process\" class=\"headerlink\" title=\"DOM render process\"></a>DOM render process</h3><ul>\n<li>render engine 会解析HTML文件，生成DOM tree</li>\n<li>render style 创建 解释样式的 render tree</li>\n<li>reflow 根据renderer对象，分配一组屏幕坐标值</li>\n<li>painting 调用处理UI的API吊起GUI线程完成绘制</li>\n</ul>\n<p>而操作一个Vdom的过程则是：</p>\n<h3 id=\"Virtual-DOM-render-process\"><a href=\"#Virtual-DOM-render-process\" class=\"headerlink\" title=\"Virtual DOM render process\"></a>Virtual DOM render process</h3><ul>\n<li>对DOM信息进行抽象</li>\n<li>修改节点时不会每次都重绘，把多次对Vdom的操作整合</li>\n<li>调用DOM API （createElement， inserBfore等等。。）</li>\n<li>DOM render process</li>\n</ul>\n<p>可以看出Vdom是由于真实DOM操作成本过高的一种解决方案，Vdom是对dom的一种抽象，这个过程大大的优化了频繁操作DOM的成本。</p>\n<h4 id=\"Vdom的模型\"><a href=\"#Vdom的模型\" class=\"headerlink\" title=\"Vdom的模型\"></a>Vdom的模型</h4><blockquote>\n<p>简而言之Vdom是对real DOM 的抽象</p>\n</blockquote>\n<p>一个VDOM需要具备描述节点类型，传递节点信息，传递子节点信息的能力。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ReactElement描述的节点信息</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: type,</span><br><span class=\"line\">    <span class=\"attr\">key</span>: key,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: ref,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: props,</span><br><span class=\"line\">    <span class=\"attr\">_owner</span>: owner,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过createElement创建Vdom的过程<br><img src=\"https://camo.githubusercontent.com/ad7c297c15083efd21c946cc23bd064a083d11be/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f31317567425477446b716e3670326e35466b7073317033456c70385a546f49527a587a764d344c4a4d5961552f7075623f773d35343326683d323239\" alt=\"vd\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// react source code </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createElement</span>(<span class=\"params\">type, config, children</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> propName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Reserved names are extracted</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> self = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> source = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">// 省略。。。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">ReactElement</span>(</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    key,</span><br><span class=\"line\">    ref,</span><br><span class=\"line\">    self,</span><br><span class=\"line\">    source,</span><br><span class=\"line\">    <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span>,</span><br><span class=\"line\">    props,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// reactElement 创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ReactElement</span> = <span class=\"keyword\">function</span>(<span class=\"params\">type, key, ref, self, source, owner, props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This tag allows us to uniquely identify this as a React Element</span></span><br><span class=\"line\">    <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Built-in properties that belong on the element</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>: type,</span><br><span class=\"line\">    <span class=\"attr\">key</span>: key,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: ref,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: props,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Record the component responsible for creating this element.</span></span><br><span class=\"line\">    <span class=\"attr\">_owner</span>: owner,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>​\treact 会根据组件的Type来判断，组件是文字节点，标签，或是自定义组件，然后通过递归组件type并调用DOMAPI，createElement方法或createText生成real dom，最终返回一个真正意义上的DOM。</p>\n<p>在得到了一个Vdom的情况下需要进行vdom -&gt; dom的转化，这个过程在源码中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在新架构之前ReactElement会调用一个instantiateReactComponent方法去处理相关逻辑</span></span><br><span class=\"line\"><span class=\"comment\">// 在最新的版本中createElement$1负责构建DOM tree</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createElement$1</span>(<span class=\"params\">type, props, rootContainerElement, parentNamespace</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isCustomComponentTag = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在父容器的命名空间中创建标记</span></span><br><span class=\"line\"><span class=\"comment\">// 标签没有命名空间。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ownerDocument = <span class=\"title function_\">getOwnerDocumentFromRootContainer</span>(rootContainerElement);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> domElement = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> namespaceURI = parentNamespace;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (namespaceURI === <span class=\"variable constant_\">HTML_NAMESPACE</span>) &#123;</span><br><span class=\"line\">    namespaceURI = <span class=\"title function_\">getIntrinsicNamespace</span>(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (namespaceURI === <span class=\"variable constant_\">HTML_NAMESPACE</span>) &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      isCustomComponentTag = <span class=\"title function_\">isCustomComponent</span>(type, props);</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否是自定义Component或命名规范 </span></span><br><span class=\"line\">      !(isCustomComponentTag || type === type.<span class=\"title function_\">toLowerCase</span>()) ? <span class=\"title function_\">warning</span>(<span class=\"literal\">false</span>, <span class=\"string\">&#x27;&lt;%s /&gt; is using incorrect casing. &#x27;</span> + <span class=\"string\">&#x27;Use PascalCase for React components, &#x27;</span> + <span class=\"string\">&#x27;or lowercase for HTML elements.&#x27;</span>, type) : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;script&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> div = ownerDocument.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">      div.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&lt;script&gt;&lt;&#x27;</span> + <span class=\"string\">&#x27;/script&gt;&#x27;</span>; <span class=\"comment\">// eslint-disable-line</span></span><br><span class=\"line\">      <span class=\"comment\">// 确保产生一个script</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> firstChild = div.<span class=\"property\">firstChild</span>;</span><br><span class=\"line\">      domElement = div.<span class=\"title function_\">removeChild</span>(firstChild);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props.<span class=\"property\">is</span> === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据Type创建标签</span></span><br><span class=\"line\">      domElement = ownerDocument.<span class=\"title function_\">createElement</span>(type, &#123; <span class=\"attr\">is</span>: props.<span class=\"property\">is</span> &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      domElement = ownerDocument.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    domElement = ownerDocument.<span class=\"title function_\">createElementNS</span>(namespaceURI, type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (namespaceURI === <span class=\"variable constant_\">HTML_NAMESPACE</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isCustomComponentTag &amp;&amp; <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(domElement) === <span class=\"string\">&#x27;[object HTMLUnknownElement]&#x27;</span> &amp;&amp; !<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(warnedUnknownTags, type)) &#123;</span><br><span class=\"line\">        warnedUnknownTags[type] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">warning</span>(<span class=\"literal\">false</span>, <span class=\"string\">&#x27;The tag &lt;%s&gt; is unrecognized in this browser. &#x27;</span> + <span class=\"string\">&#x27;If you meant to render a React component, start its name with &#x27;</span> + <span class=\"string\">&#x27;an uppercase letter.&#x27;</span>, type);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> domElement;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>包括生成Text的方法，以及跳出递归的条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生成TextNode的源码</span><br><span class=\"line\">function createTextNode$1(text, rootContainerElement) &#123;</span><br><span class=\"line\">  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getOwnerDocumentFromRootContainer(rootContainerElement) &#123;</span><br><span class=\"line\">  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Text作为React递归非错误的跳出条件，逻辑很简单。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function batchedUpdates（fn，bookkeeping）&#123;</span><br><span class=\"line\">   if（isBatching）&#123;</span><br><span class=\"line\">     //在restore state之前完全完成时，等待batching。</span><br><span class=\"line\">     return fn（bookkeeping）;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   isBatching = true;</span><br><span class=\"line\">   try&#123;</span><br><span class=\"line\">     return _batchedUpdates（fn，bookkeeping）;</span><br><span class=\"line\">   &#125; finally &#123;</span><br><span class=\"line\">     //等到所有更新都传播完毕</span><br><span class=\"line\">     //恢复受控组件的状态。</span><br><span class=\"line\">     isBatching = false;</span><br><span class=\"line\">     var controlledComponentsHavePendingUpdates = needsStateRestore（）;</span><br><span class=\"line\">     if（controlledComponentsHavePendingUpdates）&#123;</span><br><span class=\"line\">       //如果触发了受控事件，需要恢复状态</span><br><span class=\"line\">       // DOM节点返回受控值。</span><br><span class=\"line\">       //确保没有操作DOM的情况。</span><br><span class=\"line\">      _flushInteractiveUpdates（）;</span><br><span class=\"line\">      restoreStateIfNeeded（）;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此react 从Vdom到dom的创建过程已经明了，当然React还包含了一套事件绑定机制，和充分利用rest 线程的fiber架构等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-系列（virtual-DOM）\"><a href=\"#React-系列（virtual-DOM）\" class=\"headerlink\" title=\"React 系列（virtual DOM）\"></a>React 系列（virtual DOM）</h1><blockquote>\n<p>一直以来，vDom以及react的diff算法都被认为是react性能的保障，二者相辅相成，构建高性能react base app发挥着作用，为了更深入的对react的了解，遂对react实现方式进行一次探究</p>\n</blockquote>\n<pre><code>VDom之所以存在的原因，是由于传统的直接操作DOM的方式过于低效。根据浏览器的工作方式，操作一个DOM的过程如下:\n</code></pre>\n<h3 id=\"DOM-render-process\"><a href=\"#DOM-render-process\" class=\"headerlink\" title=\"DOM render process\"></a>DOM render process</h3><ul>\n<li>render engine 会解析HTML文件，生成DOM tree</li>\n<li>render style 创建 解释样式的 render tree</li>\n<li>reflow 根据renderer对象，分配一组屏幕坐标值</li>\n<li>painting 调用处理UI的API吊起GUI线程完成绘制</li>\n</ul>\n<p>而操作一个Vdom的过程则是：</p>\n<h3 id=\"Virtual-DOM-render-process\"><a href=\"#Virtual-DOM-render-process\" class=\"headerlink\" title=\"Virtual DOM render process\"></a>Virtual DOM render process</h3><ul>\n<li>对DOM信息进行抽象</li>\n<li>修改节点时不会每次都重绘，把多次对Vdom的操作整合</li>\n<li>调用DOM API （createElement， inserBfore等等。。）</li>\n<li>DOM render process</li>\n</ul>\n<p>可以看出Vdom是由于真实DOM操作成本过高的一种解决方案，Vdom是对dom的一种抽象，这个过程大大的优化了频繁操作DOM的成本。</p>\n<h4 id=\"Vdom的模型\"><a href=\"#Vdom的模型\" class=\"headerlink\" title=\"Vdom的模型\"></a>Vdom的模型</h4><blockquote>\n<p>简而言之Vdom是对real DOM 的抽象</p>\n</blockquote>\n<p>一个VDOM需要具备描述节点类型，传递节点信息，传递子节点信息的能力。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ReactElement描述的节点信息</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: type,</span><br><span class=\"line\">    <span class=\"attr\">key</span>: key,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: ref,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: props,</span><br><span class=\"line\">    <span class=\"attr\">_owner</span>: owner,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过createElement创建Vdom的过程<br><img src=\"https://camo.githubusercontent.com/ad7c297c15083efd21c946cc23bd064a083d11be/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f31317567425477446b716e3670326e35466b7073317033456c70385a546f49527a587a764d344c4a4d5961552f7075623f773d35343326683d323239\" alt=\"vd\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// react source code </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createElement</span>(<span class=\"params\">type, config, children</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> propName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Reserved names are extracted</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> self = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> source = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">// 省略。。。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">ReactElement</span>(</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    key,</span><br><span class=\"line\">    ref,</span><br><span class=\"line\">    self,</span><br><span class=\"line\">    source,</span><br><span class=\"line\">    <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span>,</span><br><span class=\"line\">    props,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// reactElement 创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ReactElement</span> = <span class=\"keyword\">function</span>(<span class=\"params\">type, key, ref, self, source, owner, props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This tag allows us to uniquely identify this as a React Element</span></span><br><span class=\"line\">    <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Built-in properties that belong on the element</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>: type,</span><br><span class=\"line\">    <span class=\"attr\">key</span>: key,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: ref,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: props,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Record the component responsible for creating this element.</span></span><br><span class=\"line\">    <span class=\"attr\">_owner</span>: owner,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>​\treact 会根据组件的Type来判断，组件是文字节点，标签，或是自定义组件，然后通过递归组件type并调用DOMAPI，createElement方法或createText生成real dom，最终返回一个真正意义上的DOM。</p>\n<p>在得到了一个Vdom的情况下需要进行vdom -&gt; dom的转化，这个过程在源码中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在新架构之前ReactElement会调用一个instantiateReactComponent方法去处理相关逻辑</span></span><br><span class=\"line\"><span class=\"comment\">// 在最新的版本中createElement$1负责构建DOM tree</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createElement$1</span>(<span class=\"params\">type, props, rootContainerElement, parentNamespace</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isCustomComponentTag = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在父容器的命名空间中创建标记</span></span><br><span class=\"line\"><span class=\"comment\">// 标签没有命名空间。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ownerDocument = <span class=\"title function_\">getOwnerDocumentFromRootContainer</span>(rootContainerElement);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> domElement = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> namespaceURI = parentNamespace;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (namespaceURI === <span class=\"variable constant_\">HTML_NAMESPACE</span>) &#123;</span><br><span class=\"line\">    namespaceURI = <span class=\"title function_\">getIntrinsicNamespace</span>(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (namespaceURI === <span class=\"variable constant_\">HTML_NAMESPACE</span>) &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      isCustomComponentTag = <span class=\"title function_\">isCustomComponent</span>(type, props);</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否是自定义Component或命名规范 </span></span><br><span class=\"line\">      !(isCustomComponentTag || type === type.<span class=\"title function_\">toLowerCase</span>()) ? <span class=\"title function_\">warning</span>(<span class=\"literal\">false</span>, <span class=\"string\">&#x27;&lt;%s /&gt; is using incorrect casing. &#x27;</span> + <span class=\"string\">&#x27;Use PascalCase for React components, &#x27;</span> + <span class=\"string\">&#x27;or lowercase for HTML elements.&#x27;</span>, type) : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;script&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> div = ownerDocument.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">      div.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&lt;script&gt;&lt;&#x27;</span> + <span class=\"string\">&#x27;/script&gt;&#x27;</span>; <span class=\"comment\">// eslint-disable-line</span></span><br><span class=\"line\">      <span class=\"comment\">// 确保产生一个script</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> firstChild = div.<span class=\"property\">firstChild</span>;</span><br><span class=\"line\">      domElement = div.<span class=\"title function_\">removeChild</span>(firstChild);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props.<span class=\"property\">is</span> === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据Type创建标签</span></span><br><span class=\"line\">      domElement = ownerDocument.<span class=\"title function_\">createElement</span>(type, &#123; <span class=\"attr\">is</span>: props.<span class=\"property\">is</span> &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      domElement = ownerDocument.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    domElement = ownerDocument.<span class=\"title function_\">createElementNS</span>(namespaceURI, type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (namespaceURI === <span class=\"variable constant_\">HTML_NAMESPACE</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isCustomComponentTag &amp;&amp; <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(domElement) === <span class=\"string\">&#x27;[object HTMLUnknownElement]&#x27;</span> &amp;&amp; !<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(warnedUnknownTags, type)) &#123;</span><br><span class=\"line\">        warnedUnknownTags[type] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">warning</span>(<span class=\"literal\">false</span>, <span class=\"string\">&#x27;The tag &lt;%s&gt; is unrecognized in this browser. &#x27;</span> + <span class=\"string\">&#x27;If you meant to render a React component, start its name with &#x27;</span> + <span class=\"string\">&#x27;an uppercase letter.&#x27;</span>, type);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> domElement;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>包括生成Text的方法，以及跳出递归的条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生成TextNode的源码</span><br><span class=\"line\">function createTextNode$1(text, rootContainerElement) &#123;</span><br><span class=\"line\">  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getOwnerDocumentFromRootContainer(rootContainerElement) &#123;</span><br><span class=\"line\">  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Text作为React递归非错误的跳出条件，逻辑很简单。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function batchedUpdates（fn，bookkeeping）&#123;</span><br><span class=\"line\">   if（isBatching）&#123;</span><br><span class=\"line\">     //在restore state之前完全完成时，等待batching。</span><br><span class=\"line\">     return fn（bookkeeping）;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   isBatching = true;</span><br><span class=\"line\">   try&#123;</span><br><span class=\"line\">     return _batchedUpdates（fn，bookkeeping）;</span><br><span class=\"line\">   &#125; finally &#123;</span><br><span class=\"line\">     //等到所有更新都传播完毕</span><br><span class=\"line\">     //恢复受控组件的状态。</span><br><span class=\"line\">     isBatching = false;</span><br><span class=\"line\">     var controlledComponentsHavePendingUpdates = needsStateRestore（）;</span><br><span class=\"line\">     if（controlledComponentsHavePendingUpdates）&#123;</span><br><span class=\"line\">       //如果触发了受控事件，需要恢复状态</span><br><span class=\"line\">       // DOM节点返回受控值。</span><br><span class=\"line\">       //确保没有操作DOM的情况。</span><br><span class=\"line\">      _flushInteractiveUpdates（）;</span><br><span class=\"line\">      restoreStateIfNeeded（）;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此react 从Vdom到dom的创建过程已经明了，当然React还包含了一套事件绑定机制，和充分利用rest 线程的fiber架构等等。</p>\n"},{"title":"SSR","date":"2019-06-22T16:00:00.000Z","_content":"# React SSR \n\n> 转自fullstack\n\n**客户端渲染**：客户端渲染，页面初始加载的 HTML 页面中无网页展示内容，需要加载执行JavaScript 文件中的 React 代码，通过 JavaScript 渲染生成页面，同时，JavaScript 代码会完成页面交互事件的绑定\n\n**服务器端渲染**：用户请求服务器，服务器上直接生成 HTML 内容并返回给浏览器。服务器端渲染来，页面的内容是由 Server 端生成的。一般来说，服务器端渲染的页面交互能力有限，如果要实现复杂交互，还是要通过引入 JavaScript 文件来辅助实现。服务器端渲染这个概念，适用于任何后端语言。\n\n**同构**：同构这个概念存在于 Vue，React 这些新型的前端框架中，同构实际上是客户端渲染和服务器端渲染的一个整合。我们把页面的展示内容和交互写在一起，让代码执行两次。在服务器端执行一次，用于实现服务器端渲染，在客户端再执行一次，用于接管页面交互，\n\n一般情况下，当我们使用 React 编写代码时，页面都是由客户端执行 JavaScript 逻辑动态挂 DOM 生成的，也就是说这种普通的单页面应用实际上采用的是客户端渲染模式。在大多数情况下，客户端渲染完全能够满足我们的业务需求，那为什么我们还需要 SSR 这种同构技术呢？\n\n**使用 SSR 技术的主要因素：**\n\n1. CSR 项目的 TTFP（Time To First Page）时间比较长，参考之前的图例，在 CSR 的页面渲染流程中，首先要加载 HTML 文件，之后要下载页面所需的 JavaScript 文件，然后 JavaScript 文件渲染生成页面。在这个渲染过程中至少涉及到两个 HTTP 请求周期，所以会有一定的耗时，这也是为什么大家在低网速下访问普通的 React 或者 Vue 应用时，初始页面会有出现白屏的原因。\n2. CSR 项目的 SEO 能力极弱，在搜索引擎中基本上不可能有好的排名。因为目前大多数搜索引擎主要识别的内容还是 HTML，对 JavaScript 文件内容的识别都还比较弱。如果一个项目的流量入口来自于搜索引擎，这个时候你使用 CSR 进行开发，就非常不合适了。\n\nSSR 的产生，主要就是为了解决上面所说的两个问题。在 React 中使用 SSR 技术，我们让 React 代码在服务器端先执行一次，使得用户下载的 HTML 已经包含了所有的页面展示内容，这样，页面展示的过程只需要经历一个 HTTP 请求周期，TTFP 时间得到一倍以上的缩减。\n\n同时，由于 HTML 中已经包含了网页的所有内容，所以网页的 SEO 效果也会变的非常好。之后，我们让 React 代码在客户端再次执行，为 HTML 网页中的内容添加数据及事件的绑定，页面就具备了 React 的各种交互能力。\n\n但是，SSR 这种理念的实现，并非易事。我们来看一下在 React 中实现 SSR 技术的架构图：\n\n![3589620903-5bc7eb4147e8b_articlex.png](http://img.php.cn//upload/image/798/726/582/1539842432122199.png)\n\n使用 SSR 这种技术，将使原本简单的 React 项目变得非常复杂，项目的可维护性会降低，代码问题的追溯也会变得困难。\n\n所以，使用 SSR 在解决问题的同时，也会带来非常多的副作用，有的时候，这些副作用的伤害比起 SSR 技术带来的优势要大的多。从个人经验上来说，我一般建议大家，除非你的项目特别依赖搜索引擎流量，或者对首屏时间有特殊的要求，否则不建议使用 SSR。\n\n好，如果你确实遇到了 React 项目中要使用 SSR 的场景并决定使用 SSR，那么接下来我们就结合上面这张 SSR 架构图，开启 SSR 技术点的难点剖析。\n\n在开始之前，我们先来分析下虚拟 DOM 和 SSR 的关系。\n\n**SSR 之所以能够实现，本质上是因为虚拟 DOM 的存在**\n\n上面我们说过，SSR 的工程中，React 代码会在客户端和服务器端各执行一次。你可能会想，这没什么问题，都是 JavaScript 代码，既可以在浏览器上运行，又可以在 Node 环境下运行。但事实并非如此，如果你的 React 代码里，存在直接操作 DOM 的代码，那么就无法实现 SSR 这种技术了，因为在 Node 环境下，是没有 DOM 这个概念存在的，所以这些代码在 Node 环境下是会报错的。\n\n好在 React 框架中引入了一个概念叫做虚拟 DOM，虚拟 DOM 是真实 DOM 的一个 JavaScript 对象映射，React 在做页面操作时，实际上不是直接操作 DOM，而是操作虚拟 DOM，也就是操作普通的 JavaScript 对象，这就使得 SSR 成为了可能。在服务器，我可以操作 JavaScript 对象，判断环境是服务器环境，我们把虚拟 DOM 映射成字符串输出；在客户端，我也可以操作 JavaScript 对象，判断环境是客户端环境，我就直接将虚拟 DOM 映射成真实 DOM，完成页面挂载。\n\n其他的一些框架，比如 Vue，它能够实现 SSR 也是因为引入了和 React 中一样的虚拟 DOM 技术。\n\n好，接下来我们回过头看流程图，前两步不说了，服务器端渲染肯定要先向 Node 服务器发送请求。重点是第 3 步，大家可以看到，服务器端要根据请求的地址，判断要展示什么样的页面了，这一步叫做服务器端路由。\n\n我们再看第 10 步，当客户端接收到 JavaScript 文件后，要根据当前的路径，在浏览器上再判断当前要展示的组件，重新进行一次客户端渲染，这个时候，还要经历一次客户端路由（前端路由）。\n\n那么，我们下面要说的就是服务器端路由和客户端路由的区别。\n\n**SSR 中客户端渲染与服务器端渲染路由代码的差异**\n\n实现 React 的 SSR 架构，我们需要让相同的 React 代码在客户端和服务器端各执行一次。大家注意，这里说的相同的 React 代码，指的是我们写的各种组件代码，所以在同构中，只有组件的代码是可以公用的，而路由这样的代码是没有办法公用的，大家思考下这是为什么呢？其实原因很简单，在服务器端需要通过请求路径，找到路由组件，而在客户端需通过浏览器中的网址，找到路由组件，是完全不同的两套机制，所以这部分代码是肯定无法公用。我们来看看在 SSR 中，前后端路由的实现代码：\n\n服务器端路由代码相对要复杂一点，需要你把 location（当前请求路径）传递给 StaticRouter 组件，这样 StaticRouter 才能根据路径分析出当前所需要的组件是谁。\n\n通过 BrowserRouter 我们能够匹配到浏览器即将显示的路由组件，对浏览器来说，我们需要把组件转化成 DOM，所以需要我们使用 ReactDom.render 方法来进行 DOM 的挂载。而 StaticRouter 能够在服务器端匹配到将要显示的组件，对服务器端来说，我们要把组件转化成字符串，这时我们只需要调用 ReactDom 提供的 renderToString 方法，就可以得到 App 组件对应的 HTML 字符串。\n\n对于一个 React 应用来说，路由一般是整个程序的执行入口。在 SSR 中，服务器端的路由和客户端的路由不一样，也就意味着服务器端的入口代码和客户端的入口代码是不同的。\n\n我们知道， React 代码是要通过 Webpack 打包之后才能运行的，也就是第 3 步和第10 步运行的代码，实际上是源代码打包过后生成的代码。上面也说到，服务器端和客户端渲染中的代码，只有一部分一致，其余是有区别的。所以，针对代码运行环境的不同，要进行有区别的 Webpack 打包。\n\n**服务器端代码和客户端代码的打包差异**\n\n上面我们说了，在 SSR 中，服务器端渲染的代码和客户端的代码的入口路由代码是有差异的，所以在 Webpack 中，Entry 的配置首先肯定是不同的。\n\n在服务器端运行的代码，有时我们需要引入 Node 中的一些核心模块，我们需要 Webpack 做打包的时候能够识别出类似的核心模块，一旦发现是核心模块，不必把模块的代码合并到最终生成的代码中，解决这个问题的方法非常简单，在服务器端的 Webpack配置中，你只要加入 target: node 这个配置即可。\n\n服务器端渲染的代码，如果加载第三方模块，这些第三方模块也是不需要被打包到最终的源码中的，因为 Node 环境下通过 NPM 已经安装了这些包，直接引用就可以，不需要额外再打包到代码里。为了解决这个问题，我们可以使用 webpack-node-externals 这个插件，代码中的 nodeExternals 指的就是这个插件，通过这个插件，我们就能解决这个问题。关于 Node 这里的打包问题，可能看起来有些抽象，不是很明白的同学可以仔细读一下 webpack-node-externals 相关的文章或文档，你就能很好的明白这里存在的问题了。\n\n接下来我们继续分析，当我们的 React 代码中引入了一些 CSS 样式代码时，服务器端打包的过程会处理一遍 CSS，而客户端又会处理一遍。查看配置，我们可以看到，服务器端打包时我们用了 isomorphic-style-loader，它处理 CSS 的时候，只在对应的 DOM 元素上生成 class 类名，然后返回生成的 CSS 样式代码。\n\n而在客户端代码打包配置中，我们使用了 css-loader 和 style-loader，css-loader 不但会在 DOM 上生成 class 类名，解析好的 CSS 代码，还会通过 style-loader 把代码挂载到页面上。不过这么做，由于页面上的样式实际上最终是由客户端渲染时添加上的，所以页面可能会存在一开始没有样式的情况，为了解决这个问题， 我们可以在服务器端渲染时，拿到 isomorphic-style-loader 返回的样式代码，然后以字符串的形式添加到服务器端渲染的 HTML 之中。\n\n而对于图片等类型的文件引入，url-loader 也会在服务器端代码和客户端代码打包的过程中分别进行打包，这里，我偷了一个懒，无论服务器端打包还是客户端打包，我都让打包生成的文件存储在 public 目录下，这样，虽然文件会打包出来两遍，但是后打包出来的文件会覆盖之前的文件，所以看起来还是只有一份文件。\n\n当然，这样做的性能和优雅性并不高，只是给大家提供一个小的思路，如果想进行优化，你可以让图片的打包只进行一次，借助一些 Webpack 的插件，实现这个也并非难事，你甚至可以自己也写一个 loader，来解决这样的问题。\n\n如果你的 React 应用中没有异步数据的获取，单纯的做一些静态内容展示，经过上面的配置，你会发现一个简单的 SSR 应用很快的就可以被实现出来了。但是，真正的一个 React 项目中，我们肯定要有异步数据的获取，绝大多数情况下，我们还要使用 Redux 管理数据。而如果想在 SSR 应用中实现，就不是这么简单了。\n\n**SSR 中异步数据的获取 + Redux 的使用**\n\n客户端渲染中，异步数据结合 Redux 的使用方式遵循下面的流程（对应图中第 12 步）：\n\n1. 创建 Store\n2. 根据路由显示组件\n3. 派发 Action 获取数据\n4. 更新 Store 中的数据\n5. 组件 Rerender\n\n而在服务器端，页面一旦确定内容，就没有办法 Rerender 了，这就要求组件显示的时候，就要把 Store 的数据都准备好，所以服务器端异步数据结合 Redux 的使用方式，流程是下面的样子（对应图中第 4 步）：\n\n1. 创建 Store\n2. 根据路由分析 Store 中需要的数据\n3. 派发 Action 获取数据\n4. 更新Store 中的数据\n5. 结合数据和组件生成 HTML，一次性返回\n\n下面，我们分析下**服务器端渲染**这部分的流程：\n\n1. 创建 Store，然而在服务器端，这么写就有问题了，因为服务器端的 Store 是所有用户都要用的，如果像上面这样构建 Store，Store 变成了一个单例，所有用户共享 Store，显然就有问题了。所以在服务器端渲染中，Store 的创建应该像下面这样，返回一个函数，每个用户访问的时候，这个函数重新执行，为每个用户提供一个独立的 Store：\n\n1. 根据路由分析 Store 中需要的数据： 要想实现这个步骤，在服务器端，首先我们要分析当前出路由要加载的所有组件，这个时候我们可以借助一些第三方的包，比如说 react-router-config, 具体这个包怎么使用，不做过多说明，大家可以查看文档，使用这个包，传入服务器请求路径，它就会帮助你分析出这个路径下要展示的所有组件。\n2. 派发 Action 获取数据: 接下来，我们在每个组件上增加一个获取数据的方法：\n\n这个方法需要你把服务器端渲染的 Store 传递进来，它的作用就是帮助服务器端的 Store 获取到这个组件所需的数据。 所以，组件上有了这样的方法，同时我们也有当前路由所需要的所有组件，依次调用各个组件上的 loadData 方法，就能够获取到路由所需的所有数据内容了。\n\n1. 更新 Store 中的数据: 其实，当我们执行第三步的时候，已经在更新 Store 中的数据了，但是，我们要在生成 HTML 之前，保证所有的数据都获取完毕，这怎么处理呢？\n\n这里，我们使用 Promise 来解决这个问题，我们构建一个 Promise 队列，等待所有的 Promise 都执行结束后，也就是所有 store.dispatch 都执行完毕后，再去生成 HTML。这样的话，我们就实现了结合 Redux 的 SSR 流程。\n\n在上面，我们说到，服务器端渲染时，页面的数据是通过 loadData 函数来获取的。而在客户端，数据获取依然要做，因为如果这个页面是你访问的第一个页面，那么你看到的内容是服务器端渲染出来的，但是如果经过 react-router 路由跳转道第二个页面，那么这个页面就完全是客户端渲染出来的了，所以客户端也要去拿数据。\n\n在客户端获取数据，使用的是我们最习惯的方式，通过 componentDidMount 进行数据的获取。这里要注意的是，componentDidMount 只在客户端才会执行，在服务器端这个生命周期函数是不会执行的。所以我们不必担心 componentDidMount 和 loadData 会有冲突，放心使用即可。这也是为什么数据的获取应该放到 componentDidMount 这个生命周期函数中而不是 componentWillMount 中的原因，可以避免服务器端获取数据和客户端获取数据的冲突。\n\n**Node 只是一个中间层**\n\n上一部分我们说到了获取数据的问题，在 SSR 架构中，一般 Node 只是一个中间层，用来做 React 代码的服务器端渲染，而 Node 需要的数据通常由 API 服务器单独提供。\n\n这样做一是为了工程解耦，二也是为了规避 Node 服务器的一些计算性能问题。\n\n请大家关注图中的第 4 步和第 12，13 步，我们接下来分析这几个步骤。\n\n服务器端渲染时，直接请求 API 服务器的接口获取数据没有任何问题。但是在客户端，就有可能存在跨域的问题了，所以，这个时候，我们需要在服务器端搭建 Proxy 代理功能，客户端不直接请求 API 服务器，而是请求 Node 服务器，经过代理转发，拿到 API 服务器的数据。\n\n这里你可以通过 express-http-proxy 这样的工具帮助你快速搭建 Proxy 代理功能，但是记得配置的时候，要让代理服务器不仅仅帮你转发请求，还要把 cookie 携带上，这样才不会有权限校验上的一些问题。","source":"_posts/reactSSR.md","raw":"title: SSR\ndate: 2019/06/23\ncategories:\n- react\ntags:\n- react\n\n---\n# React SSR \n\n> 转自fullstack\n\n**客户端渲染**：客户端渲染，页面初始加载的 HTML 页面中无网页展示内容，需要加载执行JavaScript 文件中的 React 代码，通过 JavaScript 渲染生成页面，同时，JavaScript 代码会完成页面交互事件的绑定\n\n**服务器端渲染**：用户请求服务器，服务器上直接生成 HTML 内容并返回给浏览器。服务器端渲染来，页面的内容是由 Server 端生成的。一般来说，服务器端渲染的页面交互能力有限，如果要实现复杂交互，还是要通过引入 JavaScript 文件来辅助实现。服务器端渲染这个概念，适用于任何后端语言。\n\n**同构**：同构这个概念存在于 Vue，React 这些新型的前端框架中，同构实际上是客户端渲染和服务器端渲染的一个整合。我们把页面的展示内容和交互写在一起，让代码执行两次。在服务器端执行一次，用于实现服务器端渲染，在客户端再执行一次，用于接管页面交互，\n\n一般情况下，当我们使用 React 编写代码时，页面都是由客户端执行 JavaScript 逻辑动态挂 DOM 生成的，也就是说这种普通的单页面应用实际上采用的是客户端渲染模式。在大多数情况下，客户端渲染完全能够满足我们的业务需求，那为什么我们还需要 SSR 这种同构技术呢？\n\n**使用 SSR 技术的主要因素：**\n\n1. CSR 项目的 TTFP（Time To First Page）时间比较长，参考之前的图例，在 CSR 的页面渲染流程中，首先要加载 HTML 文件，之后要下载页面所需的 JavaScript 文件，然后 JavaScript 文件渲染生成页面。在这个渲染过程中至少涉及到两个 HTTP 请求周期，所以会有一定的耗时，这也是为什么大家在低网速下访问普通的 React 或者 Vue 应用时，初始页面会有出现白屏的原因。\n2. CSR 项目的 SEO 能力极弱，在搜索引擎中基本上不可能有好的排名。因为目前大多数搜索引擎主要识别的内容还是 HTML，对 JavaScript 文件内容的识别都还比较弱。如果一个项目的流量入口来自于搜索引擎，这个时候你使用 CSR 进行开发，就非常不合适了。\n\nSSR 的产生，主要就是为了解决上面所说的两个问题。在 React 中使用 SSR 技术，我们让 React 代码在服务器端先执行一次，使得用户下载的 HTML 已经包含了所有的页面展示内容，这样，页面展示的过程只需要经历一个 HTTP 请求周期，TTFP 时间得到一倍以上的缩减。\n\n同时，由于 HTML 中已经包含了网页的所有内容，所以网页的 SEO 效果也会变的非常好。之后，我们让 React 代码在客户端再次执行，为 HTML 网页中的内容添加数据及事件的绑定，页面就具备了 React 的各种交互能力。\n\n但是，SSR 这种理念的实现，并非易事。我们来看一下在 React 中实现 SSR 技术的架构图：\n\n![3589620903-5bc7eb4147e8b_articlex.png](http://img.php.cn//upload/image/798/726/582/1539842432122199.png)\n\n使用 SSR 这种技术，将使原本简单的 React 项目变得非常复杂，项目的可维护性会降低，代码问题的追溯也会变得困难。\n\n所以，使用 SSR 在解决问题的同时，也会带来非常多的副作用，有的时候，这些副作用的伤害比起 SSR 技术带来的优势要大的多。从个人经验上来说，我一般建议大家，除非你的项目特别依赖搜索引擎流量，或者对首屏时间有特殊的要求，否则不建议使用 SSR。\n\n好，如果你确实遇到了 React 项目中要使用 SSR 的场景并决定使用 SSR，那么接下来我们就结合上面这张 SSR 架构图，开启 SSR 技术点的难点剖析。\n\n在开始之前，我们先来分析下虚拟 DOM 和 SSR 的关系。\n\n**SSR 之所以能够实现，本质上是因为虚拟 DOM 的存在**\n\n上面我们说过，SSR 的工程中，React 代码会在客户端和服务器端各执行一次。你可能会想，这没什么问题，都是 JavaScript 代码，既可以在浏览器上运行，又可以在 Node 环境下运行。但事实并非如此，如果你的 React 代码里，存在直接操作 DOM 的代码，那么就无法实现 SSR 这种技术了，因为在 Node 环境下，是没有 DOM 这个概念存在的，所以这些代码在 Node 环境下是会报错的。\n\n好在 React 框架中引入了一个概念叫做虚拟 DOM，虚拟 DOM 是真实 DOM 的一个 JavaScript 对象映射，React 在做页面操作时，实际上不是直接操作 DOM，而是操作虚拟 DOM，也就是操作普通的 JavaScript 对象，这就使得 SSR 成为了可能。在服务器，我可以操作 JavaScript 对象，判断环境是服务器环境，我们把虚拟 DOM 映射成字符串输出；在客户端，我也可以操作 JavaScript 对象，判断环境是客户端环境，我就直接将虚拟 DOM 映射成真实 DOM，完成页面挂载。\n\n其他的一些框架，比如 Vue，它能够实现 SSR 也是因为引入了和 React 中一样的虚拟 DOM 技术。\n\n好，接下来我们回过头看流程图，前两步不说了，服务器端渲染肯定要先向 Node 服务器发送请求。重点是第 3 步，大家可以看到，服务器端要根据请求的地址，判断要展示什么样的页面了，这一步叫做服务器端路由。\n\n我们再看第 10 步，当客户端接收到 JavaScript 文件后，要根据当前的路径，在浏览器上再判断当前要展示的组件，重新进行一次客户端渲染，这个时候，还要经历一次客户端路由（前端路由）。\n\n那么，我们下面要说的就是服务器端路由和客户端路由的区别。\n\n**SSR 中客户端渲染与服务器端渲染路由代码的差异**\n\n实现 React 的 SSR 架构，我们需要让相同的 React 代码在客户端和服务器端各执行一次。大家注意，这里说的相同的 React 代码，指的是我们写的各种组件代码，所以在同构中，只有组件的代码是可以公用的，而路由这样的代码是没有办法公用的，大家思考下这是为什么呢？其实原因很简单，在服务器端需要通过请求路径，找到路由组件，而在客户端需通过浏览器中的网址，找到路由组件，是完全不同的两套机制，所以这部分代码是肯定无法公用。我们来看看在 SSR 中，前后端路由的实现代码：\n\n服务器端路由代码相对要复杂一点，需要你把 location（当前请求路径）传递给 StaticRouter 组件，这样 StaticRouter 才能根据路径分析出当前所需要的组件是谁。\n\n通过 BrowserRouter 我们能够匹配到浏览器即将显示的路由组件，对浏览器来说，我们需要把组件转化成 DOM，所以需要我们使用 ReactDom.render 方法来进行 DOM 的挂载。而 StaticRouter 能够在服务器端匹配到将要显示的组件，对服务器端来说，我们要把组件转化成字符串，这时我们只需要调用 ReactDom 提供的 renderToString 方法，就可以得到 App 组件对应的 HTML 字符串。\n\n对于一个 React 应用来说，路由一般是整个程序的执行入口。在 SSR 中，服务器端的路由和客户端的路由不一样，也就意味着服务器端的入口代码和客户端的入口代码是不同的。\n\n我们知道， React 代码是要通过 Webpack 打包之后才能运行的，也就是第 3 步和第10 步运行的代码，实际上是源代码打包过后生成的代码。上面也说到，服务器端和客户端渲染中的代码，只有一部分一致，其余是有区别的。所以，针对代码运行环境的不同，要进行有区别的 Webpack 打包。\n\n**服务器端代码和客户端代码的打包差异**\n\n上面我们说了，在 SSR 中，服务器端渲染的代码和客户端的代码的入口路由代码是有差异的，所以在 Webpack 中，Entry 的配置首先肯定是不同的。\n\n在服务器端运行的代码，有时我们需要引入 Node 中的一些核心模块，我们需要 Webpack 做打包的时候能够识别出类似的核心模块，一旦发现是核心模块，不必把模块的代码合并到最终生成的代码中，解决这个问题的方法非常简单，在服务器端的 Webpack配置中，你只要加入 target: node 这个配置即可。\n\n服务器端渲染的代码，如果加载第三方模块，这些第三方模块也是不需要被打包到最终的源码中的，因为 Node 环境下通过 NPM 已经安装了这些包，直接引用就可以，不需要额外再打包到代码里。为了解决这个问题，我们可以使用 webpack-node-externals 这个插件，代码中的 nodeExternals 指的就是这个插件，通过这个插件，我们就能解决这个问题。关于 Node 这里的打包问题，可能看起来有些抽象，不是很明白的同学可以仔细读一下 webpack-node-externals 相关的文章或文档，你就能很好的明白这里存在的问题了。\n\n接下来我们继续分析，当我们的 React 代码中引入了一些 CSS 样式代码时，服务器端打包的过程会处理一遍 CSS，而客户端又会处理一遍。查看配置，我们可以看到，服务器端打包时我们用了 isomorphic-style-loader，它处理 CSS 的时候，只在对应的 DOM 元素上生成 class 类名，然后返回生成的 CSS 样式代码。\n\n而在客户端代码打包配置中，我们使用了 css-loader 和 style-loader，css-loader 不但会在 DOM 上生成 class 类名，解析好的 CSS 代码，还会通过 style-loader 把代码挂载到页面上。不过这么做，由于页面上的样式实际上最终是由客户端渲染时添加上的，所以页面可能会存在一开始没有样式的情况，为了解决这个问题， 我们可以在服务器端渲染时，拿到 isomorphic-style-loader 返回的样式代码，然后以字符串的形式添加到服务器端渲染的 HTML 之中。\n\n而对于图片等类型的文件引入，url-loader 也会在服务器端代码和客户端代码打包的过程中分别进行打包，这里，我偷了一个懒，无论服务器端打包还是客户端打包，我都让打包生成的文件存储在 public 目录下，这样，虽然文件会打包出来两遍，但是后打包出来的文件会覆盖之前的文件，所以看起来还是只有一份文件。\n\n当然，这样做的性能和优雅性并不高，只是给大家提供一个小的思路，如果想进行优化，你可以让图片的打包只进行一次，借助一些 Webpack 的插件，实现这个也并非难事，你甚至可以自己也写一个 loader，来解决这样的问题。\n\n如果你的 React 应用中没有异步数据的获取，单纯的做一些静态内容展示，经过上面的配置，你会发现一个简单的 SSR 应用很快的就可以被实现出来了。但是，真正的一个 React 项目中，我们肯定要有异步数据的获取，绝大多数情况下，我们还要使用 Redux 管理数据。而如果想在 SSR 应用中实现，就不是这么简单了。\n\n**SSR 中异步数据的获取 + Redux 的使用**\n\n客户端渲染中，异步数据结合 Redux 的使用方式遵循下面的流程（对应图中第 12 步）：\n\n1. 创建 Store\n2. 根据路由显示组件\n3. 派发 Action 获取数据\n4. 更新 Store 中的数据\n5. 组件 Rerender\n\n而在服务器端，页面一旦确定内容，就没有办法 Rerender 了，这就要求组件显示的时候，就要把 Store 的数据都准备好，所以服务器端异步数据结合 Redux 的使用方式，流程是下面的样子（对应图中第 4 步）：\n\n1. 创建 Store\n2. 根据路由分析 Store 中需要的数据\n3. 派发 Action 获取数据\n4. 更新Store 中的数据\n5. 结合数据和组件生成 HTML，一次性返回\n\n下面，我们分析下**服务器端渲染**这部分的流程：\n\n1. 创建 Store，然而在服务器端，这么写就有问题了，因为服务器端的 Store 是所有用户都要用的，如果像上面这样构建 Store，Store 变成了一个单例，所有用户共享 Store，显然就有问题了。所以在服务器端渲染中，Store 的创建应该像下面这样，返回一个函数，每个用户访问的时候，这个函数重新执行，为每个用户提供一个独立的 Store：\n\n1. 根据路由分析 Store 中需要的数据： 要想实现这个步骤，在服务器端，首先我们要分析当前出路由要加载的所有组件，这个时候我们可以借助一些第三方的包，比如说 react-router-config, 具体这个包怎么使用，不做过多说明，大家可以查看文档，使用这个包，传入服务器请求路径，它就会帮助你分析出这个路径下要展示的所有组件。\n2. 派发 Action 获取数据: 接下来，我们在每个组件上增加一个获取数据的方法：\n\n这个方法需要你把服务器端渲染的 Store 传递进来，它的作用就是帮助服务器端的 Store 获取到这个组件所需的数据。 所以，组件上有了这样的方法，同时我们也有当前路由所需要的所有组件，依次调用各个组件上的 loadData 方法，就能够获取到路由所需的所有数据内容了。\n\n1. 更新 Store 中的数据: 其实，当我们执行第三步的时候，已经在更新 Store 中的数据了，但是，我们要在生成 HTML 之前，保证所有的数据都获取完毕，这怎么处理呢？\n\n这里，我们使用 Promise 来解决这个问题，我们构建一个 Promise 队列，等待所有的 Promise 都执行结束后，也就是所有 store.dispatch 都执行完毕后，再去生成 HTML。这样的话，我们就实现了结合 Redux 的 SSR 流程。\n\n在上面，我们说到，服务器端渲染时，页面的数据是通过 loadData 函数来获取的。而在客户端，数据获取依然要做，因为如果这个页面是你访问的第一个页面，那么你看到的内容是服务器端渲染出来的，但是如果经过 react-router 路由跳转道第二个页面，那么这个页面就完全是客户端渲染出来的了，所以客户端也要去拿数据。\n\n在客户端获取数据，使用的是我们最习惯的方式，通过 componentDidMount 进行数据的获取。这里要注意的是，componentDidMount 只在客户端才会执行，在服务器端这个生命周期函数是不会执行的。所以我们不必担心 componentDidMount 和 loadData 会有冲突，放心使用即可。这也是为什么数据的获取应该放到 componentDidMount 这个生命周期函数中而不是 componentWillMount 中的原因，可以避免服务器端获取数据和客户端获取数据的冲突。\n\n**Node 只是一个中间层**\n\n上一部分我们说到了获取数据的问题，在 SSR 架构中，一般 Node 只是一个中间层，用来做 React 代码的服务器端渲染，而 Node 需要的数据通常由 API 服务器单独提供。\n\n这样做一是为了工程解耦，二也是为了规避 Node 服务器的一些计算性能问题。\n\n请大家关注图中的第 4 步和第 12，13 步，我们接下来分析这几个步骤。\n\n服务器端渲染时，直接请求 API 服务器的接口获取数据没有任何问题。但是在客户端，就有可能存在跨域的问题了，所以，这个时候，我们需要在服务器端搭建 Proxy 代理功能，客户端不直接请求 API 服务器，而是请求 Node 服务器，经过代理转发，拿到 API 服务器的数据。\n\n这里你可以通过 express-http-proxy 这样的工具帮助你快速搭建 Proxy 代理功能，但是记得配置的时候，要让代理服务器不仅仅帮你转发请求，还要把 cookie 携带上，这样才不会有权限校验上的一些问题。","slug":"reactSSR","published":1,"updated":"2024-04-10T17:46:25.878Z","_id":"cluvjqddt001j0wpdcetl0nrw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"React-SSR\"><a href=\"#React-SSR\" class=\"headerlink\" title=\"React SSR\"></a>React SSR</h1><blockquote>\n<p>转自fullstack</p>\n</blockquote>\n<p><strong>客户端渲染</strong>：客户端渲染，页面初始加载的 HTML 页面中无网页展示内容，需要加载执行JavaScript 文件中的 React 代码，通过 JavaScript 渲染生成页面，同时，JavaScript 代码会完成页面交互事件的绑定</p>\n<p><strong>服务器端渲染</strong>：用户请求服务器，服务器上直接生成 HTML 内容并返回给浏览器。服务器端渲染来，页面的内容是由 Server 端生成的。一般来说，服务器端渲染的页面交互能力有限，如果要实现复杂交互，还是要通过引入 JavaScript 文件来辅助实现。服务器端渲染这个概念，适用于任何后端语言。</p>\n<p><strong>同构</strong>：同构这个概念存在于 Vue，React 这些新型的前端框架中，同构实际上是客户端渲染和服务器端渲染的一个整合。我们把页面的展示内容和交互写在一起，让代码执行两次。在服务器端执行一次，用于实现服务器端渲染，在客户端再执行一次，用于接管页面交互，</p>\n<p>一般情况下，当我们使用 React 编写代码时，页面都是由客户端执行 JavaScript 逻辑动态挂 DOM 生成的，也就是说这种普通的单页面应用实际上采用的是客户端渲染模式。在大多数情况下，客户端渲染完全能够满足我们的业务需求，那为什么我们还需要 SSR 这种同构技术呢？</p>\n<p><strong>使用 SSR 技术的主要因素：</strong></p>\n<ol>\n<li>CSR 项目的 TTFP（Time To First Page）时间比较长，参考之前的图例，在 CSR 的页面渲染流程中，首先要加载 HTML 文件，之后要下载页面所需的 JavaScript 文件，然后 JavaScript 文件渲染生成页面。在这个渲染过程中至少涉及到两个 HTTP 请求周期，所以会有一定的耗时，这也是为什么大家在低网速下访问普通的 React 或者 Vue 应用时，初始页面会有出现白屏的原因。</li>\n<li>CSR 项目的 SEO 能力极弱，在搜索引擎中基本上不可能有好的排名。因为目前大多数搜索引擎主要识别的内容还是 HTML，对 JavaScript 文件内容的识别都还比较弱。如果一个项目的流量入口来自于搜索引擎，这个时候你使用 CSR 进行开发，就非常不合适了。</li>\n</ol>\n<p>SSR 的产生，主要就是为了解决上面所说的两个问题。在 React 中使用 SSR 技术，我们让 React 代码在服务器端先执行一次，使得用户下载的 HTML 已经包含了所有的页面展示内容，这样，页面展示的过程只需要经历一个 HTTP 请求周期，TTFP 时间得到一倍以上的缩减。</p>\n<p>同时，由于 HTML 中已经包含了网页的所有内容，所以网页的 SEO 效果也会变的非常好。之后，我们让 React 代码在客户端再次执行，为 HTML 网页中的内容添加数据及事件的绑定，页面就具备了 React 的各种交互能力。</p>\n<p>但是，SSR 这种理念的实现，并非易事。我们来看一下在 React 中实现 SSR 技术的架构图：</p>\n<p><img src=\"http://img.php.cn//upload/image/798/726/582/1539842432122199.png\" alt=\"3589620903-5bc7eb4147e8b_articlex.png\"></p>\n<p>使用 SSR 这种技术，将使原本简单的 React 项目变得非常复杂，项目的可维护性会降低，代码问题的追溯也会变得困难。</p>\n<p>所以，使用 SSR 在解决问题的同时，也会带来非常多的副作用，有的时候，这些副作用的伤害比起 SSR 技术带来的优势要大的多。从个人经验上来说，我一般建议大家，除非你的项目特别依赖搜索引擎流量，或者对首屏时间有特殊的要求，否则不建议使用 SSR。</p>\n<p>好，如果你确实遇到了 React 项目中要使用 SSR 的场景并决定使用 SSR，那么接下来我们就结合上面这张 SSR 架构图，开启 SSR 技术点的难点剖析。</p>\n<p>在开始之前，我们先来分析下虚拟 DOM 和 SSR 的关系。</p>\n<p><strong>SSR 之所以能够实现，本质上是因为虚拟 DOM 的存在</strong></p>\n<p>上面我们说过，SSR 的工程中，React 代码会在客户端和服务器端各执行一次。你可能会想，这没什么问题，都是 JavaScript 代码，既可以在浏览器上运行，又可以在 Node 环境下运行。但事实并非如此，如果你的 React 代码里，存在直接操作 DOM 的代码，那么就无法实现 SSR 这种技术了，因为在 Node 环境下，是没有 DOM 这个概念存在的，所以这些代码在 Node 环境下是会报错的。</p>\n<p>好在 React 框架中引入了一个概念叫做虚拟 DOM，虚拟 DOM 是真实 DOM 的一个 JavaScript 对象映射，React 在做页面操作时，实际上不是直接操作 DOM，而是操作虚拟 DOM，也就是操作普通的 JavaScript 对象，这就使得 SSR 成为了可能。在服务器，我可以操作 JavaScript 对象，判断环境是服务器环境，我们把虚拟 DOM 映射成字符串输出；在客户端，我也可以操作 JavaScript 对象，判断环境是客户端环境，我就直接将虚拟 DOM 映射成真实 DOM，完成页面挂载。</p>\n<p>其他的一些框架，比如 Vue，它能够实现 SSR 也是因为引入了和 React 中一样的虚拟 DOM 技术。</p>\n<p>好，接下来我们回过头看流程图，前两步不说了，服务器端渲染肯定要先向 Node 服务器发送请求。重点是第 3 步，大家可以看到，服务器端要根据请求的地址，判断要展示什么样的页面了，这一步叫做服务器端路由。</p>\n<p>我们再看第 10 步，当客户端接收到 JavaScript 文件后，要根据当前的路径，在浏览器上再判断当前要展示的组件，重新进行一次客户端渲染，这个时候，还要经历一次客户端路由（前端路由）。</p>\n<p>那么，我们下面要说的就是服务器端路由和客户端路由的区别。</p>\n<p><strong>SSR 中客户端渲染与服务器端渲染路由代码的差异</strong></p>\n<p>实现 React 的 SSR 架构，我们需要让相同的 React 代码在客户端和服务器端各执行一次。大家注意，这里说的相同的 React 代码，指的是我们写的各种组件代码，所以在同构中，只有组件的代码是可以公用的，而路由这样的代码是没有办法公用的，大家思考下这是为什么呢？其实原因很简单，在服务器端需要通过请求路径，找到路由组件，而在客户端需通过浏览器中的网址，找到路由组件，是完全不同的两套机制，所以这部分代码是肯定无法公用。我们来看看在 SSR 中，前后端路由的实现代码：</p>\n<p>服务器端路由代码相对要复杂一点，需要你把 location（当前请求路径）传递给 StaticRouter 组件，这样 StaticRouter 才能根据路径分析出当前所需要的组件是谁。</p>\n<p>通过 BrowserRouter 我们能够匹配到浏览器即将显示的路由组件，对浏览器来说，我们需要把组件转化成 DOM，所以需要我们使用 ReactDom.render 方法来进行 DOM 的挂载。而 StaticRouter 能够在服务器端匹配到将要显示的组件，对服务器端来说，我们要把组件转化成字符串，这时我们只需要调用 ReactDom 提供的 renderToString 方法，就可以得到 App 组件对应的 HTML 字符串。</p>\n<p>对于一个 React 应用来说，路由一般是整个程序的执行入口。在 SSR 中，服务器端的路由和客户端的路由不一样，也就意味着服务器端的入口代码和客户端的入口代码是不同的。</p>\n<p>我们知道， React 代码是要通过 Webpack 打包之后才能运行的，也就是第 3 步和第10 步运行的代码，实际上是源代码打包过后生成的代码。上面也说到，服务器端和客户端渲染中的代码，只有一部分一致，其余是有区别的。所以，针对代码运行环境的不同，要进行有区别的 Webpack 打包。</p>\n<p><strong>服务器端代码和客户端代码的打包差异</strong></p>\n<p>上面我们说了，在 SSR 中，服务器端渲染的代码和客户端的代码的入口路由代码是有差异的，所以在 Webpack 中，Entry 的配置首先肯定是不同的。</p>\n<p>在服务器端运行的代码，有时我们需要引入 Node 中的一些核心模块，我们需要 Webpack 做打包的时候能够识别出类似的核心模块，一旦发现是核心模块，不必把模块的代码合并到最终生成的代码中，解决这个问题的方法非常简单，在服务器端的 Webpack配置中，你只要加入 target: node 这个配置即可。</p>\n<p>服务器端渲染的代码，如果加载第三方模块，这些第三方模块也是不需要被打包到最终的源码中的，因为 Node 环境下通过 NPM 已经安装了这些包，直接引用就可以，不需要额外再打包到代码里。为了解决这个问题，我们可以使用 webpack-node-externals 这个插件，代码中的 nodeExternals 指的就是这个插件，通过这个插件，我们就能解决这个问题。关于 Node 这里的打包问题，可能看起来有些抽象，不是很明白的同学可以仔细读一下 webpack-node-externals 相关的文章或文档，你就能很好的明白这里存在的问题了。</p>\n<p>接下来我们继续分析，当我们的 React 代码中引入了一些 CSS 样式代码时，服务器端打包的过程会处理一遍 CSS，而客户端又会处理一遍。查看配置，我们可以看到，服务器端打包时我们用了 isomorphic-style-loader，它处理 CSS 的时候，只在对应的 DOM 元素上生成 class 类名，然后返回生成的 CSS 样式代码。</p>\n<p>而在客户端代码打包配置中，我们使用了 css-loader 和 style-loader，css-loader 不但会在 DOM 上生成 class 类名，解析好的 CSS 代码，还会通过 style-loader 把代码挂载到页面上。不过这么做，由于页面上的样式实际上最终是由客户端渲染时添加上的，所以页面可能会存在一开始没有样式的情况，为了解决这个问题， 我们可以在服务器端渲染时，拿到 isomorphic-style-loader 返回的样式代码，然后以字符串的形式添加到服务器端渲染的 HTML 之中。</p>\n<p>而对于图片等类型的文件引入，url-loader 也会在服务器端代码和客户端代码打包的过程中分别进行打包，这里，我偷了一个懒，无论服务器端打包还是客户端打包，我都让打包生成的文件存储在 public 目录下，这样，虽然文件会打包出来两遍，但是后打包出来的文件会覆盖之前的文件，所以看起来还是只有一份文件。</p>\n<p>当然，这样做的性能和优雅性并不高，只是给大家提供一个小的思路，如果想进行优化，你可以让图片的打包只进行一次，借助一些 Webpack 的插件，实现这个也并非难事，你甚至可以自己也写一个 loader，来解决这样的问题。</p>\n<p>如果你的 React 应用中没有异步数据的获取，单纯的做一些静态内容展示，经过上面的配置，你会发现一个简单的 SSR 应用很快的就可以被实现出来了。但是，真正的一个 React 项目中，我们肯定要有异步数据的获取，绝大多数情况下，我们还要使用 Redux 管理数据。而如果想在 SSR 应用中实现，就不是这么简单了。</p>\n<p><strong>SSR 中异步数据的获取 + Redux 的使用</strong></p>\n<p>客户端渲染中，异步数据结合 Redux 的使用方式遵循下面的流程（对应图中第 12 步）：</p>\n<ol>\n<li>创建 Store</li>\n<li>根据路由显示组件</li>\n<li>派发 Action 获取数据</li>\n<li>更新 Store 中的数据</li>\n<li>组件 Rerender</li>\n</ol>\n<p>而在服务器端，页面一旦确定内容，就没有办法 Rerender 了，这就要求组件显示的时候，就要把 Store 的数据都准备好，所以服务器端异步数据结合 Redux 的使用方式，流程是下面的样子（对应图中第 4 步）：</p>\n<ol>\n<li>创建 Store</li>\n<li>根据路由分析 Store 中需要的数据</li>\n<li>派发 Action 获取数据</li>\n<li>更新Store 中的数据</li>\n<li>结合数据和组件生成 HTML，一次性返回</li>\n</ol>\n<p>下面，我们分析下<strong>服务器端渲染</strong>这部分的流程：</p>\n<ol>\n<li><p>创建 Store，然而在服务器端，这么写就有问题了，因为服务器端的 Store 是所有用户都要用的，如果像上面这样构建 Store，Store 变成了一个单例，所有用户共享 Store，显然就有问题了。所以在服务器端渲染中，Store 的创建应该像下面这样，返回一个函数，每个用户访问的时候，这个函数重新执行，为每个用户提供一个独立的 Store：</p>\n</li>\n<li><p>根据路由分析 Store 中需要的数据： 要想实现这个步骤，在服务器端，首先我们要分析当前出路由要加载的所有组件，这个时候我们可以借助一些第三方的包，比如说 react-router-config, 具体这个包怎么使用，不做过多说明，大家可以查看文档，使用这个包，传入服务器请求路径，它就会帮助你分析出这个路径下要展示的所有组件。</p>\n</li>\n<li><p>派发 Action 获取数据: 接下来，我们在每个组件上增加一个获取数据的方法：</p>\n</li>\n</ol>\n<p>这个方法需要你把服务器端渲染的 Store 传递进来，它的作用就是帮助服务器端的 Store 获取到这个组件所需的数据。 所以，组件上有了这样的方法，同时我们也有当前路由所需要的所有组件，依次调用各个组件上的 loadData 方法，就能够获取到路由所需的所有数据内容了。</p>\n<ol>\n<li>更新 Store 中的数据: 其实，当我们执行第三步的时候，已经在更新 Store 中的数据了，但是，我们要在生成 HTML 之前，保证所有的数据都获取完毕，这怎么处理呢？</li>\n</ol>\n<p>这里，我们使用 Promise 来解决这个问题，我们构建一个 Promise 队列，等待所有的 Promise 都执行结束后，也就是所有 store.dispatch 都执行完毕后，再去生成 HTML。这样的话，我们就实现了结合 Redux 的 SSR 流程。</p>\n<p>在上面，我们说到，服务器端渲染时，页面的数据是通过 loadData 函数来获取的。而在客户端，数据获取依然要做，因为如果这个页面是你访问的第一个页面，那么你看到的内容是服务器端渲染出来的，但是如果经过 react-router 路由跳转道第二个页面，那么这个页面就完全是客户端渲染出来的了，所以客户端也要去拿数据。</p>\n<p>在客户端获取数据，使用的是我们最习惯的方式，通过 componentDidMount 进行数据的获取。这里要注意的是，componentDidMount 只在客户端才会执行，在服务器端这个生命周期函数是不会执行的。所以我们不必担心 componentDidMount 和 loadData 会有冲突，放心使用即可。这也是为什么数据的获取应该放到 componentDidMount 这个生命周期函数中而不是 componentWillMount 中的原因，可以避免服务器端获取数据和客户端获取数据的冲突。</p>\n<p><strong>Node 只是一个中间层</strong></p>\n<p>上一部分我们说到了获取数据的问题，在 SSR 架构中，一般 Node 只是一个中间层，用来做 React 代码的服务器端渲染，而 Node 需要的数据通常由 API 服务器单独提供。</p>\n<p>这样做一是为了工程解耦，二也是为了规避 Node 服务器的一些计算性能问题。</p>\n<p>请大家关注图中的第 4 步和第 12，13 步，我们接下来分析这几个步骤。</p>\n<p>服务器端渲染时，直接请求 API 服务器的接口获取数据没有任何问题。但是在客户端，就有可能存在跨域的问题了，所以，这个时候，我们需要在服务器端搭建 Proxy 代理功能，客户端不直接请求 API 服务器，而是请求 Node 服务器，经过代理转发，拿到 API 服务器的数据。</p>\n<p>这里你可以通过 express-http-proxy 这样的工具帮助你快速搭建 Proxy 代理功能，但是记得配置的时候，要让代理服务器不仅仅帮你转发请求，还要把 cookie 携带上，这样才不会有权限校验上的一些问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-SSR\"><a href=\"#React-SSR\" class=\"headerlink\" title=\"React SSR\"></a>React SSR</h1><blockquote>\n<p>转自fullstack</p>\n</blockquote>\n<p><strong>客户端渲染</strong>：客户端渲染，页面初始加载的 HTML 页面中无网页展示内容，需要加载执行JavaScript 文件中的 React 代码，通过 JavaScript 渲染生成页面，同时，JavaScript 代码会完成页面交互事件的绑定</p>\n<p><strong>服务器端渲染</strong>：用户请求服务器，服务器上直接生成 HTML 内容并返回给浏览器。服务器端渲染来，页面的内容是由 Server 端生成的。一般来说，服务器端渲染的页面交互能力有限，如果要实现复杂交互，还是要通过引入 JavaScript 文件来辅助实现。服务器端渲染这个概念，适用于任何后端语言。</p>\n<p><strong>同构</strong>：同构这个概念存在于 Vue，React 这些新型的前端框架中，同构实际上是客户端渲染和服务器端渲染的一个整合。我们把页面的展示内容和交互写在一起，让代码执行两次。在服务器端执行一次，用于实现服务器端渲染，在客户端再执行一次，用于接管页面交互，</p>\n<p>一般情况下，当我们使用 React 编写代码时，页面都是由客户端执行 JavaScript 逻辑动态挂 DOM 生成的，也就是说这种普通的单页面应用实际上采用的是客户端渲染模式。在大多数情况下，客户端渲染完全能够满足我们的业务需求，那为什么我们还需要 SSR 这种同构技术呢？</p>\n<p><strong>使用 SSR 技术的主要因素：</strong></p>\n<ol>\n<li>CSR 项目的 TTFP（Time To First Page）时间比较长，参考之前的图例，在 CSR 的页面渲染流程中，首先要加载 HTML 文件，之后要下载页面所需的 JavaScript 文件，然后 JavaScript 文件渲染生成页面。在这个渲染过程中至少涉及到两个 HTTP 请求周期，所以会有一定的耗时，这也是为什么大家在低网速下访问普通的 React 或者 Vue 应用时，初始页面会有出现白屏的原因。</li>\n<li>CSR 项目的 SEO 能力极弱，在搜索引擎中基本上不可能有好的排名。因为目前大多数搜索引擎主要识别的内容还是 HTML，对 JavaScript 文件内容的识别都还比较弱。如果一个项目的流量入口来自于搜索引擎，这个时候你使用 CSR 进行开发，就非常不合适了。</li>\n</ol>\n<p>SSR 的产生，主要就是为了解决上面所说的两个问题。在 React 中使用 SSR 技术，我们让 React 代码在服务器端先执行一次，使得用户下载的 HTML 已经包含了所有的页面展示内容，这样，页面展示的过程只需要经历一个 HTTP 请求周期，TTFP 时间得到一倍以上的缩减。</p>\n<p>同时，由于 HTML 中已经包含了网页的所有内容，所以网页的 SEO 效果也会变的非常好。之后，我们让 React 代码在客户端再次执行，为 HTML 网页中的内容添加数据及事件的绑定，页面就具备了 React 的各种交互能力。</p>\n<p>但是，SSR 这种理念的实现，并非易事。我们来看一下在 React 中实现 SSR 技术的架构图：</p>\n<p><img src=\"http://img.php.cn//upload/image/798/726/582/1539842432122199.png\" alt=\"3589620903-5bc7eb4147e8b_articlex.png\"></p>\n<p>使用 SSR 这种技术，将使原本简单的 React 项目变得非常复杂，项目的可维护性会降低，代码问题的追溯也会变得困难。</p>\n<p>所以，使用 SSR 在解决问题的同时，也会带来非常多的副作用，有的时候，这些副作用的伤害比起 SSR 技术带来的优势要大的多。从个人经验上来说，我一般建议大家，除非你的项目特别依赖搜索引擎流量，或者对首屏时间有特殊的要求，否则不建议使用 SSR。</p>\n<p>好，如果你确实遇到了 React 项目中要使用 SSR 的场景并决定使用 SSR，那么接下来我们就结合上面这张 SSR 架构图，开启 SSR 技术点的难点剖析。</p>\n<p>在开始之前，我们先来分析下虚拟 DOM 和 SSR 的关系。</p>\n<p><strong>SSR 之所以能够实现，本质上是因为虚拟 DOM 的存在</strong></p>\n<p>上面我们说过，SSR 的工程中，React 代码会在客户端和服务器端各执行一次。你可能会想，这没什么问题，都是 JavaScript 代码，既可以在浏览器上运行，又可以在 Node 环境下运行。但事实并非如此，如果你的 React 代码里，存在直接操作 DOM 的代码，那么就无法实现 SSR 这种技术了，因为在 Node 环境下，是没有 DOM 这个概念存在的，所以这些代码在 Node 环境下是会报错的。</p>\n<p>好在 React 框架中引入了一个概念叫做虚拟 DOM，虚拟 DOM 是真实 DOM 的一个 JavaScript 对象映射，React 在做页面操作时，实际上不是直接操作 DOM，而是操作虚拟 DOM，也就是操作普通的 JavaScript 对象，这就使得 SSR 成为了可能。在服务器，我可以操作 JavaScript 对象，判断环境是服务器环境，我们把虚拟 DOM 映射成字符串输出；在客户端，我也可以操作 JavaScript 对象，判断环境是客户端环境，我就直接将虚拟 DOM 映射成真实 DOM，完成页面挂载。</p>\n<p>其他的一些框架，比如 Vue，它能够实现 SSR 也是因为引入了和 React 中一样的虚拟 DOM 技术。</p>\n<p>好，接下来我们回过头看流程图，前两步不说了，服务器端渲染肯定要先向 Node 服务器发送请求。重点是第 3 步，大家可以看到，服务器端要根据请求的地址，判断要展示什么样的页面了，这一步叫做服务器端路由。</p>\n<p>我们再看第 10 步，当客户端接收到 JavaScript 文件后，要根据当前的路径，在浏览器上再判断当前要展示的组件，重新进行一次客户端渲染，这个时候，还要经历一次客户端路由（前端路由）。</p>\n<p>那么，我们下面要说的就是服务器端路由和客户端路由的区别。</p>\n<p><strong>SSR 中客户端渲染与服务器端渲染路由代码的差异</strong></p>\n<p>实现 React 的 SSR 架构，我们需要让相同的 React 代码在客户端和服务器端各执行一次。大家注意，这里说的相同的 React 代码，指的是我们写的各种组件代码，所以在同构中，只有组件的代码是可以公用的，而路由这样的代码是没有办法公用的，大家思考下这是为什么呢？其实原因很简单，在服务器端需要通过请求路径，找到路由组件，而在客户端需通过浏览器中的网址，找到路由组件，是完全不同的两套机制，所以这部分代码是肯定无法公用。我们来看看在 SSR 中，前后端路由的实现代码：</p>\n<p>服务器端路由代码相对要复杂一点，需要你把 location（当前请求路径）传递给 StaticRouter 组件，这样 StaticRouter 才能根据路径分析出当前所需要的组件是谁。</p>\n<p>通过 BrowserRouter 我们能够匹配到浏览器即将显示的路由组件，对浏览器来说，我们需要把组件转化成 DOM，所以需要我们使用 ReactDom.render 方法来进行 DOM 的挂载。而 StaticRouter 能够在服务器端匹配到将要显示的组件，对服务器端来说，我们要把组件转化成字符串，这时我们只需要调用 ReactDom 提供的 renderToString 方法，就可以得到 App 组件对应的 HTML 字符串。</p>\n<p>对于一个 React 应用来说，路由一般是整个程序的执行入口。在 SSR 中，服务器端的路由和客户端的路由不一样，也就意味着服务器端的入口代码和客户端的入口代码是不同的。</p>\n<p>我们知道， React 代码是要通过 Webpack 打包之后才能运行的，也就是第 3 步和第10 步运行的代码，实际上是源代码打包过后生成的代码。上面也说到，服务器端和客户端渲染中的代码，只有一部分一致，其余是有区别的。所以，针对代码运行环境的不同，要进行有区别的 Webpack 打包。</p>\n<p><strong>服务器端代码和客户端代码的打包差异</strong></p>\n<p>上面我们说了，在 SSR 中，服务器端渲染的代码和客户端的代码的入口路由代码是有差异的，所以在 Webpack 中，Entry 的配置首先肯定是不同的。</p>\n<p>在服务器端运行的代码，有时我们需要引入 Node 中的一些核心模块，我们需要 Webpack 做打包的时候能够识别出类似的核心模块，一旦发现是核心模块，不必把模块的代码合并到最终生成的代码中，解决这个问题的方法非常简单，在服务器端的 Webpack配置中，你只要加入 target: node 这个配置即可。</p>\n<p>服务器端渲染的代码，如果加载第三方模块，这些第三方模块也是不需要被打包到最终的源码中的，因为 Node 环境下通过 NPM 已经安装了这些包，直接引用就可以，不需要额外再打包到代码里。为了解决这个问题，我们可以使用 webpack-node-externals 这个插件，代码中的 nodeExternals 指的就是这个插件，通过这个插件，我们就能解决这个问题。关于 Node 这里的打包问题，可能看起来有些抽象，不是很明白的同学可以仔细读一下 webpack-node-externals 相关的文章或文档，你就能很好的明白这里存在的问题了。</p>\n<p>接下来我们继续分析，当我们的 React 代码中引入了一些 CSS 样式代码时，服务器端打包的过程会处理一遍 CSS，而客户端又会处理一遍。查看配置，我们可以看到，服务器端打包时我们用了 isomorphic-style-loader，它处理 CSS 的时候，只在对应的 DOM 元素上生成 class 类名，然后返回生成的 CSS 样式代码。</p>\n<p>而在客户端代码打包配置中，我们使用了 css-loader 和 style-loader，css-loader 不但会在 DOM 上生成 class 类名，解析好的 CSS 代码，还会通过 style-loader 把代码挂载到页面上。不过这么做，由于页面上的样式实际上最终是由客户端渲染时添加上的，所以页面可能会存在一开始没有样式的情况，为了解决这个问题， 我们可以在服务器端渲染时，拿到 isomorphic-style-loader 返回的样式代码，然后以字符串的形式添加到服务器端渲染的 HTML 之中。</p>\n<p>而对于图片等类型的文件引入，url-loader 也会在服务器端代码和客户端代码打包的过程中分别进行打包，这里，我偷了一个懒，无论服务器端打包还是客户端打包，我都让打包生成的文件存储在 public 目录下，这样，虽然文件会打包出来两遍，但是后打包出来的文件会覆盖之前的文件，所以看起来还是只有一份文件。</p>\n<p>当然，这样做的性能和优雅性并不高，只是给大家提供一个小的思路，如果想进行优化，你可以让图片的打包只进行一次，借助一些 Webpack 的插件，实现这个也并非难事，你甚至可以自己也写一个 loader，来解决这样的问题。</p>\n<p>如果你的 React 应用中没有异步数据的获取，单纯的做一些静态内容展示，经过上面的配置，你会发现一个简单的 SSR 应用很快的就可以被实现出来了。但是，真正的一个 React 项目中，我们肯定要有异步数据的获取，绝大多数情况下，我们还要使用 Redux 管理数据。而如果想在 SSR 应用中实现，就不是这么简单了。</p>\n<p><strong>SSR 中异步数据的获取 + Redux 的使用</strong></p>\n<p>客户端渲染中，异步数据结合 Redux 的使用方式遵循下面的流程（对应图中第 12 步）：</p>\n<ol>\n<li>创建 Store</li>\n<li>根据路由显示组件</li>\n<li>派发 Action 获取数据</li>\n<li>更新 Store 中的数据</li>\n<li>组件 Rerender</li>\n</ol>\n<p>而在服务器端，页面一旦确定内容，就没有办法 Rerender 了，这就要求组件显示的时候，就要把 Store 的数据都准备好，所以服务器端异步数据结合 Redux 的使用方式，流程是下面的样子（对应图中第 4 步）：</p>\n<ol>\n<li>创建 Store</li>\n<li>根据路由分析 Store 中需要的数据</li>\n<li>派发 Action 获取数据</li>\n<li>更新Store 中的数据</li>\n<li>结合数据和组件生成 HTML，一次性返回</li>\n</ol>\n<p>下面，我们分析下<strong>服务器端渲染</strong>这部分的流程：</p>\n<ol>\n<li><p>创建 Store，然而在服务器端，这么写就有问题了，因为服务器端的 Store 是所有用户都要用的，如果像上面这样构建 Store，Store 变成了一个单例，所有用户共享 Store，显然就有问题了。所以在服务器端渲染中，Store 的创建应该像下面这样，返回一个函数，每个用户访问的时候，这个函数重新执行，为每个用户提供一个独立的 Store：</p>\n</li>\n<li><p>根据路由分析 Store 中需要的数据： 要想实现这个步骤，在服务器端，首先我们要分析当前出路由要加载的所有组件，这个时候我们可以借助一些第三方的包，比如说 react-router-config, 具体这个包怎么使用，不做过多说明，大家可以查看文档，使用这个包，传入服务器请求路径，它就会帮助你分析出这个路径下要展示的所有组件。</p>\n</li>\n<li><p>派发 Action 获取数据: 接下来，我们在每个组件上增加一个获取数据的方法：</p>\n</li>\n</ol>\n<p>这个方法需要你把服务器端渲染的 Store 传递进来，它的作用就是帮助服务器端的 Store 获取到这个组件所需的数据。 所以，组件上有了这样的方法，同时我们也有当前路由所需要的所有组件，依次调用各个组件上的 loadData 方法，就能够获取到路由所需的所有数据内容了。</p>\n<ol>\n<li>更新 Store 中的数据: 其实，当我们执行第三步的时候，已经在更新 Store 中的数据了，但是，我们要在生成 HTML 之前，保证所有的数据都获取完毕，这怎么处理呢？</li>\n</ol>\n<p>这里，我们使用 Promise 来解决这个问题，我们构建一个 Promise 队列，等待所有的 Promise 都执行结束后，也就是所有 store.dispatch 都执行完毕后，再去生成 HTML。这样的话，我们就实现了结合 Redux 的 SSR 流程。</p>\n<p>在上面，我们说到，服务器端渲染时，页面的数据是通过 loadData 函数来获取的。而在客户端，数据获取依然要做，因为如果这个页面是你访问的第一个页面，那么你看到的内容是服务器端渲染出来的，但是如果经过 react-router 路由跳转道第二个页面，那么这个页面就完全是客户端渲染出来的了，所以客户端也要去拿数据。</p>\n<p>在客户端获取数据，使用的是我们最习惯的方式，通过 componentDidMount 进行数据的获取。这里要注意的是，componentDidMount 只在客户端才会执行，在服务器端这个生命周期函数是不会执行的。所以我们不必担心 componentDidMount 和 loadData 会有冲突，放心使用即可。这也是为什么数据的获取应该放到 componentDidMount 这个生命周期函数中而不是 componentWillMount 中的原因，可以避免服务器端获取数据和客户端获取数据的冲突。</p>\n<p><strong>Node 只是一个中间层</strong></p>\n<p>上一部分我们说到了获取数据的问题，在 SSR 架构中，一般 Node 只是一个中间层，用来做 React 代码的服务器端渲染，而 Node 需要的数据通常由 API 服务器单独提供。</p>\n<p>这样做一是为了工程解耦，二也是为了规避 Node 服务器的一些计算性能问题。</p>\n<p>请大家关注图中的第 4 步和第 12，13 步，我们接下来分析这几个步骤。</p>\n<p>服务器端渲染时，直接请求 API 服务器的接口获取数据没有任何问题。但是在客户端，就有可能存在跨域的问题了，所以，这个时候，我们需要在服务器端搭建 Proxy 代理功能，客户端不直接请求 API 服务器，而是请求 Node 服务器，经过代理转发，拿到 API 服务器的数据。</p>\n<p>这里你可以通过 express-http-proxy 这样的工具帮助你快速搭建 Proxy 代理功能，但是记得配置的时候，要让代理服务器不仅仅帮你转发请求，还要把 cookie 携带上，这样才不会有权限校验上的一些问题。</p>\n"},{"title":"redux 源码分析","date":"2018-03-24T16:00:00.000Z","cover":"http","_content":"\n# Redux源码分析\n\n> Hope is not lost today... it is found\n>\n> -leia\n\nredux的实现是非常简洁的，本文旨在通过对源码的解读和简易实现加深对code的理解。\n\n![image-20210310235527758](http\n\n源码的目录结构非常清晰，文件名即是API的名字。\n\n### createStore\n\n```typescript\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\n```\n\n\n\n通过函数签名可以看出createStore包含哪些信息\n\n```javascript\nif (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.')\n  }\n```\n\n这一部分主要看对enhancer的设计\n\n因为createStore创建store的时候主要有以下几种形式\n\n- createStore(reducer, initialState)\n- createStore(reducer)\n- createStore(reducer, enhancer)\n- createStore(reducer, initialState, enhancer)\n\n在代码中都分别做了防御性的编写，进行了params参数的交接\n\n\n\n### compose\n\n一个非常有趣的函数 用于把函数改造成 **a(b(c()))**嵌套调用的形式。\n\n\n\n```javascript\nfunction compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n\n\n同理的还有pipe\n\n```javascript\nfunction pipe(...funcs) {\n  return (args) => funcs.reduce((acc, cur) => cur(acc), args);\n}\t\n```\n\n以下是我用ts实现的版本\n\n```typescrip\n\ntype IAction = { type: string | symbol, payload?: any }\ntype IReducer<S extends object> = (state: S, action: IAction) => S;\ntype ISyncAction<S extends object> = (\n    getState: Store<S>[\"getState\"],\n    dispatch: Store<S>[\"dispatch\"]) => void;\ntype IApplyMiddleware<S extends object> = (store: Store<S>) => Store<S>\ninterface Store<S extends object> {\n    getState: () => S;\n    subscribe: (listener: Function) => () => void;\n\n    dispatch(params: IAction | ISyncAction<S>): void;\n}\n\nconst noop = () => {\n};\n\nexport function createStore<S extends object = {}>\n(\n    reducer: IReducer<S>,\n    initialState?: S,\n    applyMiddleware?: IApplyMiddleware<S>\n): Store<S> {\n    let subscriptions: Function[] = [];\n    let onSubscribe: boolean = false;\n    let state = initialState || {} as S;\n    if (applyMiddleware) {\n        return applyMiddleware(createStore(reducer, initialState));\n    }\n    function getState() {\n        return state;\n    }\n\n    function dispatch(params: IAction | ISyncAction<S>) {\n        state = reducer(state, params as IAction);\n        onSubscribe && subscriptions.forEach(f => f());\n    }\n\n    function subscribe(listener: Function) {\n        if (typeof listener !== \"function\") {\n            console.error(\"you subscribe a function!\");\n            return noop;\n        }\n        onSubscribe = true;\n        subscriptions.push(listener);\n        return function unsubscribe() {\n            onSubscribe = false;\n            subscriptions.length = 0\n            console.log('unsubscribe done!');\n        }\n    }\n\n    return {\n        getState,\n        dispatch,\n        subscribe\n    }\n}\n\nfunction compose(...fn) {\n    if (fn.length === 0) {\n        return args => args;\n    }\n    if (fn.length === 1) {\n        return fn[0]\n    }\n    return fn.reduce((f1, f2) => (...args) => f1(f2(args)));\n}\n\n\nfunction applyMiddleware(...middlewares) {\n    return store => {\n        let dispatch = store.dispatch;\n        let getState = store.getState;\n        const p = {getState, dispatch}\n        const middlewaresWithApi = middlewares.map(md => md(p));\n        dispatch = compose(middlewaresWithApi)(dispatch);\n        return {\n            ...store,\n            dispatch\n        }\n    }\n}\n\nexport function combineReducers<S extends object>(reducers) {\n    const combinedReducerMap = {};\n    Object.keys(reducers).forEach(key => {\n        if (typeof reducers[key] === \"function\") {\n            combinedReducerMap[key] = reducers[key];\n        }\n    });\n\n    return function(state = {}, action: IAction) {\n        const nextState = {};\n        let hasChanged = false;\n        Object.keys(combinedReducerMap).forEach(key => {\n            const reducer = combinedReducerMap[key];\n            const preState = state[key];\n            const currentState = reducer(preState, action);\n            if (typeof currentState === void 0) {\n                console.error(\"key is not exist!\");\n            }\n\n            nextState[key] = currentState;\n            hasChanged = hasChanged || currentState !== preState;\n        });\n        return hasChanged ? nextState : state;\n    };\n}\n\n```\n### react-redux\n\nredux是框架无关的一个库，要想在react中使用就必须借助于react-redux，而结合的关键就在于 react-redux的\nconnect的方法\n\n```javacript\n/**\n* mapStateToProps(state, ownProps) : stateProps\n* mapDispatchToProps(dispatch, ownProps) : dispatchProps\n*/\nconnect(mapStateToProps, mapDispatchTOProps, mergeProps, options)\n```\n\n```javascript\nclass Provider extends Component {\n  constructor(props) {\n    super(props)\n    const { store } = props\n    this.notifySubscribers = this.notifySubscribers.bind(this)\n    const subscription = new Subscription(store)的subscrption对象上的更新函数\n    subscription.onStateChange = this.notifySubscribers\n    this.state = {\n      store,\n      subscription\n    }\n    this.previousState = store.getState()\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n\n    this.state.subscription.trySubscribe()\n\n    if (this.previousState !== this.props.store.getState()) {\n      this.state.subscription.notifyNestedSubs()\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) this.unsubscribe()\n    this.state.subscription.tryUnsubscribe()\n    this._isMounted = false\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.store !== prevProps.store) {\n      this.state.subscription.tryUnsubscribe()\n      const subscription = new Subscription(this.props.store)\n      subscription.onStateChange = this.notifySubscribers\n      this.setState({ store: this.props.store, subscription })\n    }\n  }\n\n  notifySubscribers() {\n    this.state.subscription.notifyNestedSubs()\n  }\n\n  render() {\n    const Context = this.props.context || ReactReduxContext\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    )\n  }\n}\n```\n\n### 工作流程\n1. get store\n2. 使用发布订阅，notify所有的subscriber\n3. didmount阶段如果有更新重新赋值\n4. 检查store是否equal否则 重新2\n5. 传递context\n\n```javascript\nsubscribe(listener) {\n      let isSubscribed = true\n      if (next === current) next = current.slice()\n      next.push(listener)\n\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return\n        isSubscribed = false\n        if (next === current) next = current.slice()\n        next.splice(next.indexOf(listener), 1)\n      }\n    }\n  }\n\n// 这里订阅的是一个 wrapper\n  trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub\n        ? this.parentSub.addNestedSub(this.handleChangeWrapper)\n        : this.store.subscribe(this.handleChangeWrapper)\n      this.listeners = createListenerCollection()\n    }\n  }\n// state or dispatch =》 props\n  function selector(stateOrDispatch, ownProps) {\n  return props\n}\n```\n> 总的来说: react-redux做的就是 将provider的value放入context，connect阶段取出store获取 mapStateToProps， mapDispatchTOProps，然后通过select create props传入组件并且通过一个subscripation 订阅当前state的dependency，通过react unstable_batchUpdate 来做差量的更新\n\n","source":"_posts/redux源码分析.md","raw":"---\ntitle: redux 源码分析\ndate: 2018/03/25\ncover: http\ncategories:\n- react redux source\ntags:\n- redux source\n\n---\n\n# Redux源码分析\n\n> Hope is not lost today... it is found\n>\n> -leia\n\nredux的实现是非常简洁的，本文旨在通过对源码的解读和简易实现加深对code的理解。\n\n![image-20210310235527758](http\n\n源码的目录结构非常清晰，文件名即是API的名字。\n\n### createStore\n\n```typescript\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\n```\n\n\n\n通过函数签名可以看出createStore包含哪些信息\n\n```javascript\nif (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.')\n  }\n```\n\n这一部分主要看对enhancer的设计\n\n因为createStore创建store的时候主要有以下几种形式\n\n- createStore(reducer, initialState)\n- createStore(reducer)\n- createStore(reducer, enhancer)\n- createStore(reducer, initialState, enhancer)\n\n在代码中都分别做了防御性的编写，进行了params参数的交接\n\n\n\n### compose\n\n一个非常有趣的函数 用于把函数改造成 **a(b(c()))**嵌套调用的形式。\n\n\n\n```javascript\nfunction compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n\n\n同理的还有pipe\n\n```javascript\nfunction pipe(...funcs) {\n  return (args) => funcs.reduce((acc, cur) => cur(acc), args);\n}\t\n```\n\n以下是我用ts实现的版本\n\n```typescrip\n\ntype IAction = { type: string | symbol, payload?: any }\ntype IReducer<S extends object> = (state: S, action: IAction) => S;\ntype ISyncAction<S extends object> = (\n    getState: Store<S>[\"getState\"],\n    dispatch: Store<S>[\"dispatch\"]) => void;\ntype IApplyMiddleware<S extends object> = (store: Store<S>) => Store<S>\ninterface Store<S extends object> {\n    getState: () => S;\n    subscribe: (listener: Function) => () => void;\n\n    dispatch(params: IAction | ISyncAction<S>): void;\n}\n\nconst noop = () => {\n};\n\nexport function createStore<S extends object = {}>\n(\n    reducer: IReducer<S>,\n    initialState?: S,\n    applyMiddleware?: IApplyMiddleware<S>\n): Store<S> {\n    let subscriptions: Function[] = [];\n    let onSubscribe: boolean = false;\n    let state = initialState || {} as S;\n    if (applyMiddleware) {\n        return applyMiddleware(createStore(reducer, initialState));\n    }\n    function getState() {\n        return state;\n    }\n\n    function dispatch(params: IAction | ISyncAction<S>) {\n        state = reducer(state, params as IAction);\n        onSubscribe && subscriptions.forEach(f => f());\n    }\n\n    function subscribe(listener: Function) {\n        if (typeof listener !== \"function\") {\n            console.error(\"you subscribe a function!\");\n            return noop;\n        }\n        onSubscribe = true;\n        subscriptions.push(listener);\n        return function unsubscribe() {\n            onSubscribe = false;\n            subscriptions.length = 0\n            console.log('unsubscribe done!');\n        }\n    }\n\n    return {\n        getState,\n        dispatch,\n        subscribe\n    }\n}\n\nfunction compose(...fn) {\n    if (fn.length === 0) {\n        return args => args;\n    }\n    if (fn.length === 1) {\n        return fn[0]\n    }\n    return fn.reduce((f1, f2) => (...args) => f1(f2(args)));\n}\n\n\nfunction applyMiddleware(...middlewares) {\n    return store => {\n        let dispatch = store.dispatch;\n        let getState = store.getState;\n        const p = {getState, dispatch}\n        const middlewaresWithApi = middlewares.map(md => md(p));\n        dispatch = compose(middlewaresWithApi)(dispatch);\n        return {\n            ...store,\n            dispatch\n        }\n    }\n}\n\nexport function combineReducers<S extends object>(reducers) {\n    const combinedReducerMap = {};\n    Object.keys(reducers).forEach(key => {\n        if (typeof reducers[key] === \"function\") {\n            combinedReducerMap[key] = reducers[key];\n        }\n    });\n\n    return function(state = {}, action: IAction) {\n        const nextState = {};\n        let hasChanged = false;\n        Object.keys(combinedReducerMap).forEach(key => {\n            const reducer = combinedReducerMap[key];\n            const preState = state[key];\n            const currentState = reducer(preState, action);\n            if (typeof currentState === void 0) {\n                console.error(\"key is not exist!\");\n            }\n\n            nextState[key] = currentState;\n            hasChanged = hasChanged || currentState !== preState;\n        });\n        return hasChanged ? nextState : state;\n    };\n}\n\n```\n### react-redux\n\nredux是框架无关的一个库，要想在react中使用就必须借助于react-redux，而结合的关键就在于 react-redux的\nconnect的方法\n\n```javacript\n/**\n* mapStateToProps(state, ownProps) : stateProps\n* mapDispatchToProps(dispatch, ownProps) : dispatchProps\n*/\nconnect(mapStateToProps, mapDispatchTOProps, mergeProps, options)\n```\n\n```javascript\nclass Provider extends Component {\n  constructor(props) {\n    super(props)\n    const { store } = props\n    this.notifySubscribers = this.notifySubscribers.bind(this)\n    const subscription = new Subscription(store)的subscrption对象上的更新函数\n    subscription.onStateChange = this.notifySubscribers\n    this.state = {\n      store,\n      subscription\n    }\n    this.previousState = store.getState()\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n\n    this.state.subscription.trySubscribe()\n\n    if (this.previousState !== this.props.store.getState()) {\n      this.state.subscription.notifyNestedSubs()\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) this.unsubscribe()\n    this.state.subscription.tryUnsubscribe()\n    this._isMounted = false\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.store !== prevProps.store) {\n      this.state.subscription.tryUnsubscribe()\n      const subscription = new Subscription(this.props.store)\n      subscription.onStateChange = this.notifySubscribers\n      this.setState({ store: this.props.store, subscription })\n    }\n  }\n\n  notifySubscribers() {\n    this.state.subscription.notifyNestedSubs()\n  }\n\n  render() {\n    const Context = this.props.context || ReactReduxContext\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    )\n  }\n}\n```\n\n### 工作流程\n1. get store\n2. 使用发布订阅，notify所有的subscriber\n3. didmount阶段如果有更新重新赋值\n4. 检查store是否equal否则 重新2\n5. 传递context\n\n```javascript\nsubscribe(listener) {\n      let isSubscribed = true\n      if (next === current) next = current.slice()\n      next.push(listener)\n\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return\n        isSubscribed = false\n        if (next === current) next = current.slice()\n        next.splice(next.indexOf(listener), 1)\n      }\n    }\n  }\n\n// 这里订阅的是一个 wrapper\n  trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub\n        ? this.parentSub.addNestedSub(this.handleChangeWrapper)\n        : this.store.subscribe(this.handleChangeWrapper)\n      this.listeners = createListenerCollection()\n    }\n  }\n// state or dispatch =》 props\n  function selector(stateOrDispatch, ownProps) {\n  return props\n}\n```\n> 总的来说: react-redux做的就是 将provider的value放入context，connect阶段取出store获取 mapStateToProps， mapDispatchTOProps，然后通过select create props传入组件并且通过一个subscripation 订阅当前state的dependency，通过react unstable_batchUpdate 来做差量的更新\n\n","slug":"redux源码分析","published":1,"updated":"2024-04-10T17:46:25.878Z","_id":"cluvjqddt001l0wpd03ew6s69","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redux源码分析\"><a href=\"#Redux源码分析\" class=\"headerlink\" title=\"Redux源码分析\"></a>Redux源码分析</h1><blockquote>\n<p>Hope is not lost today… it is found</p>\n<p>-leia</p>\n</blockquote>\n<p>redux的实现是非常简洁的，本文旨在通过对源码的解读和简易实现加深对code的理解。</p>\n<p>![image-20210310235527758](http</p>\n<p>源码的目录结构非常清晰，文件名即是API的名字。</p>\n<h3 id=\"createStore\"><a href=\"#createStore\" class=\"headerlink\" title=\"createStore\"></a>createStore</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a Redux store that holds the state tree.</span></span><br><span class=\"line\"><span class=\"comment\"> * The only way to change the data in the store is to call `dispatch()` on it.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * There should only be a single store in your app. To specify how different</span></span><br><span class=\"line\"><span class=\"comment\"> * parts of the state tree respond to actions, you may combine several reducers</span></span><br><span class=\"line\"><span class=\"comment\"> * into a single reducer function by using `combineReducers`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; reducer A function that returns the next state tree, given</span></span><br><span class=\"line\"><span class=\"comment\"> * the current state tree and the action to handle.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; [preloadedState] The initial state. You may optionally specify it</span></span><br><span class=\"line\"><span class=\"comment\"> * to hydrate the state from the server in universal apps, or to restore a</span></span><br><span class=\"line\"><span class=\"comment\"> * previously serialized user session.</span></span><br><span class=\"line\"><span class=\"comment\"> * If you use `combineReducers` to produce the root reducer function, this must be</span></span><br><span class=\"line\"><span class=\"comment\"> * an object with the same shape as `combineReducers` keys.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; [enhancer] The store enhancer. You may optionally specify it</span></span><br><span class=\"line\"><span class=\"comment\"> * to enhance the store with third-party capabilities such as middleware,</span></span><br><span class=\"line\"><span class=\"comment\"> * time travel, persistence, etc. The only store enhancer that ships with Redux</span></span><br><span class=\"line\"><span class=\"comment\"> * is `applyMiddleware()`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Store</span>&#125; A Redux store that lets you read the state, dispatch actions</span></span><br><span class=\"line\"><span class=\"comment\"> * and subscribe to changes.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过函数签名可以看出createStore包含哪些信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the enhancer to be a function.&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">enhancer</span>(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the reducer to be a function.&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一部分主要看对enhancer的设计</p>\n<p>因为createStore创建store的时候主要有以下几种形式</p>\n<ul>\n<li>createStore(reducer, initialState)</li>\n<li>createStore(reducer)</li>\n<li>createStore(reducer, enhancer)</li>\n<li>createStore(reducer, initialState, enhancer)</li>\n</ul>\n<p>在代码中都分别做了防御性的编写，进行了params参数的交接</p>\n<h3 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h3><p>一个非常有趣的函数 用于把函数改造成 **a(b(c()))**嵌套调用的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">...funcs</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"title function_\">a</span>(<span class=\"title function_\">b</span>(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同理的还有pipe</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pipe</span>(<span class=\"params\">...funcs</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">args</span>) =&gt;</span> funcs.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> <span class=\"title function_\">cur</span>(acc), args);</span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n\n<p>以下是我用ts实现的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">type IAction = &#123; type: string | symbol, payload?: any &#125;</span><br><span class=\"line\">type IReducer&lt;S extends object&gt; = (state: S, action: IAction) =&gt; S;</span><br><span class=\"line\">type ISyncAction&lt;S extends object&gt; = (</span><br><span class=\"line\">    getState: Store&lt;S&gt;[&quot;getState&quot;],</span><br><span class=\"line\">    dispatch: Store&lt;S&gt;[&quot;dispatch&quot;]) =&gt; void;</span><br><span class=\"line\">type IApplyMiddleware&lt;S extends object&gt; = (store: Store&lt;S&gt;) =&gt; Store&lt;S&gt;</span><br><span class=\"line\">interface Store&lt;S extends object&gt; &#123;</span><br><span class=\"line\">    getState: () =&gt; S;</span><br><span class=\"line\">    subscribe: (listener: Function) =&gt; () =&gt; void;</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch(params: IAction | ISyncAction&lt;S&gt;): void;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const noop = () =&gt; &#123;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export function createStore&lt;S extends object = &#123;&#125;&gt;</span><br><span class=\"line\">(</span><br><span class=\"line\">    reducer: IReducer&lt;S&gt;,</span><br><span class=\"line\">    initialState?: S,</span><br><span class=\"line\">    applyMiddleware?: IApplyMiddleware&lt;S&gt;</span><br><span class=\"line\">): Store&lt;S&gt; &#123;</span><br><span class=\"line\">    let subscriptions: Function[] = [];</span><br><span class=\"line\">    let onSubscribe: boolean = false;</span><br><span class=\"line\">    let state = initialState || &#123;&#125; as S;</span><br><span class=\"line\">    if (applyMiddleware) &#123;</span><br><span class=\"line\">        return applyMiddleware(createStore(reducer, initialState));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function getState() &#123;</span><br><span class=\"line\">        return state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function dispatch(params: IAction | ISyncAction&lt;S&gt;) &#123;</span><br><span class=\"line\">        state = reducer(state, params as IAction);</span><br><span class=\"line\">        onSubscribe &amp;&amp; subscriptions.forEach(f =&gt; f());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function subscribe(listener: Function) &#123;</span><br><span class=\"line\">        if (typeof listener !== &quot;function&quot;) &#123;</span><br><span class=\"line\">            console.error(&quot;you subscribe a function!&quot;);</span><br><span class=\"line\">            return noop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        onSubscribe = true;</span><br><span class=\"line\">        subscriptions.push(listener);</span><br><span class=\"line\">        return function unsubscribe() &#123;</span><br><span class=\"line\">            onSubscribe = false;</span><br><span class=\"line\">            subscriptions.length = 0</span><br><span class=\"line\">            console.log(&#x27;unsubscribe done!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        subscribe</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function compose(...fn) &#123;</span><br><span class=\"line\">    if (fn.length === 0) &#123;</span><br><span class=\"line\">        return args =&gt; args;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (fn.length === 1) &#123;</span><br><span class=\"line\">        return fn[0]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return fn.reduce((f1, f2) =&gt; (...args) =&gt; f1(f2(args)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function applyMiddleware(...middlewares) &#123;</span><br><span class=\"line\">    return store =&gt; &#123;</span><br><span class=\"line\">        let dispatch = store.dispatch;</span><br><span class=\"line\">        let getState = store.getState;</span><br><span class=\"line\">        const p = &#123;getState, dispatch&#125;</span><br><span class=\"line\">        const middlewaresWithApi = middlewares.map(md =&gt; md(p));</span><br><span class=\"line\">        dispatch = compose(middlewaresWithApi)(dispatch);</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            ...store,</span><br><span class=\"line\">            dispatch</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function combineReducers&lt;S extends object&gt;(reducers) &#123;</span><br><span class=\"line\">    const combinedReducerMap = &#123;&#125;;</span><br><span class=\"line\">    Object.keys(reducers).forEach(key =&gt; &#123;</span><br><span class=\"line\">        if (typeof reducers[key] === &quot;function&quot;) &#123;</span><br><span class=\"line\">            combinedReducerMap[key] = reducers[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return function(state = &#123;&#125;, action: IAction) &#123;</span><br><span class=\"line\">        const nextState = &#123;&#125;;</span><br><span class=\"line\">        let hasChanged = false;</span><br><span class=\"line\">        Object.keys(combinedReducerMap).forEach(key =&gt; &#123;</span><br><span class=\"line\">            const reducer = combinedReducerMap[key];</span><br><span class=\"line\">            const preState = state[key];</span><br><span class=\"line\">            const currentState = reducer(preState, action);</span><br><span class=\"line\">            if (typeof currentState === void 0) &#123;</span><br><span class=\"line\">                console.error(&quot;key is not exist!&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextState[key] = currentState;</span><br><span class=\"line\">            hasChanged = hasChanged || currentState !== preState;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        return hasChanged ? nextState : state;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"react-redux\"><a href=\"#react-redux\" class=\"headerlink\" title=\"react-redux\"></a>react-redux</h3><p>redux是框架无关的一个库，要想在react中使用就必须借助于react-redux，而结合的关键就在于 react-redux的<br>connect的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* mapStateToProps(state, ownProps) : stateProps</span><br><span class=\"line\">* mapDispatchToProps(dispatch, ownProps) : dispatchProps</span><br><span class=\"line\">*/</span><br><span class=\"line\">connect(mapStateToProps, mapDispatchTOProps, mergeProps, options)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Provider</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; store &#125; = props</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">notifySubscribers</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">notifySubscribers</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = <span class=\"keyword\">new</span> <span class=\"title class_\">Subscription</span>(store)的subscrption对象上的更新函数</span><br><span class=\"line\">    subscription.<span class=\"property\">onStateChange</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">notifySubscribers</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      store,</span><br><span class=\"line\">      subscription</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">previousState</span> = store.<span class=\"title function_\">getState</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_isMounted</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">trySubscribe</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">previousState</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">store</span>.<span class=\"title function_\">getState</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">notifyNestedSubs</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span>) <span class=\"variable language_\">this</span>.<span class=\"title function_\">unsubscribe</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">tryUnsubscribe</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_isMounted</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\">prevProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">store</span> !== prevProps.<span class=\"property\">store</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">tryUnsubscribe</span>()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> subscription = <span class=\"keyword\">new</span> <span class=\"title class_\">Subscription</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">store</span>)</span><br><span class=\"line\">      subscription.<span class=\"property\">onStateChange</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">notifySubscribers</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">store</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">store</span>, subscription &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">notifySubscribers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">notifyNestedSubs</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">context</span> || <span class=\"title class_\">ReactReduxContext</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;this.props.children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><ol>\n<li>get store</li>\n<li>使用发布订阅，notify所有的subscriber</li>\n<li>didmount阶段如果有更新重新赋值</li>\n<li>检查store是否equal否则 重新2</li>\n<li>传递context</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">subscribe</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next === current) next = current.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">      next.<span class=\"title function_\">push</span>(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unsubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSubscribed || current === <span class=\"variable constant_\">CLEARED</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">        isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next === current) next = current.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">        next.<span class=\"title function_\">splice</span>(next.<span class=\"title function_\">indexOf</span>(listener), <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里订阅的是一个 wrapper</span></span><br><span class=\"line\">  <span class=\"title function_\">trySubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">parentSub</span></span><br><span class=\"line\">        ? <span class=\"variable language_\">this</span>.<span class=\"property\">parentSub</span>.<span class=\"title function_\">addNestedSub</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleChangeWrapper</span>)</span><br><span class=\"line\">        : <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleChangeWrapper</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span> = <span class=\"title function_\">createListenerCollection</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// state or dispatch =》 props</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">selector</span>(<span class=\"params\">stateOrDispatch, ownProps</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> props</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总的来说: react-redux做的就是 将provider的value放入context，connect阶段取出store获取 mapStateToProps， mapDispatchTOProps，然后通过select create props传入组件并且通过一个subscripation 订阅当前state的dependency，通过react unstable_batchUpdate 来做差量的更新</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redux源码分析\"><a href=\"#Redux源码分析\" class=\"headerlink\" title=\"Redux源码分析\"></a>Redux源码分析</h1><blockquote>\n<p>Hope is not lost today… it is found</p>\n<p>-leia</p>\n</blockquote>\n<p>redux的实现是非常简洁的，本文旨在通过对源码的解读和简易实现加深对code的理解。</p>\n<p>![image-20210310235527758](http</p>\n<p>源码的目录结构非常清晰，文件名即是API的名字。</p>\n<h3 id=\"createStore\"><a href=\"#createStore\" class=\"headerlink\" title=\"createStore\"></a>createStore</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a Redux store that holds the state tree.</span></span><br><span class=\"line\"><span class=\"comment\"> * The only way to change the data in the store is to call `dispatch()` on it.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * There should only be a single store in your app. To specify how different</span></span><br><span class=\"line\"><span class=\"comment\"> * parts of the state tree respond to actions, you may combine several reducers</span></span><br><span class=\"line\"><span class=\"comment\"> * into a single reducer function by using `combineReducers`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; reducer A function that returns the next state tree, given</span></span><br><span class=\"line\"><span class=\"comment\"> * the current state tree and the action to handle.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; [preloadedState] The initial state. You may optionally specify it</span></span><br><span class=\"line\"><span class=\"comment\"> * to hydrate the state from the server in universal apps, or to restore a</span></span><br><span class=\"line\"><span class=\"comment\"> * previously serialized user session.</span></span><br><span class=\"line\"><span class=\"comment\"> * If you use `combineReducers` to produce the root reducer function, this must be</span></span><br><span class=\"line\"><span class=\"comment\"> * an object with the same shape as `combineReducers` keys.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; [enhancer] The store enhancer. You may optionally specify it</span></span><br><span class=\"line\"><span class=\"comment\"> * to enhance the store with third-party capabilities such as middleware,</span></span><br><span class=\"line\"><span class=\"comment\"> * time travel, persistence, etc. The only store enhancer that ships with Redux</span></span><br><span class=\"line\"><span class=\"comment\"> * is `applyMiddleware()`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Store</span>&#125; A Redux store that lets you read the state, dispatch actions</span></span><br><span class=\"line\"><span class=\"comment\"> * and subscribe to changes.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过函数签名可以看出createStore包含哪些信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the enhancer to be a function.&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">enhancer</span>(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the reducer to be a function.&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一部分主要看对enhancer的设计</p>\n<p>因为createStore创建store的时候主要有以下几种形式</p>\n<ul>\n<li>createStore(reducer, initialState)</li>\n<li>createStore(reducer)</li>\n<li>createStore(reducer, enhancer)</li>\n<li>createStore(reducer, initialState, enhancer)</li>\n</ul>\n<p>在代码中都分别做了防御性的编写，进行了params参数的交接</p>\n<h3 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h3><p>一个非常有趣的函数 用于把函数改造成 **a(b(c()))**嵌套调用的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">...funcs</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"title function_\">a</span>(<span class=\"title function_\">b</span>(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同理的还有pipe</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pipe</span>(<span class=\"params\">...funcs</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">args</span>) =&gt;</span> funcs.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> <span class=\"title function_\">cur</span>(acc), args);</span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n\n<p>以下是我用ts实现的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">type IAction = &#123; type: string | symbol, payload?: any &#125;</span><br><span class=\"line\">type IReducer&lt;S extends object&gt; = (state: S, action: IAction) =&gt; S;</span><br><span class=\"line\">type ISyncAction&lt;S extends object&gt; = (</span><br><span class=\"line\">    getState: Store&lt;S&gt;[&quot;getState&quot;],</span><br><span class=\"line\">    dispatch: Store&lt;S&gt;[&quot;dispatch&quot;]) =&gt; void;</span><br><span class=\"line\">type IApplyMiddleware&lt;S extends object&gt; = (store: Store&lt;S&gt;) =&gt; Store&lt;S&gt;</span><br><span class=\"line\">interface Store&lt;S extends object&gt; &#123;</span><br><span class=\"line\">    getState: () =&gt; S;</span><br><span class=\"line\">    subscribe: (listener: Function) =&gt; () =&gt; void;</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch(params: IAction | ISyncAction&lt;S&gt;): void;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const noop = () =&gt; &#123;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export function createStore&lt;S extends object = &#123;&#125;&gt;</span><br><span class=\"line\">(</span><br><span class=\"line\">    reducer: IReducer&lt;S&gt;,</span><br><span class=\"line\">    initialState?: S,</span><br><span class=\"line\">    applyMiddleware?: IApplyMiddleware&lt;S&gt;</span><br><span class=\"line\">): Store&lt;S&gt; &#123;</span><br><span class=\"line\">    let subscriptions: Function[] = [];</span><br><span class=\"line\">    let onSubscribe: boolean = false;</span><br><span class=\"line\">    let state = initialState || &#123;&#125; as S;</span><br><span class=\"line\">    if (applyMiddleware) &#123;</span><br><span class=\"line\">        return applyMiddleware(createStore(reducer, initialState));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function getState() &#123;</span><br><span class=\"line\">        return state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function dispatch(params: IAction | ISyncAction&lt;S&gt;) &#123;</span><br><span class=\"line\">        state = reducer(state, params as IAction);</span><br><span class=\"line\">        onSubscribe &amp;&amp; subscriptions.forEach(f =&gt; f());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function subscribe(listener: Function) &#123;</span><br><span class=\"line\">        if (typeof listener !== &quot;function&quot;) &#123;</span><br><span class=\"line\">            console.error(&quot;you subscribe a function!&quot;);</span><br><span class=\"line\">            return noop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        onSubscribe = true;</span><br><span class=\"line\">        subscriptions.push(listener);</span><br><span class=\"line\">        return function unsubscribe() &#123;</span><br><span class=\"line\">            onSubscribe = false;</span><br><span class=\"line\">            subscriptions.length = 0</span><br><span class=\"line\">            console.log(&#x27;unsubscribe done!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        subscribe</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function compose(...fn) &#123;</span><br><span class=\"line\">    if (fn.length === 0) &#123;</span><br><span class=\"line\">        return args =&gt; args;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (fn.length === 1) &#123;</span><br><span class=\"line\">        return fn[0]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return fn.reduce((f1, f2) =&gt; (...args) =&gt; f1(f2(args)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function applyMiddleware(...middlewares) &#123;</span><br><span class=\"line\">    return store =&gt; &#123;</span><br><span class=\"line\">        let dispatch = store.dispatch;</span><br><span class=\"line\">        let getState = store.getState;</span><br><span class=\"line\">        const p = &#123;getState, dispatch&#125;</span><br><span class=\"line\">        const middlewaresWithApi = middlewares.map(md =&gt; md(p));</span><br><span class=\"line\">        dispatch = compose(middlewaresWithApi)(dispatch);</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            ...store,</span><br><span class=\"line\">            dispatch</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function combineReducers&lt;S extends object&gt;(reducers) &#123;</span><br><span class=\"line\">    const combinedReducerMap = &#123;&#125;;</span><br><span class=\"line\">    Object.keys(reducers).forEach(key =&gt; &#123;</span><br><span class=\"line\">        if (typeof reducers[key] === &quot;function&quot;) &#123;</span><br><span class=\"line\">            combinedReducerMap[key] = reducers[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return function(state = &#123;&#125;, action: IAction) &#123;</span><br><span class=\"line\">        const nextState = &#123;&#125;;</span><br><span class=\"line\">        let hasChanged = false;</span><br><span class=\"line\">        Object.keys(combinedReducerMap).forEach(key =&gt; &#123;</span><br><span class=\"line\">            const reducer = combinedReducerMap[key];</span><br><span class=\"line\">            const preState = state[key];</span><br><span class=\"line\">            const currentState = reducer(preState, action);</span><br><span class=\"line\">            if (typeof currentState === void 0) &#123;</span><br><span class=\"line\">                console.error(&quot;key is not exist!&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextState[key] = currentState;</span><br><span class=\"line\">            hasChanged = hasChanged || currentState !== preState;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        return hasChanged ? nextState : state;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"react-redux\"><a href=\"#react-redux\" class=\"headerlink\" title=\"react-redux\"></a>react-redux</h3><p>redux是框架无关的一个库，要想在react中使用就必须借助于react-redux，而结合的关键就在于 react-redux的<br>connect的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* mapStateToProps(state, ownProps) : stateProps</span><br><span class=\"line\">* mapDispatchToProps(dispatch, ownProps) : dispatchProps</span><br><span class=\"line\">*/</span><br><span class=\"line\">connect(mapStateToProps, mapDispatchTOProps, mergeProps, options)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Provider</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; store &#125; = props</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">notifySubscribers</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">notifySubscribers</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = <span class=\"keyword\">new</span> <span class=\"title class_\">Subscription</span>(store)的subscrption对象上的更新函数</span><br><span class=\"line\">    subscription.<span class=\"property\">onStateChange</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">notifySubscribers</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      store,</span><br><span class=\"line\">      subscription</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">previousState</span> = store.<span class=\"title function_\">getState</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_isMounted</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">trySubscribe</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">previousState</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">store</span>.<span class=\"title function_\">getState</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">notifyNestedSubs</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span>) <span class=\"variable language_\">this</span>.<span class=\"title function_\">unsubscribe</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">tryUnsubscribe</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_isMounted</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\">prevProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">store</span> !== prevProps.<span class=\"property\">store</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">tryUnsubscribe</span>()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> subscription = <span class=\"keyword\">new</span> <span class=\"title class_\">Subscription</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">store</span>)</span><br><span class=\"line\">      subscription.<span class=\"property\">onStateChange</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">notifySubscribers</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">store</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">store</span>, subscription &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">notifySubscribers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">subscription</span>.<span class=\"title function_\">notifyNestedSubs</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">context</span> || <span class=\"title class_\">ReactReduxContext</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;this.props.children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><ol>\n<li>get store</li>\n<li>使用发布订阅，notify所有的subscriber</li>\n<li>didmount阶段如果有更新重新赋值</li>\n<li>检查store是否equal否则 重新2</li>\n<li>传递context</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">subscribe</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next === current) next = current.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">      next.<span class=\"title function_\">push</span>(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unsubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSubscribed || current === <span class=\"variable constant_\">CLEARED</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">        isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next === current) next = current.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">        next.<span class=\"title function_\">splice</span>(next.<span class=\"title function_\">indexOf</span>(listener), <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里订阅的是一个 wrapper</span></span><br><span class=\"line\">  <span class=\"title function_\">trySubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">parentSub</span></span><br><span class=\"line\">        ? <span class=\"variable language_\">this</span>.<span class=\"property\">parentSub</span>.<span class=\"title function_\">addNestedSub</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleChangeWrapper</span>)</span><br><span class=\"line\">        : <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleChangeWrapper</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span> = <span class=\"title function_\">createListenerCollection</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// state or dispatch =》 props</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">selector</span>(<span class=\"params\">stateOrDispatch, ownProps</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> props</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总的来说: react-redux做的就是 将provider的value放入context，connect阶段取出store获取 mapStateToProps， mapDispatchTOProps，然后通过select create props传入组件并且通过一个subscripation 订阅当前state的dependency，通过react unstable_batchUpdate 来做差量的更新</p>\n</blockquote>\n"},{"title":"Webpack KING！！ (二)","date":"2019-08-14T16:00:00.000Z","cover":"https://raw.githubusercontent.com/webpack-contrib/awesome-webpack/master/media/awesome_webpack_branding.png","_content":"\n# webpack king（二）\n\n## 关于Tapable\n\n>  Webpack的插件系统是基于事件的，通过发布订阅模式构建webpack的事件系统。\n\ntapable是什么以及简单的实现。\n\n```javascript\nlet { SyncHook, AsyncParallelHook } = require(\"tapable\");\nclass Test {\n    constructor() {\n        this.hooks= {\n            arch: new SyncHook(['name'])\n        }\n    }\n    tap() {\n        this.hooks.arch.tap(\"test1\", (...args) => {\n            console.log(args)\n        });\n        this.hooks.arch.tap(\"test2\", (...args) => {\n            console.log(args)\n        });\n    }\n    start() {\n        console.log(111)\n        this.hooks.arch.call('111');\n    }\n}\n\n\nclass Test1 {\n    constructor() {\n        this.hooks= {\n            arch: new AsyncParallelHook(['name'])\n        }\n    }\n    tap() {\n        this.hooks.arch.tapAsync(\"test1\", (...args, cb) => {\n            setTimeout(() => {\n              console.log(123)\n            }, 1000)\n        });\n        this.hooks.arch.tapAsync(\"test2\", (...args, cb) => {\n           setTimeout(() => {\n              console.log(123)\n            }, 1000)\n        });\n    }\n    start() {\n        console.log(111)\n        this.hooks.arch.callAsync('111');\n    }\n}\n```\n\nAsyncParallelHook\n\n```javascript\nclass AsyncParallelHook {\n  constructor(){\n    this.tasks = [];\n  }\n  callAsync(...args) {\n    let fn = args.pop();\n    let idx = 0\n    function done(name, cb) {\n      idx++;\n      if (idx === this,tasks.length) {\n        fn();\n      }\n    }\n    this.tasks.forEach(t => {\n      task(...args, done)\n    })\n   }\n  tapPromise(name, cb) {\n    this.tasks.push(cb)\n  }\n  promise(...arg) {\n        return Promise.all(this.tasks.map(t => t(arg)))\n  }\n  tapAsync(name, cb) {\n    this.tasks.push(cb)\n  }\n}\n\n\n```\n\nAsyncSeries\n\n```javascript\nclass AsyncSeries {\n  constructor(){\n    this.tasks = [];\n  }\n  callAsync(...args) {\n    let fn = args.pop();\n    let idx = 0;\n    const next = () => {\n      if (this.tasks.length === idx) return fn()\n      let tsk = this.tasks[index++];\n      tsk(...arg, next);\n    }\n    next()\n   }\n\n  tapAsync(name, cb) {\n    this.tasks.push(cb)\n  }\n}\n```\n\nAsyncSeriesWaterfallHook\n\n```javascript\nclass AsyncSeriesWaterfallHook {\n  constructor(){\n    this.tasks = [];\n  }\n  callAsync(...args) {\n    let fn = args.pop();\n    let idx = 0;\n    const next = (error, data) => {\n      let tsk = this.tasks[index];\n      if (!tsk) return fn()\n      tsk(...arg, next);\n    }\n    index === 0 && task(...args, next)\n    index !== 0 && task(data, next)\n   }\n\n  tapAsync(name, cb) {\n    this.tasks.push(cb)\n  }\n}\n```\n\n","source":"_posts/webpack2.md","raw":"title: Webpack KING！！ (二)\ndate: 2019/08/15\ncover: https://raw.githubusercontent.com/webpack-contrib/awesome-webpack/master/media/awesome_webpack_branding.png\ncategories:\n- tool\ntags:\n- webpack\n\n---\n\n# webpack king（二）\n\n## 关于Tapable\n\n>  Webpack的插件系统是基于事件的，通过发布订阅模式构建webpack的事件系统。\n\ntapable是什么以及简单的实现。\n\n```javascript\nlet { SyncHook, AsyncParallelHook } = require(\"tapable\");\nclass Test {\n    constructor() {\n        this.hooks= {\n            arch: new SyncHook(['name'])\n        }\n    }\n    tap() {\n        this.hooks.arch.tap(\"test1\", (...args) => {\n            console.log(args)\n        });\n        this.hooks.arch.tap(\"test2\", (...args) => {\n            console.log(args)\n        });\n    }\n    start() {\n        console.log(111)\n        this.hooks.arch.call('111');\n    }\n}\n\n\nclass Test1 {\n    constructor() {\n        this.hooks= {\n            arch: new AsyncParallelHook(['name'])\n        }\n    }\n    tap() {\n        this.hooks.arch.tapAsync(\"test1\", (...args, cb) => {\n            setTimeout(() => {\n              console.log(123)\n            }, 1000)\n        });\n        this.hooks.arch.tapAsync(\"test2\", (...args, cb) => {\n           setTimeout(() => {\n              console.log(123)\n            }, 1000)\n        });\n    }\n    start() {\n        console.log(111)\n        this.hooks.arch.callAsync('111');\n    }\n}\n```\n\nAsyncParallelHook\n\n```javascript\nclass AsyncParallelHook {\n  constructor(){\n    this.tasks = [];\n  }\n  callAsync(...args) {\n    let fn = args.pop();\n    let idx = 0\n    function done(name, cb) {\n      idx++;\n      if (idx === this,tasks.length) {\n        fn();\n      }\n    }\n    this.tasks.forEach(t => {\n      task(...args, done)\n    })\n   }\n  tapPromise(name, cb) {\n    this.tasks.push(cb)\n  }\n  promise(...arg) {\n        return Promise.all(this.tasks.map(t => t(arg)))\n  }\n  tapAsync(name, cb) {\n    this.tasks.push(cb)\n  }\n}\n\n\n```\n\nAsyncSeries\n\n```javascript\nclass AsyncSeries {\n  constructor(){\n    this.tasks = [];\n  }\n  callAsync(...args) {\n    let fn = args.pop();\n    let idx = 0;\n    const next = () => {\n      if (this.tasks.length === idx) return fn()\n      let tsk = this.tasks[index++];\n      tsk(...arg, next);\n    }\n    next()\n   }\n\n  tapAsync(name, cb) {\n    this.tasks.push(cb)\n  }\n}\n```\n\nAsyncSeriesWaterfallHook\n\n```javascript\nclass AsyncSeriesWaterfallHook {\n  constructor(){\n    this.tasks = [];\n  }\n  callAsync(...args) {\n    let fn = args.pop();\n    let idx = 0;\n    const next = (error, data) => {\n      let tsk = this.tasks[index];\n      if (!tsk) return fn()\n      tsk(...arg, next);\n    }\n    index === 0 && task(...args, next)\n    index !== 0 && task(data, next)\n   }\n\n  tapAsync(name, cb) {\n    this.tasks.push(cb)\n  }\n}\n```\n\n","slug":"webpack2","published":1,"updated":"2024-04-10T17:46:25.879Z","_id":"cluvjqddu001o0wpdfrm22zyq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"webpack-king（二）\"><a href=\"#webpack-king（二）\" class=\"headerlink\" title=\"webpack king（二）\"></a>webpack king（二）</h1><h2 id=\"关于Tapable\"><a href=\"#关于Tapable\" class=\"headerlink\" title=\"关于Tapable\"></a>关于Tapable</h2><blockquote>\n<p> Webpack的插件系统是基于事件的，通过发布订阅模式构建webpack的事件系统。</p>\n</blockquote>\n<p>tapable是什么以及简单的实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"title class_\">SyncHook</span>, <span class=\"title class_\">AsyncParallelHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;tapable&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>= &#123;</span><br><span class=\"line\">            <span class=\"attr\">arch</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;test2&quot;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>= &#123;</span><br><span class=\"line\">            <span class=\"attr\">arch</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncParallelHook</span>([<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"function\">(<span class=\"params\">...args, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&quot;test2&quot;</span>, <span class=\"function\">(<span class=\"params\">...args, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">callAsync</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AsyncParallelHook</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AsyncParallelHook</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">callAsync</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = args.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">done</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">      idx++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (idx === <span class=\"variable language_\">this</span>,tasks.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">t</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">task</span>(...args, done)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"title function_\">tapPromise</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">push</span>(cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">promise</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">t</span> =&gt;</span> <span class=\"title function_\">t</span>(arg)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">tapAsync</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">push</span>(cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AsyncSeries</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AsyncSeries</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">callAsync</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = args.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">next</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"property\">length</span> === idx) <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tsk = <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>[index++];</span><br><span class=\"line\">      <span class=\"title function_\">tsk</span>(...arg, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">next</span>()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">tapAsync</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">push</span>(cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AsyncSeriesWaterfallHook</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AsyncSeriesWaterfallHook</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">callAsync</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = args.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">next</span> = (<span class=\"params\">error, data</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tsk = <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>[index];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!tsk) <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">      <span class=\"title function_\">tsk</span>(...arg, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index === <span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">task</span>(...args, next)</span><br><span class=\"line\">    index !== <span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">task</span>(data, next)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">tapAsync</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">push</span>(cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack-king（二）\"><a href=\"#webpack-king（二）\" class=\"headerlink\" title=\"webpack king（二）\"></a>webpack king（二）</h1><h2 id=\"关于Tapable\"><a href=\"#关于Tapable\" class=\"headerlink\" title=\"关于Tapable\"></a>关于Tapable</h2><blockquote>\n<p> Webpack的插件系统是基于事件的，通过发布订阅模式构建webpack的事件系统。</p>\n</blockquote>\n<p>tapable是什么以及简单的实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"title class_\">SyncHook</span>, <span class=\"title class_\">AsyncParallelHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;tapable&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>= &#123;</span><br><span class=\"line\">            <span class=\"attr\">arch</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;test2&quot;</span>, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>= &#123;</span><br><span class=\"line\">            <span class=\"attr\">arch</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncParallelHook</span>([<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"function\">(<span class=\"params\">...args, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&quot;test2&quot;</span>, <span class=\"function\">(<span class=\"params\">...args, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">arch</span>.<span class=\"title function_\">callAsync</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AsyncParallelHook</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AsyncParallelHook</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">callAsync</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = args.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">done</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">      idx++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (idx === <span class=\"variable language_\">this</span>,tasks.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">t</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">task</span>(...args, done)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"title function_\">tapPromise</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">push</span>(cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">promise</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">t</span> =&gt;</span> <span class=\"title function_\">t</span>(arg)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">tapAsync</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">push</span>(cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AsyncSeries</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AsyncSeries</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">callAsync</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = args.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">next</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"property\">length</span> === idx) <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tsk = <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>[index++];</span><br><span class=\"line\">      <span class=\"title function_\">tsk</span>(...arg, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">next</span>()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">tapAsync</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">push</span>(cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AsyncSeriesWaterfallHook</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AsyncSeriesWaterfallHook</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">callAsync</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = args.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">next</span> = (<span class=\"params\">error, data</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tsk = <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>[index];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!tsk) <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">      <span class=\"title function_\">tsk</span>(...arg, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index === <span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">task</span>(...args, next)</span><br><span class=\"line\">    index !== <span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">task</span>(data, next)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">tapAsync</span>(<span class=\"params\">name, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tasks</span>.<span class=\"title function_\">push</span>(cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Webpack KING！！ (四)","date":"2019-09-16T16:00:00.000Z","cover":"https://raw.githubusercontent.com/webpack-contrib/awesome-webpack/master/media/awesome_webpack_branding.png","_content":"# webpack king（四）\n\n## 常用插件\n\n**ManifestPlugin**\n\n**DefinePlugin**\n\n**ForkTsCheckerWebpackPlugin**\n\n**HotModuleReplacementPlugin**\n\n**optimization**\n\n**TerserPlugin**\n\n**BundleAnalyzerPlugin**\n\n**PnpWebpackPlugin**\n\n","source":"_posts/webpack4.md","raw":"title: Webpack KING！！ (四)\ndate: 2019/09/17\ncover: https://raw.githubusercontent.com/webpack-contrib/awesome-webpack/master/media/awesome_webpack_branding.png\ncategories:\n- tool\ntags:\n- webpack\n\n---\n# webpack king（四）\n\n## 常用插件\n\n**ManifestPlugin**\n\n**DefinePlugin**\n\n**ForkTsCheckerWebpackPlugin**\n\n**HotModuleReplacementPlugin**\n\n**optimization**\n\n**TerserPlugin**\n\n**BundleAnalyzerPlugin**\n\n**PnpWebpackPlugin**\n\n","slug":"webpack4","published":1,"updated":"2024-04-10T17:46:25.879Z","_id":"cluvjqddu001r0wpd37rjesoz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"webpack-king（四）\"><a href=\"#webpack-king（四）\" class=\"headerlink\" title=\"webpack king（四）\"></a>webpack king（四）</h1><h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><p><strong>ManifestPlugin</strong></p>\n<p><strong>DefinePlugin</strong></p>\n<p><strong>ForkTsCheckerWebpackPlugin</strong></p>\n<p><strong>HotModuleReplacementPlugin</strong></p>\n<p><strong>optimization</strong></p>\n<p><strong>TerserPlugin</strong></p>\n<p><strong>BundleAnalyzerPlugin</strong></p>\n<p><strong>PnpWebpackPlugin</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack-king（四）\"><a href=\"#webpack-king（四）\" class=\"headerlink\" title=\"webpack king（四）\"></a>webpack king（四）</h1><h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><p><strong>ManifestPlugin</strong></p>\n<p><strong>DefinePlugin</strong></p>\n<p><strong>ForkTsCheckerWebpackPlugin</strong></p>\n<p><strong>HotModuleReplacementPlugin</strong></p>\n<p><strong>optimization</strong></p>\n<p><strong>TerserPlugin</strong></p>\n<p><strong>BundleAnalyzerPlugin</strong></p>\n<p><strong>PnpWebpackPlugin</strong></p>\n"},{"title":"react v16 源码分析","date":"2019-12-24T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/3.png","_content":"\n![rs](https://technologybook.tech/assets/img/3.png)\n\n# react source code\n\n## 屏幕刷新\n\n> 屏幕刷新率一般是 16.6ms\n\n#### 一个完整的帧的渲染过程\n\n1. input events（Blocking input events(touch/scroll) / non-blocking input event(click/keypress)）\n2. timer\n3. 每一帧执行的事件(resize/scroll/media query change)\n4. rAF（绘制前执行）\n5. layout(recalculate style/update layout)\n6. paint(compositing/paint invalidation/record)\n7. Idle (idle callback)\n\n![image-20210304153048312](https://technologybook.tech/assets/img/3.png)\n\n> ***v8执行js和page render 是在同一个渲染线程，因此GUI渲染和js执行是互斥的。***\n\n#### API: requestAnimationCallback / requestIdleCallback\n\n> `requestAnimationFrame`: 的时间间隔与屏幕刷新率相关，rAF可以保证每一帧都只执行一次，且每一次执行的时机最优为屏幕刷新一次的时间（60fps 则为 16.6ms）；\n>\n> `requestIdleCallback`: **检测浏览器空闲并执行任务。**（判断是否耗时大于当前帧执行时间，有空余即执行）\n>\n> 1. rIC像浏览器申请时间片\n> 2. 等待渲染布局绘制资源加载事件执行完毕\n> 3. 分配时间片 (初始化为5ms)\n>\n> ```javascript\n> \n>   // Scheduler periodically yields in case there is other work on the main\n>   // thread, like user events. By default, it yields multiple times per frame.\n>   // It does not attempt to align with frame boundaries, since most tasks don't\n>   // need to be frame aligned; for those that do, use requestAnimationFrame.\n>   let yieldInterval = 5;\n>   const maxYieldInterval = 300;\n>   let needsPaint = false;\n> ```\n>\n>\n>\n> ​ 4. 归还控制权\n>\n> 若浏览器一直繁忙，`requestIdleCallback` 注册的任务有可能一直挂起。可通过设置 `timeout`来保证超时执行。\n\n\n\n---\n\n## Fiber\n\n1. 为什么是fiber?\n\n> 为了弥补老架构基于堆栈递归不可中断导致DOM渲染不完全的问题，创造出可以中断更新在恢复的Fiber架构。\n\n2. 为什么不是generator function？\n\n> generator会污染其他函数，彻底改变框架的使用方式,导致使用成本的增加。\n>\n> v16任务调度优先级不能很好的实现 [原因](https://github.com/facebook/react/issues/7942#issuecomment-254987818)\n\n\n\n![Untitled Diagram ](https://technologybook.tech/assets/img/5.png)\n\n## fiber包括什么及其作用\n\n1. **Tag/type/props**: 等描述一个组件如何在页面渲染的信息。\n2. **effectTag/lastEffect / fisrtEffect / nextEffect**:  所组成的 Effect List 收集进行过副作用操作的fiber最终遍历更新。\n3. **hooks/updateQuene**: 在组件的中的setState和hooks的更新方式\n4. **expirationTime**: 任务更新优先级\n5. **alternate**: 利用双缓存进行优化更新的手段currentFiber与alternate指向的oldFiber比较（diff）。\n6. **child/return/sibling**: fiber的基本结构\n\n### reconciliation\n\n> 老架构: React递归的对比vdom，通过diff然后更新，在此期间js一直执行，阻塞用户操作的响应，产生卡顿的感觉。\n>\n> 问题: 不可中断，执行栈过深时的性能问题。\n>\n> 新架构: 基于fiber的可中断的reconciliation，react会在空闲时间片执行任务,解决了网络IO带来的用户体验问题。\n\n> v15是基于堆栈的，Reconciler。先 mountComponent后updateComponennt递归向下执行。\n>\n> v16是链表二叉树通过EffectTag确定TAG然后对有Effect的fiber进行相应的操作统一处理完成后交给renderer处理\n\n```typescript\nexport interface Fiber {\n    root?: null;\n    child?: IRoot;\n    sibling?: IRoot;\n    return?: IRoot;\n    firstEffect?: IRoot | null,\n    lastEffect?: IRoot | null,\n    nextEffect?: IRoot | null\n}\n\nexport interface IRoot extends Fiber {\n    tag: symbol;\n    type: string | keyof HTMLMapElement | Component<any> | Function;\n    props: {\n        children: ReactElement[],\n        text?: string\n    } & { [K in string]: any },\n    node: null | HTMLElement | Component;\n    return?: IRoot,\n    alternate?: IRoot,\n    hooks?: any\n    effectTag?: symbol | null,\n    updateQueue?: UpdateQueue,\n    ref?: Ref\n    expirationTime: number\n}\n```\n\n### vdom\n\n> 通过js描述页面元素的方式 React.creatELement\n\n### 执行过程\n\n1. 从根节点的渲染调度\n    1. diff diff两个vdom进行增量的更新创建，基于rIC实现可以暂停的比较，更新。\n    2. render 生成fiber, 收集产生的side effect\n    3. firstEffect 指向第一个有effect的fiber lastEffect指向最后一个有副作用的child fiber\n    4. commit dom创建不能暂停\n\n2. 调度优先级 expirationTime\n\n### 双缓存机制\n\n![123](https://technologybook.tech/assets/img/4.png)\n\n```typescript\nfunction createWorkInProgress(current, pendingProps) {\n    var workInProgress = current.alternate;\n    if (workInProgress === null) {\n        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n    }\n\n```\n\n```typescript\n    // 第二次的更新\nif (currentRoot && currentRoot.alternate) {\n    workInProgressRoot = currentRoot.alternate;\n    workInProgressRoot.alternate = currentRoot;\n    if (fiberRoot) workInProgressRoot.props = fiberRoot.props;\n\n    // 第一次更新\n} else if (currentRoot) {\n    if (fiberRoot) {\n        fiberRoot.alternate = currentRoot;\n        workInProgressRoot = fiberRoot;\n    } else {\n        workInProgressRoot = {\n            ...currentRoot,\n            alternate: currentRoot,\n        }\n    }\n} else {\n    workInProgressRoot = fiberRoot;\n}\nif (workInProgressRoot) {\n    workInProgressRoot.firstEffect = workInProgressRoot.lastEffect = workInProgressRoot.nextEffect = null;\n}\nnextUnitOfWork = fiberRoot;\n```\n\nFiber上的`alternate`属性是双缓存（bouble buffering）的关键，它指向一个 Fiber，创建 WorkInProgress 节点时优先取`alternate`，没有的话就创建一个新的。\n\nWorkInProgress是渲染到屏幕上fiber的最终状态\n\n创建 WorkInProgress Tree 的过程是一个 Diff 的过程，Diff的结果是一个Effect list，\n\neffect list 最终会生成一个 effect的单链表，在commit阶段会迭代这个链表，通过effectTag 来决定如何UPDATE进而确定如何处理dom。\n\n### beginwork\n\n> 分配到时间片后，从fiberroot开始后序遍历fiber tree，在此阶段创建fiber。\n\n```typescript\n// 构建fiber阶段\n\nfunction updateHostRoot(fiber: IRoot) {\n    let newChildren = fiber.props.children;\n    reconcileChildren(fiber, newChildren);\n}\n\nfunction updateDOM(stateNode: HTMLElement, oldProps: IRoot[\"props\"], newProps: IRoot[\"props\"]) {\n    setProps(stateNode, oldProps, newProps);\n}\n\nfunction createDOM(fiber: IRoot): HTMLElement | null {\n    if (fiber.tag === ReaxTypes.NODE_TEXT) {\n        return document.createTextNode(fiber.props?.text || \"\") as any;\n    }\n    if (fiber.tag === ReaxTypes.NODE_HOST) {\n        let stateNode = document.createElement(fiber.type as keyof HTMLElementTagNameMap);\n        updateDOM(stateNode, {} as any, fiber.props);\n        return stateNode;\n    }\n    return null;\n}\n\nfunction updateHostText(fiber: IRoot) {\n    if (!fiber.node) {\n        fiber.node = createDOM(fiber)\n    }\n}\n\nfunction updateHost(fiber: IRoot) {\n    if (!fiber.node) {\n        fiber.node = createDOM(fiber)\n    }\n    const newChildren = fiber.props.children;\n    reconcileChildren(fiber, newChildren);\n}\n\nfunction beginWork(fiber: IRoot) {\n    if (fiber.tag === ReaxTypes.ROOT) {\n        updateHostRoot(fiber);\n    } else if (fiber.tag === ReaxTypes.NODE_TEXT) {\n        updateHostText(fiber);\n    } else if (fiber.tag === ReaxTypes.NODE_HOST) {\n        updateHost(fiber);\n    } else if (fiber.tag === ReaxTypes.NODE_CLASS) {\n        updateClassComp(fiber)\n    } else if (fiber.tag === ReaxTypes.NODE_FUNCTION) {\n        updateFunctionComp(fiber)\n    }\n}\n```\n\n## completework\n\n```typescript\n// 副作用收集\nfunction completeUnitOfWork(nextUnitOfWork: IRoot) {\n    let returnFiber = nextUnitOfWork.return;\n    if (returnFiber) {\n        if (!returnFiber.firstEffect) {\n            returnFiber.firstEffect = nextUnitOfWork.firstEffect;\n        }\n        if (nextUnitOfWork.lastEffect) {\n            if (returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = nextUnitOfWork.firstEffect;\n            }\n            returnFiber.lastEffect = nextUnitOfWork.lastEffect;\n        }\n        const effectTag = nextUnitOfWork.effectTag\n        if (effectTag) {\n            if (returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = nextUnitOfWork;\n            } else {\n                returnFiber.firstEffect = nextUnitOfWork;\n            }\n            returnFiber.lastEffect = nextUnitOfWork;\n        }\n    }\n}\n```\n\n## commitWork\n\n```typescript\nfunction commitWork(fiber: IRoot) {\n    if (!fiber) return;\n    let retFiber = fiber.return as IRoot;\n    while (retFiber.tag !== NODE_HOST && retFiber.tag !== ROOT && retFiber.tag !== NODE_TEXT) {\n        retFiber = retFiber.return as IRoot;\n    }\n    let retDOM = retFiber.node as HTMLElement;\n    if (fiber.effectTag === ReaxTypes.PLACEMENT && retDOM) {\n        let nextFiber = fiber;\n        if (nextFiber.tag === NODE_CLASS) return;\n        while (nextFiber.tag !== NODE_HOST && nextFiber.tag !== NODE_TEXT) {\n            nextFiber = fiber.child as IRoot;\n        }\n        retDOM.appendChild(nextFiber.node as HTMLElement);\n    }\n    if (fiber.effectTag === ReaxTypes.DELETION && retDOM) {\n        return commitDeletion(fiber, retDOM);\n    }\n    if (fiber.effectTag === ReaxTypes.UPDATE && retDOM) {\n        if (fiber.type === ELEMENT_TEXT) {\n            if (fiber.alternate?.props.text != fiber.props.text) {\n                if (fiber.node) {\n                    (fiber.node as HTMLElement).textContent = fiber.props.text as string;\n                }\n            }\n        } else {\n            if (fiber.tag === NODE_CLASS) {\n                return\n            }\n            fiber.node && updateDOM((fiber.node as HTMLElement), fiber.alternate?.props || {} as IRoot[\"props\"], fiber.props);\n        }\n    }\n    fiber.effectTag = null;\n}\n```\n\n### Diff\n\n1. Child 类型为`object`、`number`、`string`\n\n> 比较key/type/tag相同确定是否有可服用的statenode，如果没有直接删除生成一个新的fiber节点\n\n```javascript\nfunction reconcileSingleElement (\n  returnFiber: Fiber,\n  currentFirstChild: Fiber | null,\n  element: ReactElement,\n  expirationTime: ExpirationTime,\n): Fiber {\n  const key = element.key;\n  let child = currentFirstChild;\n  while (child !== null) {\n    // TODO: If key === null and child.key === null, then this only applies to\n    // the first item in the list.\n    if (child.key === key) {\n      if (\n        child.tag === Fragment\n          ? element.type === REACT_FRAGMENT_TYPE\n          : child.elementType === element.type\n      ) {\n        deleteRemainingChildren(returnFiber, child.sibling);\n        const existing = useFiber(\n          child,\n          element.type === REACT_FRAGMENT_TYPE\n            ? element.props.children\n            : element.props,\n          expirationTime,\n        );\n        existing.ref = coerceRef(returnFiber, child, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      } else {\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      }\n    } else {\n      deleteChild(returnFiber, child);\n    }\n    child = child.sibling;\n  }\n\n  if (element.type === REACT_FRAGMENT_TYPE) {\n    const created = createFiberFromFragment(\n      element.props.children,\n      returnFiber.mode,\n      expirationTime,\n      element.key,\n    );\n    created.return = returnFiber;\n    return created;\n  } else {\n    const created = createFiberFromElement(\n      element,\n      returnFiber.mode,\n      expirationTime,\n    );\n    created.ref = coerceRef(returnFiber, currentFirstChild, element);\n    created.return = returnFiber;\n    return created;\n  }\n}\n\n```\n\n1. Child`newChild`类型为`Array`\n\n> 因为有EffectTag，所以有限判断状态为UPDATE的节点再处理为DELECTION和PLACEMENT的节点。\n>\n> 比较方法 type/key不同则直接DELECTION\n\n```javascript\nfunction reconcileChildrenArray (\n  returnFiber: Fiber,\n  currentFirstChild: Fiber | null,\n  newChildren: Array<*>,\n  expirationTime: ExpirationTime,\n): Fiber | null {\n  // This algorithm can't optimize by searching from both ends since we\n  // don't have backpointers on fibers. I'm trying to see how far we can get\n  // with that model. If it ends up not being worth the tradeoffs, we can\n  // add it later.\n\n  // Even with a two ended optimization, we'd want to optimize for the case\n  // where there are few changes and brute force the comparison instead of\n  // going for the Map. It'd like to explore hitting that path first in\n  // forward-only mode and only go for the Map once we notice that we need\n  // lots of look ahead. This doesn't handle reversal as well as two ended\n  // search but that's unusual. Besides, for the two ended optimization to\n  // work on Iterables, we'd need to copy the whole set.\n\n  // In this first iteration, we'll just live with hitting the bad case\n  // (adding everything to a Map) in for every insert/move.\n\n  // If you change this code, also update reconcileChildrenIterator() which\n  // uses the same algorithm.\n\n  if (__DEV__) {\n    // First, validate keys.\n    let knownKeys = null;\n    for (let i = 0; i < newChildren.length; i++) {\n      const child = newChildren[i];\n      knownKeys = warnOnInvalidKey(child, knownKeys);\n    }\n  }\n\n  let resultingFirstChild: Fiber | null = null;\n  let previousNewFiber: Fiber | null = null;\n\n  let oldFiber = currentFirstChild;\n  let lastPlacedIndex = 0;\n  let newIdx = 0;\n  let nextOldFiber = null;\n  for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n    if (oldFiber.index > newIdx) {\n      nextOldFiber = oldFiber;\n      oldFiber = null;\n    } else {\n      nextOldFiber = oldFiber.sibling;\n    }\n    const newFiber = updateSlot(\n      returnFiber,\n      oldFiber,\n      newChildren[newIdx],\n      expirationTime,\n    );\n    if (newFiber === null) {\n      // TODO: This breaks on empty slots like null children. That's\n      // unfortunate because it triggers the slow path all the time. We need\n      // a better way to communicate whether this was a miss or null,\n      // boolean, undefined, etc.\n      if (oldFiber === null) {\n        oldFiber = nextOldFiber;\n      }\n      break;\n    }\n    if (shouldTrackSideEffects) {\n      if (oldFiber && newFiber.alternate === null) {\n        // We matched the slot, but we didn't reuse the existing fiber, so we\n        // need to delete the existing child.\n        deleteChild(returnFiber, oldFiber);\n      }\n    }\n    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n    if (previousNewFiber === null) {\n      // TODO: Move out of the loop. This only happens for the first run.\n      resultingFirstChild = newFiber;\n    } else {\n      // TODO: Defer siblings if we're not at the right index for this slot.\n      // I.e. if we had null values before, then we want to defer this\n      // for each null value. However, we also don't want to call updateSlot\n      // with the previous one.\n      previousNewFiber.sibling = newFiber;\n    }\n    previousNewFiber = newFiber;\n    oldFiber = nextOldFiber;\n  }\n\n  if (newIdx === newChildren.length) {\n    // We've reached the end of the new children. We can delete the rest.\n    deleteRemainingChildren(returnFiber, oldFiber);\n    return resultingFirstChild;\n  }\n\n  if (oldFiber === null) {\n    // If we don't have any more existing children we can choose a fast path\n    // since the rest will all be insertions.\n    for (; newIdx < newChildren.length; newIdx++) {\n```\n\n### 节点移动的算法\n\n1234 -> 1423\n\n1. L(1) === R(1) equal => lastPlacedIndex = Idx(1) = 0;\n2. L(2) !== R(4)  => oldIndex = Idx(4) = 3 > 0 => 不动 => lastPlacedIndex = 3\n\n> if (oldIndex >= lastPlacedIndex) {\n>\n> 不动\n>\n> lastPlacedIndex = oldIndex\n>\n> } else {\n>\n> 移动到右边\n>\n> }\n\n3. oldIndx(R(2)) = 1 < 3 => 右移\n4. oldIndex(R(3)) = 2 < 3 => 右移\n\n## commit\n\n```typescript\nfunction commitRoot() {\n    deletions.forEach(commitWork);\n    let fiber = workInProgressRoot?.firstEffect;\n    while (fiber) {\n        commitWork(fiber);\n        fiber = fiber.nextEffect;\n    }\n    deletions.length = 0;\n    currentRoot = workInProgressRoot;\n    workInProgressRoot = null;\n}\n\n```\n\n```javascript\n    // 源码中的处理\n// Check if work was scheduled by one of the effects\nconst rootExpirationTime = root.expirationTime;\nif (rootExpirationTime !== NoWork) {\n  requestWork(root, rootExpirationTime);\n}\n// Flush any sync work that was scheduled by effects\nif (!isBatchingUpdates && !isRendering) {\n  performSyncWork();\n}\n\nfunction commitRoot (root: FiberRoot, finishedWork: Fiber): void {\n  isWorking = true;\n  isCommitting = true;\n  startCommitTimer();\n\n  invariant(\n    root.current !== finishedWork,\n    'Cannot commit the same tree as before. This is probably a bug ' +\n    'related to the return field. This error is likely caused by a bug ' +\n    'in React. Please file an issue.',\n  );\n  const committedExpirationTime = root.pendingCommitExpirationTime;\n  invariant(\n    committedExpirationTime !== NoWork,\n    'Cannot commit an incomplete root. This error is likely caused by a ' +\n    'bug in React. Please file an issue.',\n  );\n  root.pendingCommitExpirationTime = NoWork;\n\n  // Update the pending priority levels to account for the work that we are\n  // about to commit. This needs to happen before calling the lifecycles, since\n  // they may schedule additional updates.\n  const updateExpirationTimeBeforeCommit = finishedWork.expirationTime;\n  const childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;\n  const earliestRemainingTimeBeforeCommit =\n    childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit\n      ? childExpirationTimeBeforeCommit\n      : updateExpirationTimeBeforeCommit;\n  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);\n\n  let prevInteractions: Set<Interaction> = (null: any);\n  if (enableSchedulerTracing) {\n    // Restore any pending interactions at this point,\n    // So that cascading work triggered during the render phase will be accounted for.\n    prevInteractions = __interactionsRef.current;\n    __interactionsRef.current = root.memoizedInteractions;\n  }\n\n  // Reset this to null before calling lifecycles\n  ReactCurrentOwner.current = null;\n\n  let firstEffect;\n  if (finishedWork.effectTag > PerformedWork) {\n    // A fiber's effect list consists only of its children, not itself. So if\n    // the root has an effect, we need to add it to the end of the list. The\n    // resulting list is the set that would belong to the root's parent, if\n    // it had one; that is, all the effects in the tree including the root.\n    if (finishedWork.lastEffect !== null) {\n      finishedWork.lastEffect.nextEffect = finishedWork;\n      firstEffect = finishedWork.firstEffect;\n    } else {\n      firstEffect = finishedWork;\n```\n\n## hooks\n\n```typescript\n\nexport function scheduleWorkToRoot(fiberRoot?: IRoot) {\n    // 第二次的更新\n    if (currentRoot && currentRoot.alternate) {\n        workInProgressRoot = currentRoot.alternate;\n        workInProgressRoot.alternate = currentRoot;\n        if (fiberRoot) workInProgressRoot.props = fiberRoot.props;\n\n        // 第一次更新\n    } else if (currentRoot) {\n        if (fiberRoot) {\n            fiberRoot.alternate = currentRoot;\n            workInProgressRoot = fiberRoot;\n        } else {\n            workInProgressRoot = {\n                ...currentRoot,\n                alternate: currentRoot,\n            }\n        }\n    } else {\n        workInProgressRoot = fiberRoot;\n    }\n    if (workInProgressRoot) {\n        workInProgressRoot.firstEffect = workInProgressRoot.lastEffect = workInProgressRoot.nextEffect = null;\n    }\n    nextUnitOfWork = fiberRoot;\n}\n```\n\n----\n\n以下为新版本的一些更新（from kasong blog）\n\n![DZQFUlCU0AAkFI5](https://technologybook.tech/assets/img/1.jpeg)\n\n![DZQFWC2VAAEHUln](https://technologybook.tech/assets/img/2.jpeg)\n\n> 在`processUpdateQueue`方法中，`shared.pending`环状链表会被剪开并拼接在`baseUpdate`后面。(from kasong blog)\n>\n> 优先级高的会在updateQueue.shared.pending 中形成环，\n>\n> 第一阶段 按链表的顺序\n>\n> 第二阶段 按优先级\n\n###     ","source":"_posts/react_v16.md","raw":"---\ntitle: react v16 源码分析\ndate: 2019/12/25\ncover: https://technologybook.tech/assets/img/3.png\ncategories:\n- react\ntags:\n- react source\n\n---\n\n![rs](https://technologybook.tech/assets/img/3.png)\n\n# react source code\n\n## 屏幕刷新\n\n> 屏幕刷新率一般是 16.6ms\n\n#### 一个完整的帧的渲染过程\n\n1. input events（Blocking input events(touch/scroll) / non-blocking input event(click/keypress)）\n2. timer\n3. 每一帧执行的事件(resize/scroll/media query change)\n4. rAF（绘制前执行）\n5. layout(recalculate style/update layout)\n6. paint(compositing/paint invalidation/record)\n7. Idle (idle callback)\n\n![image-20210304153048312](https://technologybook.tech/assets/img/3.png)\n\n> ***v8执行js和page render 是在同一个渲染线程，因此GUI渲染和js执行是互斥的。***\n\n#### API: requestAnimationCallback / requestIdleCallback\n\n> `requestAnimationFrame`: 的时间间隔与屏幕刷新率相关，rAF可以保证每一帧都只执行一次，且每一次执行的时机最优为屏幕刷新一次的时间（60fps 则为 16.6ms）；\n>\n> `requestIdleCallback`: **检测浏览器空闲并执行任务。**（判断是否耗时大于当前帧执行时间，有空余即执行）\n>\n> 1. rIC像浏览器申请时间片\n> 2. 等待渲染布局绘制资源加载事件执行完毕\n> 3. 分配时间片 (初始化为5ms)\n>\n> ```javascript\n> \n>   // Scheduler periodically yields in case there is other work on the main\n>   // thread, like user events. By default, it yields multiple times per frame.\n>   // It does not attempt to align with frame boundaries, since most tasks don't\n>   // need to be frame aligned; for those that do, use requestAnimationFrame.\n>   let yieldInterval = 5;\n>   const maxYieldInterval = 300;\n>   let needsPaint = false;\n> ```\n>\n>\n>\n> ​ 4. 归还控制权\n>\n> 若浏览器一直繁忙，`requestIdleCallback` 注册的任务有可能一直挂起。可通过设置 `timeout`来保证超时执行。\n\n\n\n---\n\n## Fiber\n\n1. 为什么是fiber?\n\n> 为了弥补老架构基于堆栈递归不可中断导致DOM渲染不完全的问题，创造出可以中断更新在恢复的Fiber架构。\n\n2. 为什么不是generator function？\n\n> generator会污染其他函数，彻底改变框架的使用方式,导致使用成本的增加。\n>\n> v16任务调度优先级不能很好的实现 [原因](https://github.com/facebook/react/issues/7942#issuecomment-254987818)\n\n\n\n![Untitled Diagram ](https://technologybook.tech/assets/img/5.png)\n\n## fiber包括什么及其作用\n\n1. **Tag/type/props**: 等描述一个组件如何在页面渲染的信息。\n2. **effectTag/lastEffect / fisrtEffect / nextEffect**:  所组成的 Effect List 收集进行过副作用操作的fiber最终遍历更新。\n3. **hooks/updateQuene**: 在组件的中的setState和hooks的更新方式\n4. **expirationTime**: 任务更新优先级\n5. **alternate**: 利用双缓存进行优化更新的手段currentFiber与alternate指向的oldFiber比较（diff）。\n6. **child/return/sibling**: fiber的基本结构\n\n### reconciliation\n\n> 老架构: React递归的对比vdom，通过diff然后更新，在此期间js一直执行，阻塞用户操作的响应，产生卡顿的感觉。\n>\n> 问题: 不可中断，执行栈过深时的性能问题。\n>\n> 新架构: 基于fiber的可中断的reconciliation，react会在空闲时间片执行任务,解决了网络IO带来的用户体验问题。\n\n> v15是基于堆栈的，Reconciler。先 mountComponent后updateComponennt递归向下执行。\n>\n> v16是链表二叉树通过EffectTag确定TAG然后对有Effect的fiber进行相应的操作统一处理完成后交给renderer处理\n\n```typescript\nexport interface Fiber {\n    root?: null;\n    child?: IRoot;\n    sibling?: IRoot;\n    return?: IRoot;\n    firstEffect?: IRoot | null,\n    lastEffect?: IRoot | null,\n    nextEffect?: IRoot | null\n}\n\nexport interface IRoot extends Fiber {\n    tag: symbol;\n    type: string | keyof HTMLMapElement | Component<any> | Function;\n    props: {\n        children: ReactElement[],\n        text?: string\n    } & { [K in string]: any },\n    node: null | HTMLElement | Component;\n    return?: IRoot,\n    alternate?: IRoot,\n    hooks?: any\n    effectTag?: symbol | null,\n    updateQueue?: UpdateQueue,\n    ref?: Ref\n    expirationTime: number\n}\n```\n\n### vdom\n\n> 通过js描述页面元素的方式 React.creatELement\n\n### 执行过程\n\n1. 从根节点的渲染调度\n    1. diff diff两个vdom进行增量的更新创建，基于rIC实现可以暂停的比较，更新。\n    2. render 生成fiber, 收集产生的side effect\n    3. firstEffect 指向第一个有effect的fiber lastEffect指向最后一个有副作用的child fiber\n    4. commit dom创建不能暂停\n\n2. 调度优先级 expirationTime\n\n### 双缓存机制\n\n![123](https://technologybook.tech/assets/img/4.png)\n\n```typescript\nfunction createWorkInProgress(current, pendingProps) {\n    var workInProgress = current.alternate;\n    if (workInProgress === null) {\n        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n    }\n\n```\n\n```typescript\n    // 第二次的更新\nif (currentRoot && currentRoot.alternate) {\n    workInProgressRoot = currentRoot.alternate;\n    workInProgressRoot.alternate = currentRoot;\n    if (fiberRoot) workInProgressRoot.props = fiberRoot.props;\n\n    // 第一次更新\n} else if (currentRoot) {\n    if (fiberRoot) {\n        fiberRoot.alternate = currentRoot;\n        workInProgressRoot = fiberRoot;\n    } else {\n        workInProgressRoot = {\n            ...currentRoot,\n            alternate: currentRoot,\n        }\n    }\n} else {\n    workInProgressRoot = fiberRoot;\n}\nif (workInProgressRoot) {\n    workInProgressRoot.firstEffect = workInProgressRoot.lastEffect = workInProgressRoot.nextEffect = null;\n}\nnextUnitOfWork = fiberRoot;\n```\n\nFiber上的`alternate`属性是双缓存（bouble buffering）的关键，它指向一个 Fiber，创建 WorkInProgress 节点时优先取`alternate`，没有的话就创建一个新的。\n\nWorkInProgress是渲染到屏幕上fiber的最终状态\n\n创建 WorkInProgress Tree 的过程是一个 Diff 的过程，Diff的结果是一个Effect list，\n\neffect list 最终会生成一个 effect的单链表，在commit阶段会迭代这个链表，通过effectTag 来决定如何UPDATE进而确定如何处理dom。\n\n### beginwork\n\n> 分配到时间片后，从fiberroot开始后序遍历fiber tree，在此阶段创建fiber。\n\n```typescript\n// 构建fiber阶段\n\nfunction updateHostRoot(fiber: IRoot) {\n    let newChildren = fiber.props.children;\n    reconcileChildren(fiber, newChildren);\n}\n\nfunction updateDOM(stateNode: HTMLElement, oldProps: IRoot[\"props\"], newProps: IRoot[\"props\"]) {\n    setProps(stateNode, oldProps, newProps);\n}\n\nfunction createDOM(fiber: IRoot): HTMLElement | null {\n    if (fiber.tag === ReaxTypes.NODE_TEXT) {\n        return document.createTextNode(fiber.props?.text || \"\") as any;\n    }\n    if (fiber.tag === ReaxTypes.NODE_HOST) {\n        let stateNode = document.createElement(fiber.type as keyof HTMLElementTagNameMap);\n        updateDOM(stateNode, {} as any, fiber.props);\n        return stateNode;\n    }\n    return null;\n}\n\nfunction updateHostText(fiber: IRoot) {\n    if (!fiber.node) {\n        fiber.node = createDOM(fiber)\n    }\n}\n\nfunction updateHost(fiber: IRoot) {\n    if (!fiber.node) {\n        fiber.node = createDOM(fiber)\n    }\n    const newChildren = fiber.props.children;\n    reconcileChildren(fiber, newChildren);\n}\n\nfunction beginWork(fiber: IRoot) {\n    if (fiber.tag === ReaxTypes.ROOT) {\n        updateHostRoot(fiber);\n    } else if (fiber.tag === ReaxTypes.NODE_TEXT) {\n        updateHostText(fiber);\n    } else if (fiber.tag === ReaxTypes.NODE_HOST) {\n        updateHost(fiber);\n    } else if (fiber.tag === ReaxTypes.NODE_CLASS) {\n        updateClassComp(fiber)\n    } else if (fiber.tag === ReaxTypes.NODE_FUNCTION) {\n        updateFunctionComp(fiber)\n    }\n}\n```\n\n## completework\n\n```typescript\n// 副作用收集\nfunction completeUnitOfWork(nextUnitOfWork: IRoot) {\n    let returnFiber = nextUnitOfWork.return;\n    if (returnFiber) {\n        if (!returnFiber.firstEffect) {\n            returnFiber.firstEffect = nextUnitOfWork.firstEffect;\n        }\n        if (nextUnitOfWork.lastEffect) {\n            if (returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = nextUnitOfWork.firstEffect;\n            }\n            returnFiber.lastEffect = nextUnitOfWork.lastEffect;\n        }\n        const effectTag = nextUnitOfWork.effectTag\n        if (effectTag) {\n            if (returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = nextUnitOfWork;\n            } else {\n                returnFiber.firstEffect = nextUnitOfWork;\n            }\n            returnFiber.lastEffect = nextUnitOfWork;\n        }\n    }\n}\n```\n\n## commitWork\n\n```typescript\nfunction commitWork(fiber: IRoot) {\n    if (!fiber) return;\n    let retFiber = fiber.return as IRoot;\n    while (retFiber.tag !== NODE_HOST && retFiber.tag !== ROOT && retFiber.tag !== NODE_TEXT) {\n        retFiber = retFiber.return as IRoot;\n    }\n    let retDOM = retFiber.node as HTMLElement;\n    if (fiber.effectTag === ReaxTypes.PLACEMENT && retDOM) {\n        let nextFiber = fiber;\n        if (nextFiber.tag === NODE_CLASS) return;\n        while (nextFiber.tag !== NODE_HOST && nextFiber.tag !== NODE_TEXT) {\n            nextFiber = fiber.child as IRoot;\n        }\n        retDOM.appendChild(nextFiber.node as HTMLElement);\n    }\n    if (fiber.effectTag === ReaxTypes.DELETION && retDOM) {\n        return commitDeletion(fiber, retDOM);\n    }\n    if (fiber.effectTag === ReaxTypes.UPDATE && retDOM) {\n        if (fiber.type === ELEMENT_TEXT) {\n            if (fiber.alternate?.props.text != fiber.props.text) {\n                if (fiber.node) {\n                    (fiber.node as HTMLElement).textContent = fiber.props.text as string;\n                }\n            }\n        } else {\n            if (fiber.tag === NODE_CLASS) {\n                return\n            }\n            fiber.node && updateDOM((fiber.node as HTMLElement), fiber.alternate?.props || {} as IRoot[\"props\"], fiber.props);\n        }\n    }\n    fiber.effectTag = null;\n}\n```\n\n### Diff\n\n1. Child 类型为`object`、`number`、`string`\n\n> 比较key/type/tag相同确定是否有可服用的statenode，如果没有直接删除生成一个新的fiber节点\n\n```javascript\nfunction reconcileSingleElement (\n  returnFiber: Fiber,\n  currentFirstChild: Fiber | null,\n  element: ReactElement,\n  expirationTime: ExpirationTime,\n): Fiber {\n  const key = element.key;\n  let child = currentFirstChild;\n  while (child !== null) {\n    // TODO: If key === null and child.key === null, then this only applies to\n    // the first item in the list.\n    if (child.key === key) {\n      if (\n        child.tag === Fragment\n          ? element.type === REACT_FRAGMENT_TYPE\n          : child.elementType === element.type\n      ) {\n        deleteRemainingChildren(returnFiber, child.sibling);\n        const existing = useFiber(\n          child,\n          element.type === REACT_FRAGMENT_TYPE\n            ? element.props.children\n            : element.props,\n          expirationTime,\n        );\n        existing.ref = coerceRef(returnFiber, child, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      } else {\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      }\n    } else {\n      deleteChild(returnFiber, child);\n    }\n    child = child.sibling;\n  }\n\n  if (element.type === REACT_FRAGMENT_TYPE) {\n    const created = createFiberFromFragment(\n      element.props.children,\n      returnFiber.mode,\n      expirationTime,\n      element.key,\n    );\n    created.return = returnFiber;\n    return created;\n  } else {\n    const created = createFiberFromElement(\n      element,\n      returnFiber.mode,\n      expirationTime,\n    );\n    created.ref = coerceRef(returnFiber, currentFirstChild, element);\n    created.return = returnFiber;\n    return created;\n  }\n}\n\n```\n\n1. Child`newChild`类型为`Array`\n\n> 因为有EffectTag，所以有限判断状态为UPDATE的节点再处理为DELECTION和PLACEMENT的节点。\n>\n> 比较方法 type/key不同则直接DELECTION\n\n```javascript\nfunction reconcileChildrenArray (\n  returnFiber: Fiber,\n  currentFirstChild: Fiber | null,\n  newChildren: Array<*>,\n  expirationTime: ExpirationTime,\n): Fiber | null {\n  // This algorithm can't optimize by searching from both ends since we\n  // don't have backpointers on fibers. I'm trying to see how far we can get\n  // with that model. If it ends up not being worth the tradeoffs, we can\n  // add it later.\n\n  // Even with a two ended optimization, we'd want to optimize for the case\n  // where there are few changes and brute force the comparison instead of\n  // going for the Map. It'd like to explore hitting that path first in\n  // forward-only mode and only go for the Map once we notice that we need\n  // lots of look ahead. This doesn't handle reversal as well as two ended\n  // search but that's unusual. Besides, for the two ended optimization to\n  // work on Iterables, we'd need to copy the whole set.\n\n  // In this first iteration, we'll just live with hitting the bad case\n  // (adding everything to a Map) in for every insert/move.\n\n  // If you change this code, also update reconcileChildrenIterator() which\n  // uses the same algorithm.\n\n  if (__DEV__) {\n    // First, validate keys.\n    let knownKeys = null;\n    for (let i = 0; i < newChildren.length; i++) {\n      const child = newChildren[i];\n      knownKeys = warnOnInvalidKey(child, knownKeys);\n    }\n  }\n\n  let resultingFirstChild: Fiber | null = null;\n  let previousNewFiber: Fiber | null = null;\n\n  let oldFiber = currentFirstChild;\n  let lastPlacedIndex = 0;\n  let newIdx = 0;\n  let nextOldFiber = null;\n  for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n    if (oldFiber.index > newIdx) {\n      nextOldFiber = oldFiber;\n      oldFiber = null;\n    } else {\n      nextOldFiber = oldFiber.sibling;\n    }\n    const newFiber = updateSlot(\n      returnFiber,\n      oldFiber,\n      newChildren[newIdx],\n      expirationTime,\n    );\n    if (newFiber === null) {\n      // TODO: This breaks on empty slots like null children. That's\n      // unfortunate because it triggers the slow path all the time. We need\n      // a better way to communicate whether this was a miss or null,\n      // boolean, undefined, etc.\n      if (oldFiber === null) {\n        oldFiber = nextOldFiber;\n      }\n      break;\n    }\n    if (shouldTrackSideEffects) {\n      if (oldFiber && newFiber.alternate === null) {\n        // We matched the slot, but we didn't reuse the existing fiber, so we\n        // need to delete the existing child.\n        deleteChild(returnFiber, oldFiber);\n      }\n    }\n    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n    if (previousNewFiber === null) {\n      // TODO: Move out of the loop. This only happens for the first run.\n      resultingFirstChild = newFiber;\n    } else {\n      // TODO: Defer siblings if we're not at the right index for this slot.\n      // I.e. if we had null values before, then we want to defer this\n      // for each null value. However, we also don't want to call updateSlot\n      // with the previous one.\n      previousNewFiber.sibling = newFiber;\n    }\n    previousNewFiber = newFiber;\n    oldFiber = nextOldFiber;\n  }\n\n  if (newIdx === newChildren.length) {\n    // We've reached the end of the new children. We can delete the rest.\n    deleteRemainingChildren(returnFiber, oldFiber);\n    return resultingFirstChild;\n  }\n\n  if (oldFiber === null) {\n    // If we don't have any more existing children we can choose a fast path\n    // since the rest will all be insertions.\n    for (; newIdx < newChildren.length; newIdx++) {\n```\n\n### 节点移动的算法\n\n1234 -> 1423\n\n1. L(1) === R(1) equal => lastPlacedIndex = Idx(1) = 0;\n2. L(2) !== R(4)  => oldIndex = Idx(4) = 3 > 0 => 不动 => lastPlacedIndex = 3\n\n> if (oldIndex >= lastPlacedIndex) {\n>\n> 不动\n>\n> lastPlacedIndex = oldIndex\n>\n> } else {\n>\n> 移动到右边\n>\n> }\n\n3. oldIndx(R(2)) = 1 < 3 => 右移\n4. oldIndex(R(3)) = 2 < 3 => 右移\n\n## commit\n\n```typescript\nfunction commitRoot() {\n    deletions.forEach(commitWork);\n    let fiber = workInProgressRoot?.firstEffect;\n    while (fiber) {\n        commitWork(fiber);\n        fiber = fiber.nextEffect;\n    }\n    deletions.length = 0;\n    currentRoot = workInProgressRoot;\n    workInProgressRoot = null;\n}\n\n```\n\n```javascript\n    // 源码中的处理\n// Check if work was scheduled by one of the effects\nconst rootExpirationTime = root.expirationTime;\nif (rootExpirationTime !== NoWork) {\n  requestWork(root, rootExpirationTime);\n}\n// Flush any sync work that was scheduled by effects\nif (!isBatchingUpdates && !isRendering) {\n  performSyncWork();\n}\n\nfunction commitRoot (root: FiberRoot, finishedWork: Fiber): void {\n  isWorking = true;\n  isCommitting = true;\n  startCommitTimer();\n\n  invariant(\n    root.current !== finishedWork,\n    'Cannot commit the same tree as before. This is probably a bug ' +\n    'related to the return field. This error is likely caused by a bug ' +\n    'in React. Please file an issue.',\n  );\n  const committedExpirationTime = root.pendingCommitExpirationTime;\n  invariant(\n    committedExpirationTime !== NoWork,\n    'Cannot commit an incomplete root. This error is likely caused by a ' +\n    'bug in React. Please file an issue.',\n  );\n  root.pendingCommitExpirationTime = NoWork;\n\n  // Update the pending priority levels to account for the work that we are\n  // about to commit. This needs to happen before calling the lifecycles, since\n  // they may schedule additional updates.\n  const updateExpirationTimeBeforeCommit = finishedWork.expirationTime;\n  const childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;\n  const earliestRemainingTimeBeforeCommit =\n    childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit\n      ? childExpirationTimeBeforeCommit\n      : updateExpirationTimeBeforeCommit;\n  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);\n\n  let prevInteractions: Set<Interaction> = (null: any);\n  if (enableSchedulerTracing) {\n    // Restore any pending interactions at this point,\n    // So that cascading work triggered during the render phase will be accounted for.\n    prevInteractions = __interactionsRef.current;\n    __interactionsRef.current = root.memoizedInteractions;\n  }\n\n  // Reset this to null before calling lifecycles\n  ReactCurrentOwner.current = null;\n\n  let firstEffect;\n  if (finishedWork.effectTag > PerformedWork) {\n    // A fiber's effect list consists only of its children, not itself. So if\n    // the root has an effect, we need to add it to the end of the list. The\n    // resulting list is the set that would belong to the root's parent, if\n    // it had one; that is, all the effects in the tree including the root.\n    if (finishedWork.lastEffect !== null) {\n      finishedWork.lastEffect.nextEffect = finishedWork;\n      firstEffect = finishedWork.firstEffect;\n    } else {\n      firstEffect = finishedWork;\n```\n\n## hooks\n\n```typescript\n\nexport function scheduleWorkToRoot(fiberRoot?: IRoot) {\n    // 第二次的更新\n    if (currentRoot && currentRoot.alternate) {\n        workInProgressRoot = currentRoot.alternate;\n        workInProgressRoot.alternate = currentRoot;\n        if (fiberRoot) workInProgressRoot.props = fiberRoot.props;\n\n        // 第一次更新\n    } else if (currentRoot) {\n        if (fiberRoot) {\n            fiberRoot.alternate = currentRoot;\n            workInProgressRoot = fiberRoot;\n        } else {\n            workInProgressRoot = {\n                ...currentRoot,\n                alternate: currentRoot,\n            }\n        }\n    } else {\n        workInProgressRoot = fiberRoot;\n    }\n    if (workInProgressRoot) {\n        workInProgressRoot.firstEffect = workInProgressRoot.lastEffect = workInProgressRoot.nextEffect = null;\n    }\n    nextUnitOfWork = fiberRoot;\n}\n```\n\n----\n\n以下为新版本的一些更新（from kasong blog）\n\n![DZQFUlCU0AAkFI5](https://technologybook.tech/assets/img/1.jpeg)\n\n![DZQFWC2VAAEHUln](https://technologybook.tech/assets/img/2.jpeg)\n\n> 在`processUpdateQueue`方法中，`shared.pending`环状链表会被剪开并拼接在`baseUpdate`后面。(from kasong blog)\n>\n> 优先级高的会在updateQueue.shared.pending 中形成环，\n>\n> 第一阶段 按链表的顺序\n>\n> 第二阶段 按优先级\n\n###     ","slug":"react_v16","published":1,"updated":"2024-04-10T17:46:25.878Z","_id":"cluvjqddu001u0wpdf319hl57","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://technologybook.tech/assets/img/3.png\" alt=\"rs\"></p>\n<h1 id=\"react-source-code\"><a href=\"#react-source-code\" class=\"headerlink\" title=\"react source code\"></a>react source code</h1><h2 id=\"屏幕刷新\"><a href=\"#屏幕刷新\" class=\"headerlink\" title=\"屏幕刷新\"></a>屏幕刷新</h2><blockquote>\n<p>屏幕刷新率一般是 16.6ms</p>\n</blockquote>\n<h4 id=\"一个完整的帧的渲染过程\"><a href=\"#一个完整的帧的渲染过程\" class=\"headerlink\" title=\"一个完整的帧的渲染过程\"></a>一个完整的帧的渲染过程</h4><ol>\n<li>input events（Blocking input events(touch&#x2F;scroll) &#x2F; non-blocking input event(click&#x2F;keypress)）</li>\n<li>timer</li>\n<li>每一帧执行的事件(resize&#x2F;scroll&#x2F;media query change)</li>\n<li>rAF（绘制前执行）</li>\n<li>layout(recalculate style&#x2F;update layout)</li>\n<li>paint(compositing&#x2F;paint invalidation&#x2F;record)</li>\n<li>Idle (idle callback)</li>\n</ol>\n<p><img src=\"https://technologybook.tech/assets/img/3.png\" alt=\"image-20210304153048312\"></p>\n<blockquote>\n<p><em><strong>v8执行js和page render 是在同一个渲染线程，因此GUI渲染和js执行是互斥的。</strong></em></p>\n</blockquote>\n<h4 id=\"API-requestAnimationCallback-requestIdleCallback\"><a href=\"#API-requestAnimationCallback-requestIdleCallback\" class=\"headerlink\" title=\"API: requestAnimationCallback &#x2F; requestIdleCallback\"></a>API: requestAnimationCallback &#x2F; requestIdleCallback</h4><blockquote>\n<p><code>requestAnimationFrame</code>: 的时间间隔与屏幕刷新率相关，rAF可以保证每一帧都只执行一次，且每一次执行的时机最优为屏幕刷新一次的时间（60fps 则为 16.6ms）；</p>\n<p><code>requestIdleCallback</code>: <strong>检测浏览器空闲并执行任务。</strong>（判断是否耗时大于当前帧执行时间，有空余即执行）</p>\n<ol>\n<li>rIC像浏览器申请时间片</li>\n<li>等待渲染布局绘制资源加载事件执行完毕</li>\n<li>分配时间片 (初始化为5ms)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Scheduler periodically yields in case there is other work on the main</span></span><br><span class=\"line\"><span class=\"comment\">// thread, like user events. By default, it yields multiple times per frame.</span></span><br><span class=\"line\"><span class=\"comment\">// It does not attempt to align with frame boundaries, since most tasks don&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\">// need to be frame aligned; for those that do, use requestAnimationFrame.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> yieldInterval = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> maxYieldInterval = <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> needsPaint = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​ 4. 归还控制权</p>\n<p>若浏览器一直繁忙，<code>requestIdleCallback</code> 注册的任务有可能一直挂起。可通过设置 <code>timeout</code>来保证超时执行。</p>\n</blockquote>\n<hr>\n<h2 id=\"Fiber\"><a href=\"#Fiber\" class=\"headerlink\" title=\"Fiber\"></a>Fiber</h2><ol>\n<li>为什么是fiber?</li>\n</ol>\n<blockquote>\n<p>为了弥补老架构基于堆栈递归不可中断导致DOM渲染不完全的问题，创造出可以中断更新在恢复的Fiber架构。</p>\n</blockquote>\n<ol start=\"2\">\n<li>为什么不是generator function？</li>\n</ol>\n<blockquote>\n<p>generator会污染其他函数，彻底改变框架的使用方式,导致使用成本的增加。</p>\n<p>v16任务调度优先级不能很好的实现 <a href=\"https://github.com/facebook/react/issues/7942#issuecomment-254987818\">原因</a></p>\n</blockquote>\n<p><img src=\"https://technologybook.tech/assets/img/5.png\" alt=\"Untitled Diagram \"></p>\n<h2 id=\"fiber包括什么及其作用\"><a href=\"#fiber包括什么及其作用\" class=\"headerlink\" title=\"fiber包括什么及其作用\"></a>fiber包括什么及其作用</h2><ol>\n<li><strong>Tag&#x2F;type&#x2F;props</strong>: 等描述一个组件如何在页面渲染的信息。</li>\n<li><strong>effectTag&#x2F;lastEffect &#x2F; fisrtEffect &#x2F; nextEffect</strong>:  所组成的 Effect List 收集进行过副作用操作的fiber最终遍历更新。</li>\n<li><strong>hooks&#x2F;updateQuene</strong>: 在组件的中的setState和hooks的更新方式</li>\n<li><strong>expirationTime</strong>: 任务更新优先级</li>\n<li><strong>alternate</strong>: 利用双缓存进行优化更新的手段currentFiber与alternate指向的oldFiber比较（diff）。</li>\n<li><strong>child&#x2F;return&#x2F;sibling</strong>: fiber的基本结构</li>\n</ol>\n<h3 id=\"reconciliation\"><a href=\"#reconciliation\" class=\"headerlink\" title=\"reconciliation\"></a>reconciliation</h3><blockquote>\n<p>老架构: React递归的对比vdom，通过diff然后更新，在此期间js一直执行，阻塞用户操作的响应，产生卡顿的感觉。</p>\n<p>问题: 不可中断，执行栈过深时的性能问题。</p>\n<p>新架构: 基于fiber的可中断的reconciliation，react会在空闲时间片执行任务,解决了网络IO带来的用户体验问题。</p>\n</blockquote>\n<blockquote>\n<p>v15是基于堆栈的，Reconciler。先 mountComponent后updateComponennt递归向下执行。</p>\n<p>v16是链表二叉树通过EffectTag确定TAG然后对有Effect的fiber进行相应的操作统一处理完成后交给renderer处理</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    root?: <span class=\"literal\">null</span>;</span><br><span class=\"line\">    child?: <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    sibling?: <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>?: <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    firstEffect?: <span class=\"title class_\">IRoot</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    lastEffect?: <span class=\"title class_\">IRoot</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    nextEffect?: <span class=\"title class_\">IRoot</span> | <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IRoot</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">tag</span>: <span class=\"built_in\">symbol</span>;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"built_in\">string</span> | keyof <span class=\"title class_\">HTMLMapElement</span> | <span class=\"title class_\">Component</span>&lt;<span class=\"built_in\">any</span>&gt; | <span class=\"title class_\">Function</span>;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">children</span>: <span class=\"title class_\">ReactElement</span>[],</span><br><span class=\"line\">        text?: <span class=\"built_in\">string</span></span><br><span class=\"line\">    &#125; &amp; &#123; [K <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">node</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">HTMLElement</span> | <span class=\"title class_\">Component</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>?: <span class=\"title class_\">IRoot</span>,</span><br><span class=\"line\">    alternate?: <span class=\"title class_\">IRoot</span>,</span><br><span class=\"line\">    hooks?: <span class=\"built_in\">any</span></span><br><span class=\"line\">    effectTag?: <span class=\"built_in\">symbol</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    updateQueue?: <span class=\"title class_\">UpdateQueue</span>,</span><br><span class=\"line\">    ref?: <span class=\"title class_\">Ref</span></span><br><span class=\"line\">    <span class=\"attr\">expirationTime</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h3><blockquote>\n<p>通过js描述页面元素的方式 React.creatELement</p>\n</blockquote>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ol>\n<li><p>从根节点的渲染调度</p>\n<ol>\n<li>diff diff两个vdom进行增量的更新创建，基于rIC实现可以暂停的比较，更新。</li>\n<li>render 生成fiber, 收集产生的side effect</li>\n<li>firstEffect 指向第一个有effect的fiber lastEffect指向最后一个有副作用的child fiber</li>\n<li>commit dom创建不能暂停</li>\n</ol>\n</li>\n<li><p>调度优先级 expirationTime</p>\n</li>\n</ol>\n<h3 id=\"双缓存机制\"><a href=\"#双缓存机制\" class=\"headerlink\" title=\"双缓存机制\"></a>双缓存机制</h3><p><img src=\"https://technologybook.tech/assets/img/4.png\" alt=\"123\"></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createWorkInProgress</span>(<span class=\"params\">current, pendingProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> workInProgress = current.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgress === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = <span class=\"title function_\">createFiber</span>(current.<span class=\"property\">tag</span>, pendingProps, current.<span class=\"property\">key</span>, current.<span class=\"property\">mode</span>);</span><br><span class=\"line\">        workInProgress.<span class=\"property\">elementType</span> = current.<span class=\"property\">elementType</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">type</span> = current.<span class=\"property\">type</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">stateNode</span> = current.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">alternate</span> = current;</span><br><span class=\"line\">        current.<span class=\"property\">alternate</span> = workInProgress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 第二次的更新</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentRoot &amp;&amp; currentRoot.<span class=\"property\">alternate</span>) &#123;</span><br><span class=\"line\">    workInProgressRoot = currentRoot.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    workInProgressRoot.<span class=\"property\">alternate</span> = currentRoot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiberRoot) workInProgressRoot.<span class=\"property\">props</span> = fiberRoot.<span class=\"property\">props</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一次更新</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentRoot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiberRoot) &#123;</span><br><span class=\"line\">        fiberRoot.<span class=\"property\">alternate</span> = currentRoot;</span><br><span class=\"line\">        workInProgressRoot = fiberRoot;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        workInProgressRoot = &#123;</span><br><span class=\"line\">            ...currentRoot,</span><br><span class=\"line\">            <span class=\"attr\">alternate</span>: currentRoot,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    workInProgressRoot = fiberRoot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (workInProgressRoot) &#123;</span><br><span class=\"line\">    workInProgressRoot.<span class=\"property\">firstEffect</span> = workInProgressRoot.<span class=\"property\">lastEffect</span> = workInProgressRoot.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nextUnitOfWork = fiberRoot;</span><br></pre></td></tr></table></figure>\n\n<p>Fiber上的<code>alternate</code>属性是双缓存（bouble buffering）的关键，它指向一个 Fiber，创建 WorkInProgress 节点时优先取<code>alternate</code>，没有的话就创建一个新的。</p>\n<p>WorkInProgress是渲染到屏幕上fiber的最终状态</p>\n<p>创建 WorkInProgress Tree 的过程是一个 Diff 的过程，Diff的结果是一个Effect list，</p>\n<p>effect list 最终会生成一个 effect的单链表，在commit阶段会迭代这个链表，通过effectTag 来决定如何UPDATE进而确定如何处理dom。</p>\n<h3 id=\"beginwork\"><a href=\"#beginwork\" class=\"headerlink\" title=\"beginwork\"></a>beginwork</h3><blockquote>\n<p>分配到时间片后，从fiberroot开始后序遍历fiber tree，在此阶段创建fiber。</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建fiber阶段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostRoot</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newChildren = fiber.<span class=\"property\">props</span>.<span class=\"property\">children</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(fiber, newChildren);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateDOM</span>(<span class=\"params\">stateNode: HTMLElement, oldProps: IRoot[<span class=\"string\">&quot;props&quot;</span>], newProps: IRoot[<span class=\"string\">&quot;props&quot;</span>]</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setProps</span>(stateNode, oldProps, newProps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createDOM</span>(<span class=\"params\">fiber: IRoot</span>): <span class=\"title class_\">HTMLElement</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_TEXT</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(fiber.<span class=\"property\">props</span>?.<span class=\"property\">text</span> || <span class=\"string\">&quot;&quot;</span>) <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_HOST</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> stateNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(fiber.<span class=\"property\">type</span> <span class=\"keyword\">as</span> keyof <span class=\"title class_\">HTMLElementTagNameMap</span>);</span><br><span class=\"line\">        <span class=\"title function_\">updateDOM</span>(stateNode, &#123;&#125; <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>, fiber.<span class=\"property\">props</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stateNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostText</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fiber.<span class=\"property\">node</span>) &#123;</span><br><span class=\"line\">        fiber.<span class=\"property\">node</span> = <span class=\"title function_\">createDOM</span>(fiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHost</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fiber.<span class=\"property\">node</span>) &#123;</span><br><span class=\"line\">        fiber.<span class=\"property\">node</span> = <span class=\"title function_\">createDOM</span>(fiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newChildren = fiber.<span class=\"property\">props</span>.<span class=\"property\">children</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(fiber, newChildren);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">beginWork</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">ROOT</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHostRoot</span>(fiber);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_TEXT</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHostText</span>(fiber);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_HOST</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHost</span>(fiber);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_CLASS</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateClassComp</span>(fiber)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_FUNCTION</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateFunctionComp</span>(fiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"completework\"><a href=\"#completework\" class=\"headerlink\" title=\"completework\"></a>completework</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 副作用收集</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">nextUnitOfWork: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnFiber = nextUnitOfWork.<span class=\"property\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (returnFiber) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!returnFiber.<span class=\"property\">firstEffect</span>) &#123;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">firstEffect</span> = nextUnitOfWork.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextUnitOfWork.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (returnFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = nextUnitOfWork.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">lastEffect</span> = nextUnitOfWork.<span class=\"property\">lastEffect</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> effectTag = nextUnitOfWork.<span class=\"property\">effectTag</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectTag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (returnFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = nextUnitOfWork;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">firstEffect</span> = nextUnitOfWork;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">lastEffect</span> = nextUnitOfWork;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"commitWork\"><a href=\"#commitWork\" class=\"headerlink\" title=\"commitWork\"></a>commitWork</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitWork</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fiber) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> retFiber = fiber.<span class=\"property\">return</span> <span class=\"keyword\">as</span> <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (retFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">NODE_HOST</span> &amp;&amp; retFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">ROOT</span> &amp;&amp; retFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">NODE_TEXT</span>) &#123;</span><br><span class=\"line\">        retFiber = retFiber.<span class=\"property\">return</span> <span class=\"keyword\">as</span> <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> retDOM = retFiber.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">effectTag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">PLACEMENT</span> &amp;&amp; retDOM) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nextFiber = fiber;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">NODE_CLASS</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nextFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">NODE_HOST</span> &amp;&amp; nextFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">NODE_TEXT</span>) &#123;</span><br><span class=\"line\">            nextFiber = fiber.<span class=\"property\">child</span> <span class=\"keyword\">as</span> <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        retDOM.<span class=\"title function_\">appendChild</span>(nextFiber.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">effectTag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">DELETION</span> &amp;&amp; retDOM) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">commitDeletion</span>(fiber, retDOM);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">effectTag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">UPDATE</span> &amp;&amp; retDOM) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fiber.<span class=\"property\">type</span> === <span class=\"variable constant_\">ELEMENT_TEXT</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fiber.<span class=\"property\">alternate</span>?.<span class=\"property\">props</span>.<span class=\"property\">text</span> != fiber.<span class=\"property\">props</span>.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fiber.<span class=\"property\">node</span>) &#123;</span><br><span class=\"line\">                    (fiber.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>).<span class=\"property\">textContent</span> = fiber.<span class=\"property\">props</span>.<span class=\"property\">text</span> <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">NODE_CLASS</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fiber.<span class=\"property\">node</span> &amp;&amp; <span class=\"title function_\">updateDOM</span>((fiber.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>), fiber.<span class=\"property\">alternate</span>?.<span class=\"property\">props</span> || &#123;&#125; <span class=\"keyword\">as</span> <span class=\"title class_\">IRoot</span>[<span class=\"string\">&quot;props&quot;</span>], fiber.<span class=\"property\">props</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fiber.<span class=\"property\">effectTag</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Diff\"><a href=\"#Diff\" class=\"headerlink\" title=\"Diff\"></a>Diff</h3><ol>\n<li>Child 类型为<code>object</code>、<code>number</code>、<code>string</code></li>\n</ol>\n<blockquote>\n<p>比较key&#x2F;type&#x2F;tag相同确定是否有可服用的statenode，如果没有直接删除生成一个新的fiber节点</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileSingleElement</span> (</span><br><span class=\"line\">  <span class=\"attr\">returnFiber</span>: <span class=\"title class_\">Fiber</span>,</span><br><span class=\"line\">  <span class=\"attr\">currentFirstChild</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">element</span>: <span class=\"title class_\">ReactElement</span>,</span><br><span class=\"line\">  <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">): <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> key = element.<span class=\"property\">key</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> child = currentFirstChild;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (child !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> If key === null and child.key === null, then this only applies to</span></span><br><span class=\"line\">    <span class=\"comment\">// the first item in the list.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">key</span> === key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        child.<span class=\"property\">tag</span> === <span class=\"title class_\">Fragment</span></span><br><span class=\"line\">          ? element.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span></span><br><span class=\"line\">          : child.<span class=\"property\">elementType</span> === element.<span class=\"property\">type</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, child.<span class=\"property\">sibling</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> existing = <span class=\"title function_\">useFiber</span>(</span><br><span class=\"line\">          child,</span><br><span class=\"line\">          element.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span></span><br><span class=\"line\">            ? element.<span class=\"property\">props</span>.<span class=\"property\">children</span></span><br><span class=\"line\">            : element.<span class=\"property\">props</span>,</span><br><span class=\"line\">          expirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        existing.<span class=\"property\">ref</span> = <span class=\"title function_\">coerceRef</span>(returnFiber, child, element);</span><br><span class=\"line\">        existing.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">          existing.<span class=\"property\">_debugSource</span> = element.<span class=\"property\">_source</span>;</span><br><span class=\"line\">          existing.<span class=\"property\">_debugOwner</span> = element.<span class=\"property\">_owner</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> existing;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, child);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">deleteChild</span>(returnFiber, child);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    child = child.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> created = <span class=\"title function_\">createFiberFromFragment</span>(</span><br><span class=\"line\">      element.<span class=\"property\">props</span>.<span class=\"property\">children</span>,</span><br><span class=\"line\">      returnFiber.<span class=\"property\">mode</span>,</span><br><span class=\"line\">      expirationTime,</span><br><span class=\"line\">      element.<span class=\"property\">key</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    created.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> created;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> created = <span class=\"title function_\">createFiberFromElement</span>(</span><br><span class=\"line\">      element,</span><br><span class=\"line\">      returnFiber.<span class=\"property\">mode</span>,</span><br><span class=\"line\">      expirationTime,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    created.<span class=\"property\">ref</span> = <span class=\"title function_\">coerceRef</span>(returnFiber, currentFirstChild, element);</span><br><span class=\"line\">    created.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> created;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Child<code>newChild</code>类型为<code>Array</code></li>\n</ol>\n<blockquote>\n<p>因为有EffectTag，所以有限判断状态为UPDATE的节点再处理为DELECTION和PLACEMENT的节点。</p>\n<p>比较方法 type&#x2F;key不同则直接DELECTION</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildrenArray</span> (</span><br><span class=\"line\">  <span class=\"attr\">returnFiber</span>: <span class=\"title class_\">Fiber</span>,</span><br><span class=\"line\">  <span class=\"attr\">currentFirstChild</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">newChildren</span>: <span class=\"title class_\">Array</span>&lt;*&gt;,</span><br><span class=\"line\">  <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// This algorithm can&#x27;t optimize by searching from both ends since we</span></span><br><span class=\"line\">  <span class=\"comment\">// don&#x27;t have backpointers on fibers. I&#x27;m trying to see how far we can get</span></span><br><span class=\"line\">  <span class=\"comment\">// with that model. If it ends up not being worth the tradeoffs, we can</span></span><br><span class=\"line\">  <span class=\"comment\">// add it later.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Even with a two ended optimization, we&#x27;d want to optimize for the case</span></span><br><span class=\"line\">  <span class=\"comment\">// where there are few changes and brute force the comparison instead of</span></span><br><span class=\"line\">  <span class=\"comment\">// going for the Map. It&#x27;d like to explore hitting that path first in</span></span><br><span class=\"line\">  <span class=\"comment\">// forward-only mode and only go for the Map once we notice that we need</span></span><br><span class=\"line\">  <span class=\"comment\">// lots of look ahead. This doesn&#x27;t handle reversal as well as two ended</span></span><br><span class=\"line\">  <span class=\"comment\">// search but that&#x27;s unusual. Besides, for the two ended optimization to</span></span><br><span class=\"line\">  <span class=\"comment\">// work on Iterables, we&#x27;d need to copy the whole set.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// In this first iteration, we&#x27;ll just live with hitting the bad case</span></span><br><span class=\"line\">  <span class=\"comment\">// (adding everything to a Map) in for every insert/move.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If you change this code, also update reconcileChildrenIterator() which</span></span><br><span class=\"line\">  <span class=\"comment\">// uses the same algorithm.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// First, validate keys.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> knownKeys = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; newChildren.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> child = newChildren[i];</span><br><span class=\"line\">      knownKeys = <span class=\"title function_\">warnOnInvalidKey</span>(child, knownKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">resultingFirstChild</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">previousNewFiber</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oldFiber = currentFirstChild;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastPlacedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextOldFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; oldFiber !== <span class=\"literal\">null</span> &amp;&amp; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldFiber.<span class=\"property\">index</span> &gt; newIdx) &#123;</span><br><span class=\"line\">      nextOldFiber = oldFiber;</span><br><span class=\"line\">      oldFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      nextOldFiber = oldFiber.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newFiber = <span class=\"title function_\">updateSlot</span>(</span><br><span class=\"line\">      returnFiber,</span><br><span class=\"line\">      oldFiber,</span><br><span class=\"line\">      newChildren[newIdx],</span><br><span class=\"line\">      expirationTime,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This breaks on empty slots like null children. That&#x27;s</span></span><br><span class=\"line\">      <span class=\"comment\">// unfortunate because it triggers the slow path all the time. We need</span></span><br><span class=\"line\">      <span class=\"comment\">// a better way to communicate whether this was a miss or null,</span></span><br><span class=\"line\">      <span class=\"comment\">// boolean, undefined, etc.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        oldFiber = nextOldFiber;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldFiber &amp;&amp; newFiber.<span class=\"property\">alternate</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We matched the slot, but we didn&#x27;t reuse the existing fiber, so we</span></span><br><span class=\"line\">        <span class=\"comment\">// need to delete the existing child.</span></span><br><span class=\"line\">        <span class=\"title function_\">deleteChild</span>(returnFiber, oldFiber);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lastPlacedIndex = <span class=\"title function_\">placeChild</span>(newFiber, lastPlacedIndex, newIdx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move out of the loop. This only happens for the first run.</span></span><br><span class=\"line\">      resultingFirstChild = newFiber;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Defer siblings if we&#x27;re not at the right index for this slot.</span></span><br><span class=\"line\">      <span class=\"comment\">// I.e. if we had null values before, then we want to defer this</span></span><br><span class=\"line\">      <span class=\"comment\">// for each null value. However, we also don&#x27;t want to call updateSlot</span></span><br><span class=\"line\">      <span class=\"comment\">// with the previous one.</span></span><br><span class=\"line\">      previousNewFiber.<span class=\"property\">sibling</span> = newFiber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    previousNewFiber = newFiber;</span><br><span class=\"line\">    oldFiber = nextOldFiber;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIdx === newChildren.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We&#x27;ve reached the end of the new children. We can delete the rest.</span></span><br><span class=\"line\">    <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, oldFiber);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultingFirstChild;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If we don&#x27;t have any more existing children we can choose a fast path</span></span><br><span class=\"line\">    <span class=\"comment\">// since the rest will all be insertions.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点移动的算法\"><a href=\"#节点移动的算法\" class=\"headerlink\" title=\"节点移动的算法\"></a>节点移动的算法</h3><p>1234 -&gt; 1423</p>\n<ol>\n<li>L(1) &#x3D;&#x3D;&#x3D; R(1) equal &#x3D;&gt; lastPlacedIndex &#x3D; Idx(1) &#x3D; 0;</li>\n<li>L(2) !&#x3D;&#x3D; R(4)  &#x3D;&gt; oldIndex &#x3D; Idx(4) &#x3D; 3 &gt; 0 &#x3D;&gt; 不动 &#x3D;&gt; lastPlacedIndex &#x3D; 3</li>\n</ol>\n<blockquote>\n<p>if (oldIndex &gt;&#x3D; lastPlacedIndex) {</p>\n<p>不动</p>\n<p>lastPlacedIndex &#x3D; oldIndex</p>\n<p>} else {</p>\n<p>移动到右边</p>\n<p>}</p>\n</blockquote>\n<ol start=\"3\">\n<li>oldIndx(R(2)) &#x3D; 1 &lt; 3 &#x3D;&gt; 右移</li>\n<li>oldIndex(R(3)) &#x3D; 2 &lt; 3 &#x3D;&gt; 右移</li>\n</ol>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRoot</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    deletions.<span class=\"title function_\">forEach</span>(commitWork);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fiber = workInProgressRoot?.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fiber) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">commitWork</span>(fiber);</span><br><span class=\"line\">        fiber = fiber.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deletions.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currentRoot = workInProgressRoot;</span><br><span class=\"line\">    workInProgressRoot = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 源码中的处理</span></span><br><span class=\"line\"><span class=\"comment\">// Check if work was scheduled by one of the effects</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootExpirationTime = root.<span class=\"property\">expirationTime</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (rootExpirationTime !== <span class=\"title class_\">NoWork</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">requestWork</span>(root, rootExpirationTime);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Flush any sync work that was scheduled by effects</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isBatchingUpdates &amp;&amp; !isRendering) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">performSyncWork</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRoot</span> (<span class=\"attr\">root</span>: <span class=\"title class_\">FiberRoot</span>, <span class=\"attr\">finishedWork</span>: <span class=\"title class_\">Fiber</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  isWorking = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  isCommitting = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"title function_\">startCommitTimer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">    root.<span class=\"property\">current</span> !== finishedWork,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Cannot commit the same tree as before. This is probably a bug &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;related to the return field. This error is likely caused by a bug &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> committedExpirationTime = root.<span class=\"property\">pendingCommitExpirationTime</span>;</span><br><span class=\"line\">  <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">    committedExpirationTime !== <span class=\"title class_\">NoWork</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Cannot commit an incomplete root. This error is likely caused by a &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  root.<span class=\"property\">pendingCommitExpirationTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Update the pending priority levels to account for the work that we are</span></span><br><span class=\"line\">  <span class=\"comment\">// about to commit. This needs to happen before calling the lifecycles, since</span></span><br><span class=\"line\">  <span class=\"comment\">// they may schedule additional updates.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> updateExpirationTimeBeforeCommit = finishedWork.<span class=\"property\">expirationTime</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> childExpirationTimeBeforeCommit = finishedWork.<span class=\"property\">childExpirationTime</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> earliestRemainingTimeBeforeCommit =</span><br><span class=\"line\">    childExpirationTimeBeforeCommit &gt; updateExpirationTimeBeforeCommit</span><br><span class=\"line\">      ? childExpirationTimeBeforeCommit</span><br><span class=\"line\">      : updateExpirationTimeBeforeCommit;</span><br><span class=\"line\">  <span class=\"title function_\">markCommittedPriorityLevels</span>(root, earliestRemainingTimeBeforeCommit);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">prevInteractions</span>: <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">Interaction</span>&gt; = (<span class=\"attr\">null</span>: any);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Restore any pending interactions at this point,</span></span><br><span class=\"line\">    <span class=\"comment\">// So that cascading work triggered during the render phase will be accounted for.</span></span><br><span class=\"line\">    prevInteractions = __interactionsRef.<span class=\"property\">current</span>;</span><br><span class=\"line\">    __interactionsRef.<span class=\"property\">current</span> = root.<span class=\"property\">memoizedInteractions</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Reset this to null before calling lifecycles</span></span><br><span class=\"line\">  <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> firstEffect;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (finishedWork.<span class=\"property\">effectTag</span> &gt; <span class=\"title class_\">PerformedWork</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// A fiber&#x27;s effect list consists only of its children, not itself. So if</span></span><br><span class=\"line\">    <span class=\"comment\">// the root has an effect, we need to add it to the end of the list. The</span></span><br><span class=\"line\">    <span class=\"comment\">// resulting list is the set that would belong to the root&#x27;s parent, if</span></span><br><span class=\"line\">    <span class=\"comment\">// it had one; that is, all the effects in the tree including the root.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishedWork.<span class=\"property\">lastEffect</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      finishedWork.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = finishedWork;</span><br><span class=\"line\">      firstEffect = finishedWork.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      firstEffect = finishedWork;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hooks\"><a href=\"#hooks\" class=\"headerlink\" title=\"hooks\"></a>hooks</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleWorkToRoot</span>(<span class=\"params\">fiberRoot?: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第二次的更新</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentRoot &amp;&amp; currentRoot.<span class=\"property\">alternate</span>) &#123;</span><br><span class=\"line\">        workInProgressRoot = currentRoot.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">        workInProgressRoot.<span class=\"property\">alternate</span> = currentRoot;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fiberRoot) workInProgressRoot.<span class=\"property\">props</span> = fiberRoot.<span class=\"property\">props</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 第一次更新</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentRoot) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fiberRoot) &#123;</span><br><span class=\"line\">            fiberRoot.<span class=\"property\">alternate</span> = currentRoot;</span><br><span class=\"line\">            workInProgressRoot = fiberRoot;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            workInProgressRoot = &#123;</span><br><span class=\"line\">                ...currentRoot,</span><br><span class=\"line\">                <span class=\"attr\">alternate</span>: currentRoot,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        workInProgressRoot = fiberRoot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgressRoot) &#123;</span><br><span class=\"line\">        workInProgressRoot.<span class=\"property\">firstEffect</span> = workInProgressRoot.<span class=\"property\">lastEffect</span> = workInProgressRoot.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nextUnitOfWork = fiberRoot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>以下为新版本的一些更新（from kasong blog）</p>\n<p><img src=\"https://technologybook.tech/assets/img/1.jpeg\" alt=\"DZQFUlCU0AAkFI5\"></p>\n<p><img src=\"https://technologybook.tech/assets/img/2.jpeg\" alt=\"DZQFWC2VAAEHUln\"></p>\n<blockquote>\n<p>在<code>processUpdateQueue</code>方法中，<code>shared.pending</code>环状链表会被剪开并拼接在<code>baseUpdate</code>后面。(from kasong blog)</p>\n<p>优先级高的会在updateQueue.shared.pending 中形成环，</p>\n<p>第一阶段 按链表的顺序</p>\n<p>第二阶段 按优先级</p>\n</blockquote>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://technologybook.tech/assets/img/3.png\" alt=\"rs\"></p>\n<h1 id=\"react-source-code\"><a href=\"#react-source-code\" class=\"headerlink\" title=\"react source code\"></a>react source code</h1><h2 id=\"屏幕刷新\"><a href=\"#屏幕刷新\" class=\"headerlink\" title=\"屏幕刷新\"></a>屏幕刷新</h2><blockquote>\n<p>屏幕刷新率一般是 16.6ms</p>\n</blockquote>\n<h4 id=\"一个完整的帧的渲染过程\"><a href=\"#一个完整的帧的渲染过程\" class=\"headerlink\" title=\"一个完整的帧的渲染过程\"></a>一个完整的帧的渲染过程</h4><ol>\n<li>input events（Blocking input events(touch&#x2F;scroll) &#x2F; non-blocking input event(click&#x2F;keypress)）</li>\n<li>timer</li>\n<li>每一帧执行的事件(resize&#x2F;scroll&#x2F;media query change)</li>\n<li>rAF（绘制前执行）</li>\n<li>layout(recalculate style&#x2F;update layout)</li>\n<li>paint(compositing&#x2F;paint invalidation&#x2F;record)</li>\n<li>Idle (idle callback)</li>\n</ol>\n<p><img src=\"https://technologybook.tech/assets/img/3.png\" alt=\"image-20210304153048312\"></p>\n<blockquote>\n<p><em><strong>v8执行js和page render 是在同一个渲染线程，因此GUI渲染和js执行是互斥的。</strong></em></p>\n</blockquote>\n<h4 id=\"API-requestAnimationCallback-requestIdleCallback\"><a href=\"#API-requestAnimationCallback-requestIdleCallback\" class=\"headerlink\" title=\"API: requestAnimationCallback &#x2F; requestIdleCallback\"></a>API: requestAnimationCallback &#x2F; requestIdleCallback</h4><blockquote>\n<p><code>requestAnimationFrame</code>: 的时间间隔与屏幕刷新率相关，rAF可以保证每一帧都只执行一次，且每一次执行的时机最优为屏幕刷新一次的时间（60fps 则为 16.6ms）；</p>\n<p><code>requestIdleCallback</code>: <strong>检测浏览器空闲并执行任务。</strong>（判断是否耗时大于当前帧执行时间，有空余即执行）</p>\n<ol>\n<li>rIC像浏览器申请时间片</li>\n<li>等待渲染布局绘制资源加载事件执行完毕</li>\n<li>分配时间片 (初始化为5ms)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Scheduler periodically yields in case there is other work on the main</span></span><br><span class=\"line\"><span class=\"comment\">// thread, like user events. By default, it yields multiple times per frame.</span></span><br><span class=\"line\"><span class=\"comment\">// It does not attempt to align with frame boundaries, since most tasks don&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\">// need to be frame aligned; for those that do, use requestAnimationFrame.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> yieldInterval = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> maxYieldInterval = <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> needsPaint = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​ 4. 归还控制权</p>\n<p>若浏览器一直繁忙，<code>requestIdleCallback</code> 注册的任务有可能一直挂起。可通过设置 <code>timeout</code>来保证超时执行。</p>\n</blockquote>\n<hr>\n<h2 id=\"Fiber\"><a href=\"#Fiber\" class=\"headerlink\" title=\"Fiber\"></a>Fiber</h2><ol>\n<li>为什么是fiber?</li>\n</ol>\n<blockquote>\n<p>为了弥补老架构基于堆栈递归不可中断导致DOM渲染不完全的问题，创造出可以中断更新在恢复的Fiber架构。</p>\n</blockquote>\n<ol start=\"2\">\n<li>为什么不是generator function？</li>\n</ol>\n<blockquote>\n<p>generator会污染其他函数，彻底改变框架的使用方式,导致使用成本的增加。</p>\n<p>v16任务调度优先级不能很好的实现 <a href=\"https://github.com/facebook/react/issues/7942#issuecomment-254987818\">原因</a></p>\n</blockquote>\n<p><img src=\"https://technologybook.tech/assets/img/5.png\" alt=\"Untitled Diagram \"></p>\n<h2 id=\"fiber包括什么及其作用\"><a href=\"#fiber包括什么及其作用\" class=\"headerlink\" title=\"fiber包括什么及其作用\"></a>fiber包括什么及其作用</h2><ol>\n<li><strong>Tag&#x2F;type&#x2F;props</strong>: 等描述一个组件如何在页面渲染的信息。</li>\n<li><strong>effectTag&#x2F;lastEffect &#x2F; fisrtEffect &#x2F; nextEffect</strong>:  所组成的 Effect List 收集进行过副作用操作的fiber最终遍历更新。</li>\n<li><strong>hooks&#x2F;updateQuene</strong>: 在组件的中的setState和hooks的更新方式</li>\n<li><strong>expirationTime</strong>: 任务更新优先级</li>\n<li><strong>alternate</strong>: 利用双缓存进行优化更新的手段currentFiber与alternate指向的oldFiber比较（diff）。</li>\n<li><strong>child&#x2F;return&#x2F;sibling</strong>: fiber的基本结构</li>\n</ol>\n<h3 id=\"reconciliation\"><a href=\"#reconciliation\" class=\"headerlink\" title=\"reconciliation\"></a>reconciliation</h3><blockquote>\n<p>老架构: React递归的对比vdom，通过diff然后更新，在此期间js一直执行，阻塞用户操作的响应，产生卡顿的感觉。</p>\n<p>问题: 不可中断，执行栈过深时的性能问题。</p>\n<p>新架构: 基于fiber的可中断的reconciliation，react会在空闲时间片执行任务,解决了网络IO带来的用户体验问题。</p>\n</blockquote>\n<blockquote>\n<p>v15是基于堆栈的，Reconciler。先 mountComponent后updateComponennt递归向下执行。</p>\n<p>v16是链表二叉树通过EffectTag确定TAG然后对有Effect的fiber进行相应的操作统一处理完成后交给renderer处理</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    root?: <span class=\"literal\">null</span>;</span><br><span class=\"line\">    child?: <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    sibling?: <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>?: <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    firstEffect?: <span class=\"title class_\">IRoot</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    lastEffect?: <span class=\"title class_\">IRoot</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    nextEffect?: <span class=\"title class_\">IRoot</span> | <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IRoot</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">tag</span>: <span class=\"built_in\">symbol</span>;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"built_in\">string</span> | keyof <span class=\"title class_\">HTMLMapElement</span> | <span class=\"title class_\">Component</span>&lt;<span class=\"built_in\">any</span>&gt; | <span class=\"title class_\">Function</span>;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">children</span>: <span class=\"title class_\">ReactElement</span>[],</span><br><span class=\"line\">        text?: <span class=\"built_in\">string</span></span><br><span class=\"line\">    &#125; &amp; &#123; [K <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">node</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">HTMLElement</span> | <span class=\"title class_\">Component</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>?: <span class=\"title class_\">IRoot</span>,</span><br><span class=\"line\">    alternate?: <span class=\"title class_\">IRoot</span>,</span><br><span class=\"line\">    hooks?: <span class=\"built_in\">any</span></span><br><span class=\"line\">    effectTag?: <span class=\"built_in\">symbol</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    updateQueue?: <span class=\"title class_\">UpdateQueue</span>,</span><br><span class=\"line\">    ref?: <span class=\"title class_\">Ref</span></span><br><span class=\"line\">    <span class=\"attr\">expirationTime</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h3><blockquote>\n<p>通过js描述页面元素的方式 React.creatELement</p>\n</blockquote>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ol>\n<li><p>从根节点的渲染调度</p>\n<ol>\n<li>diff diff两个vdom进行增量的更新创建，基于rIC实现可以暂停的比较，更新。</li>\n<li>render 生成fiber, 收集产生的side effect</li>\n<li>firstEffect 指向第一个有effect的fiber lastEffect指向最后一个有副作用的child fiber</li>\n<li>commit dom创建不能暂停</li>\n</ol>\n</li>\n<li><p>调度优先级 expirationTime</p>\n</li>\n</ol>\n<h3 id=\"双缓存机制\"><a href=\"#双缓存机制\" class=\"headerlink\" title=\"双缓存机制\"></a>双缓存机制</h3><p><img src=\"https://technologybook.tech/assets/img/4.png\" alt=\"123\"></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createWorkInProgress</span>(<span class=\"params\">current, pendingProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> workInProgress = current.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgress === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = <span class=\"title function_\">createFiber</span>(current.<span class=\"property\">tag</span>, pendingProps, current.<span class=\"property\">key</span>, current.<span class=\"property\">mode</span>);</span><br><span class=\"line\">        workInProgress.<span class=\"property\">elementType</span> = current.<span class=\"property\">elementType</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">type</span> = current.<span class=\"property\">type</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">stateNode</span> = current.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">alternate</span> = current;</span><br><span class=\"line\">        current.<span class=\"property\">alternate</span> = workInProgress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 第二次的更新</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentRoot &amp;&amp; currentRoot.<span class=\"property\">alternate</span>) &#123;</span><br><span class=\"line\">    workInProgressRoot = currentRoot.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    workInProgressRoot.<span class=\"property\">alternate</span> = currentRoot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiberRoot) workInProgressRoot.<span class=\"property\">props</span> = fiberRoot.<span class=\"property\">props</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一次更新</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentRoot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiberRoot) &#123;</span><br><span class=\"line\">        fiberRoot.<span class=\"property\">alternate</span> = currentRoot;</span><br><span class=\"line\">        workInProgressRoot = fiberRoot;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        workInProgressRoot = &#123;</span><br><span class=\"line\">            ...currentRoot,</span><br><span class=\"line\">            <span class=\"attr\">alternate</span>: currentRoot,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    workInProgressRoot = fiberRoot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (workInProgressRoot) &#123;</span><br><span class=\"line\">    workInProgressRoot.<span class=\"property\">firstEffect</span> = workInProgressRoot.<span class=\"property\">lastEffect</span> = workInProgressRoot.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nextUnitOfWork = fiberRoot;</span><br></pre></td></tr></table></figure>\n\n<p>Fiber上的<code>alternate</code>属性是双缓存（bouble buffering）的关键，它指向一个 Fiber，创建 WorkInProgress 节点时优先取<code>alternate</code>，没有的话就创建一个新的。</p>\n<p>WorkInProgress是渲染到屏幕上fiber的最终状态</p>\n<p>创建 WorkInProgress Tree 的过程是一个 Diff 的过程，Diff的结果是一个Effect list，</p>\n<p>effect list 最终会生成一个 effect的单链表，在commit阶段会迭代这个链表，通过effectTag 来决定如何UPDATE进而确定如何处理dom。</p>\n<h3 id=\"beginwork\"><a href=\"#beginwork\" class=\"headerlink\" title=\"beginwork\"></a>beginwork</h3><blockquote>\n<p>分配到时间片后，从fiberroot开始后序遍历fiber tree，在此阶段创建fiber。</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建fiber阶段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostRoot</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newChildren = fiber.<span class=\"property\">props</span>.<span class=\"property\">children</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(fiber, newChildren);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateDOM</span>(<span class=\"params\">stateNode: HTMLElement, oldProps: IRoot[<span class=\"string\">&quot;props&quot;</span>], newProps: IRoot[<span class=\"string\">&quot;props&quot;</span>]</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setProps</span>(stateNode, oldProps, newProps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createDOM</span>(<span class=\"params\">fiber: IRoot</span>): <span class=\"title class_\">HTMLElement</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_TEXT</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(fiber.<span class=\"property\">props</span>?.<span class=\"property\">text</span> || <span class=\"string\">&quot;&quot;</span>) <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_HOST</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> stateNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(fiber.<span class=\"property\">type</span> <span class=\"keyword\">as</span> keyof <span class=\"title class_\">HTMLElementTagNameMap</span>);</span><br><span class=\"line\">        <span class=\"title function_\">updateDOM</span>(stateNode, &#123;&#125; <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>, fiber.<span class=\"property\">props</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stateNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostText</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fiber.<span class=\"property\">node</span>) &#123;</span><br><span class=\"line\">        fiber.<span class=\"property\">node</span> = <span class=\"title function_\">createDOM</span>(fiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHost</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fiber.<span class=\"property\">node</span>) &#123;</span><br><span class=\"line\">        fiber.<span class=\"property\">node</span> = <span class=\"title function_\">createDOM</span>(fiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newChildren = fiber.<span class=\"property\">props</span>.<span class=\"property\">children</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(fiber, newChildren);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">beginWork</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">ROOT</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHostRoot</span>(fiber);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_TEXT</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHostText</span>(fiber);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_HOST</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateHost</span>(fiber);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_CLASS</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateClassComp</span>(fiber)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">NODE_FUNCTION</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">updateFunctionComp</span>(fiber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"completework\"><a href=\"#completework\" class=\"headerlink\" title=\"completework\"></a>completework</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 副作用收集</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">nextUnitOfWork: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnFiber = nextUnitOfWork.<span class=\"property\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (returnFiber) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!returnFiber.<span class=\"property\">firstEffect</span>) &#123;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">firstEffect</span> = nextUnitOfWork.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextUnitOfWork.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (returnFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = nextUnitOfWork.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">lastEffect</span> = nextUnitOfWork.<span class=\"property\">lastEffect</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> effectTag = nextUnitOfWork.<span class=\"property\">effectTag</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectTag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (returnFiber.<span class=\"property\">lastEffect</span>) &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = nextUnitOfWork;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">firstEffect</span> = nextUnitOfWork;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            returnFiber.<span class=\"property\">lastEffect</span> = nextUnitOfWork;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"commitWork\"><a href=\"#commitWork\" class=\"headerlink\" title=\"commitWork\"></a>commitWork</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitWork</span>(<span class=\"params\">fiber: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fiber) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> retFiber = fiber.<span class=\"property\">return</span> <span class=\"keyword\">as</span> <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (retFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">NODE_HOST</span> &amp;&amp; retFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">ROOT</span> &amp;&amp; retFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">NODE_TEXT</span>) &#123;</span><br><span class=\"line\">        retFiber = retFiber.<span class=\"property\">return</span> <span class=\"keyword\">as</span> <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> retDOM = retFiber.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">effectTag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">PLACEMENT</span> &amp;&amp; retDOM) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nextFiber = fiber;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextFiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">NODE_CLASS</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nextFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">NODE_HOST</span> &amp;&amp; nextFiber.<span class=\"property\">tag</span> !== <span class=\"variable constant_\">NODE_TEXT</span>) &#123;</span><br><span class=\"line\">            nextFiber = fiber.<span class=\"property\">child</span> <span class=\"keyword\">as</span> <span class=\"title class_\">IRoot</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        retDOM.<span class=\"title function_\">appendChild</span>(nextFiber.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">effectTag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">DELETION</span> &amp;&amp; retDOM) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">commitDeletion</span>(fiber, retDOM);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">effectTag</span> === <span class=\"title class_\">ReaxTypes</span>.<span class=\"property\">UPDATE</span> &amp;&amp; retDOM) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fiber.<span class=\"property\">type</span> === <span class=\"variable constant_\">ELEMENT_TEXT</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fiber.<span class=\"property\">alternate</span>?.<span class=\"property\">props</span>.<span class=\"property\">text</span> != fiber.<span class=\"property\">props</span>.<span class=\"property\">text</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fiber.<span class=\"property\">node</span>) &#123;</span><br><span class=\"line\">                    (fiber.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>).<span class=\"property\">textContent</span> = fiber.<span class=\"property\">props</span>.<span class=\"property\">text</span> <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"variable constant_\">NODE_CLASS</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fiber.<span class=\"property\">node</span> &amp;&amp; <span class=\"title function_\">updateDOM</span>((fiber.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span>), fiber.<span class=\"property\">alternate</span>?.<span class=\"property\">props</span> || &#123;&#125; <span class=\"keyword\">as</span> <span class=\"title class_\">IRoot</span>[<span class=\"string\">&quot;props&quot;</span>], fiber.<span class=\"property\">props</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fiber.<span class=\"property\">effectTag</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Diff\"><a href=\"#Diff\" class=\"headerlink\" title=\"Diff\"></a>Diff</h3><ol>\n<li>Child 类型为<code>object</code>、<code>number</code>、<code>string</code></li>\n</ol>\n<blockquote>\n<p>比较key&#x2F;type&#x2F;tag相同确定是否有可服用的statenode，如果没有直接删除生成一个新的fiber节点</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileSingleElement</span> (</span><br><span class=\"line\">  <span class=\"attr\">returnFiber</span>: <span class=\"title class_\">Fiber</span>,</span><br><span class=\"line\">  <span class=\"attr\">currentFirstChild</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">element</span>: <span class=\"title class_\">ReactElement</span>,</span><br><span class=\"line\">  <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">): <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> key = element.<span class=\"property\">key</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> child = currentFirstChild;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (child !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> If key === null and child.key === null, then this only applies to</span></span><br><span class=\"line\">    <span class=\"comment\">// the first item in the list.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">key</span> === key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        child.<span class=\"property\">tag</span> === <span class=\"title class_\">Fragment</span></span><br><span class=\"line\">          ? element.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span></span><br><span class=\"line\">          : child.<span class=\"property\">elementType</span> === element.<span class=\"property\">type</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, child.<span class=\"property\">sibling</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> existing = <span class=\"title function_\">useFiber</span>(</span><br><span class=\"line\">          child,</span><br><span class=\"line\">          element.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span></span><br><span class=\"line\">            ? element.<span class=\"property\">props</span>.<span class=\"property\">children</span></span><br><span class=\"line\">            : element.<span class=\"property\">props</span>,</span><br><span class=\"line\">          expirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        existing.<span class=\"property\">ref</span> = <span class=\"title function_\">coerceRef</span>(returnFiber, child, element);</span><br><span class=\"line\">        existing.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">          existing.<span class=\"property\">_debugSource</span> = element.<span class=\"property\">_source</span>;</span><br><span class=\"line\">          existing.<span class=\"property\">_debugOwner</span> = element.<span class=\"property\">_owner</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> existing;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, child);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">deleteChild</span>(returnFiber, child);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    child = child.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> created = <span class=\"title function_\">createFiberFromFragment</span>(</span><br><span class=\"line\">      element.<span class=\"property\">props</span>.<span class=\"property\">children</span>,</span><br><span class=\"line\">      returnFiber.<span class=\"property\">mode</span>,</span><br><span class=\"line\">      expirationTime,</span><br><span class=\"line\">      element.<span class=\"property\">key</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    created.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> created;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> created = <span class=\"title function_\">createFiberFromElement</span>(</span><br><span class=\"line\">      element,</span><br><span class=\"line\">      returnFiber.<span class=\"property\">mode</span>,</span><br><span class=\"line\">      expirationTime,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    created.<span class=\"property\">ref</span> = <span class=\"title function_\">coerceRef</span>(returnFiber, currentFirstChild, element);</span><br><span class=\"line\">    created.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> created;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Child<code>newChild</code>类型为<code>Array</code></li>\n</ol>\n<blockquote>\n<p>因为有EffectTag，所以有限判断状态为UPDATE的节点再处理为DELECTION和PLACEMENT的节点。</p>\n<p>比较方法 type&#x2F;key不同则直接DELECTION</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildrenArray</span> (</span><br><span class=\"line\">  <span class=\"attr\">returnFiber</span>: <span class=\"title class_\">Fiber</span>,</span><br><span class=\"line\">  <span class=\"attr\">currentFirstChild</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">newChildren</span>: <span class=\"title class_\">Array</span>&lt;*&gt;,</span><br><span class=\"line\">  <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// This algorithm can&#x27;t optimize by searching from both ends since we</span></span><br><span class=\"line\">  <span class=\"comment\">// don&#x27;t have backpointers on fibers. I&#x27;m trying to see how far we can get</span></span><br><span class=\"line\">  <span class=\"comment\">// with that model. If it ends up not being worth the tradeoffs, we can</span></span><br><span class=\"line\">  <span class=\"comment\">// add it later.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Even with a two ended optimization, we&#x27;d want to optimize for the case</span></span><br><span class=\"line\">  <span class=\"comment\">// where there are few changes and brute force the comparison instead of</span></span><br><span class=\"line\">  <span class=\"comment\">// going for the Map. It&#x27;d like to explore hitting that path first in</span></span><br><span class=\"line\">  <span class=\"comment\">// forward-only mode and only go for the Map once we notice that we need</span></span><br><span class=\"line\">  <span class=\"comment\">// lots of look ahead. This doesn&#x27;t handle reversal as well as two ended</span></span><br><span class=\"line\">  <span class=\"comment\">// search but that&#x27;s unusual. Besides, for the two ended optimization to</span></span><br><span class=\"line\">  <span class=\"comment\">// work on Iterables, we&#x27;d need to copy the whole set.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// In this first iteration, we&#x27;ll just live with hitting the bad case</span></span><br><span class=\"line\">  <span class=\"comment\">// (adding everything to a Map) in for every insert/move.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If you change this code, also update reconcileChildrenIterator() which</span></span><br><span class=\"line\">  <span class=\"comment\">// uses the same algorithm.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// First, validate keys.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> knownKeys = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; newChildren.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> child = newChildren[i];</span><br><span class=\"line\">      knownKeys = <span class=\"title function_\">warnOnInvalidKey</span>(child, knownKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">resultingFirstChild</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">previousNewFiber</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oldFiber = currentFirstChild;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastPlacedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextOldFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; oldFiber !== <span class=\"literal\">null</span> &amp;&amp; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldFiber.<span class=\"property\">index</span> &gt; newIdx) &#123;</span><br><span class=\"line\">      nextOldFiber = oldFiber;</span><br><span class=\"line\">      oldFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      nextOldFiber = oldFiber.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newFiber = <span class=\"title function_\">updateSlot</span>(</span><br><span class=\"line\">      returnFiber,</span><br><span class=\"line\">      oldFiber,</span><br><span class=\"line\">      newChildren[newIdx],</span><br><span class=\"line\">      expirationTime,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This breaks on empty slots like null children. That&#x27;s</span></span><br><span class=\"line\">      <span class=\"comment\">// unfortunate because it triggers the slow path all the time. We need</span></span><br><span class=\"line\">      <span class=\"comment\">// a better way to communicate whether this was a miss or null,</span></span><br><span class=\"line\">      <span class=\"comment\">// boolean, undefined, etc.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        oldFiber = nextOldFiber;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldFiber &amp;&amp; newFiber.<span class=\"property\">alternate</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We matched the slot, but we didn&#x27;t reuse the existing fiber, so we</span></span><br><span class=\"line\">        <span class=\"comment\">// need to delete the existing child.</span></span><br><span class=\"line\">        <span class=\"title function_\">deleteChild</span>(returnFiber, oldFiber);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lastPlacedIndex = <span class=\"title function_\">placeChild</span>(newFiber, lastPlacedIndex, newIdx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move out of the loop. This only happens for the first run.</span></span><br><span class=\"line\">      resultingFirstChild = newFiber;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Defer siblings if we&#x27;re not at the right index for this slot.</span></span><br><span class=\"line\">      <span class=\"comment\">// I.e. if we had null values before, then we want to defer this</span></span><br><span class=\"line\">      <span class=\"comment\">// for each null value. However, we also don&#x27;t want to call updateSlot</span></span><br><span class=\"line\">      <span class=\"comment\">// with the previous one.</span></span><br><span class=\"line\">      previousNewFiber.<span class=\"property\">sibling</span> = newFiber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    previousNewFiber = newFiber;</span><br><span class=\"line\">    oldFiber = nextOldFiber;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIdx === newChildren.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We&#x27;ve reached the end of the new children. We can delete the rest.</span></span><br><span class=\"line\">    <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, oldFiber);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultingFirstChild;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If we don&#x27;t have any more existing children we can choose a fast path</span></span><br><span class=\"line\">    <span class=\"comment\">// since the rest will all be insertions.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点移动的算法\"><a href=\"#节点移动的算法\" class=\"headerlink\" title=\"节点移动的算法\"></a>节点移动的算法</h3><p>1234 -&gt; 1423</p>\n<ol>\n<li>L(1) &#x3D;&#x3D;&#x3D; R(1) equal &#x3D;&gt; lastPlacedIndex &#x3D; Idx(1) &#x3D; 0;</li>\n<li>L(2) !&#x3D;&#x3D; R(4)  &#x3D;&gt; oldIndex &#x3D; Idx(4) &#x3D; 3 &gt; 0 &#x3D;&gt; 不动 &#x3D;&gt; lastPlacedIndex &#x3D; 3</li>\n</ol>\n<blockquote>\n<p>if (oldIndex &gt;&#x3D; lastPlacedIndex) {</p>\n<p>不动</p>\n<p>lastPlacedIndex &#x3D; oldIndex</p>\n<p>} else {</p>\n<p>移动到右边</p>\n<p>}</p>\n</blockquote>\n<ol start=\"3\">\n<li>oldIndx(R(2)) &#x3D; 1 &lt; 3 &#x3D;&gt; 右移</li>\n<li>oldIndex(R(3)) &#x3D; 2 &lt; 3 &#x3D;&gt; 右移</li>\n</ol>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRoot</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    deletions.<span class=\"title function_\">forEach</span>(commitWork);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fiber = workInProgressRoot?.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fiber) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">commitWork</span>(fiber);</span><br><span class=\"line\">        fiber = fiber.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deletions.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currentRoot = workInProgressRoot;</span><br><span class=\"line\">    workInProgressRoot = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 源码中的处理</span></span><br><span class=\"line\"><span class=\"comment\">// Check if work was scheduled by one of the effects</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootExpirationTime = root.<span class=\"property\">expirationTime</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (rootExpirationTime !== <span class=\"title class_\">NoWork</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">requestWork</span>(root, rootExpirationTime);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Flush any sync work that was scheduled by effects</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isBatchingUpdates &amp;&amp; !isRendering) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">performSyncWork</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRoot</span> (<span class=\"attr\">root</span>: <span class=\"title class_\">FiberRoot</span>, <span class=\"attr\">finishedWork</span>: <span class=\"title class_\">Fiber</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  isWorking = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  isCommitting = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"title function_\">startCommitTimer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">    root.<span class=\"property\">current</span> !== finishedWork,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Cannot commit the same tree as before. This is probably a bug &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;related to the return field. This error is likely caused by a bug &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> committedExpirationTime = root.<span class=\"property\">pendingCommitExpirationTime</span>;</span><br><span class=\"line\">  <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">    committedExpirationTime !== <span class=\"title class_\">NoWork</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Cannot commit an incomplete root. This error is likely caused by a &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  root.<span class=\"property\">pendingCommitExpirationTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Update the pending priority levels to account for the work that we are</span></span><br><span class=\"line\">  <span class=\"comment\">// about to commit. This needs to happen before calling the lifecycles, since</span></span><br><span class=\"line\">  <span class=\"comment\">// they may schedule additional updates.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> updateExpirationTimeBeforeCommit = finishedWork.<span class=\"property\">expirationTime</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> childExpirationTimeBeforeCommit = finishedWork.<span class=\"property\">childExpirationTime</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> earliestRemainingTimeBeforeCommit =</span><br><span class=\"line\">    childExpirationTimeBeforeCommit &gt; updateExpirationTimeBeforeCommit</span><br><span class=\"line\">      ? childExpirationTimeBeforeCommit</span><br><span class=\"line\">      : updateExpirationTimeBeforeCommit;</span><br><span class=\"line\">  <span class=\"title function_\">markCommittedPriorityLevels</span>(root, earliestRemainingTimeBeforeCommit);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">prevInteractions</span>: <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">Interaction</span>&gt; = (<span class=\"attr\">null</span>: any);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Restore any pending interactions at this point,</span></span><br><span class=\"line\">    <span class=\"comment\">// So that cascading work triggered during the render phase will be accounted for.</span></span><br><span class=\"line\">    prevInteractions = __interactionsRef.<span class=\"property\">current</span>;</span><br><span class=\"line\">    __interactionsRef.<span class=\"property\">current</span> = root.<span class=\"property\">memoizedInteractions</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Reset this to null before calling lifecycles</span></span><br><span class=\"line\">  <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> firstEffect;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (finishedWork.<span class=\"property\">effectTag</span> &gt; <span class=\"title class_\">PerformedWork</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// A fiber&#x27;s effect list consists only of its children, not itself. So if</span></span><br><span class=\"line\">    <span class=\"comment\">// the root has an effect, we need to add it to the end of the list. The</span></span><br><span class=\"line\">    <span class=\"comment\">// resulting list is the set that would belong to the root&#x27;s parent, if</span></span><br><span class=\"line\">    <span class=\"comment\">// it had one; that is, all the effects in the tree including the root.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishedWork.<span class=\"property\">lastEffect</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      finishedWork.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = finishedWork;</span><br><span class=\"line\">      firstEffect = finishedWork.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      firstEffect = finishedWork;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hooks\"><a href=\"#hooks\" class=\"headerlink\" title=\"hooks\"></a>hooks</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleWorkToRoot</span>(<span class=\"params\">fiberRoot?: IRoot</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第二次的更新</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentRoot &amp;&amp; currentRoot.<span class=\"property\">alternate</span>) &#123;</span><br><span class=\"line\">        workInProgressRoot = currentRoot.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">        workInProgressRoot.<span class=\"property\">alternate</span> = currentRoot;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fiberRoot) workInProgressRoot.<span class=\"property\">props</span> = fiberRoot.<span class=\"property\">props</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 第一次更新</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentRoot) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fiberRoot) &#123;</span><br><span class=\"line\">            fiberRoot.<span class=\"property\">alternate</span> = currentRoot;</span><br><span class=\"line\">            workInProgressRoot = fiberRoot;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            workInProgressRoot = &#123;</span><br><span class=\"line\">                ...currentRoot,</span><br><span class=\"line\">                <span class=\"attr\">alternate</span>: currentRoot,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        workInProgressRoot = fiberRoot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgressRoot) &#123;</span><br><span class=\"line\">        workInProgressRoot.<span class=\"property\">firstEffect</span> = workInProgressRoot.<span class=\"property\">lastEffect</span> = workInProgressRoot.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nextUnitOfWork = fiberRoot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>以下为新版本的一些更新（from kasong blog）</p>\n<p><img src=\"https://technologybook.tech/assets/img/1.jpeg\" alt=\"DZQFUlCU0AAkFI5\"></p>\n<p><img src=\"https://technologybook.tech/assets/img/2.jpeg\" alt=\"DZQFWC2VAAEHUln\"></p>\n<blockquote>\n<p>在<code>processUpdateQueue</code>方法中，<code>shared.pending</code>环状链表会被剪开并拼接在<code>baseUpdate</code>后面。(from kasong blog)</p>\n<p>优先级高的会在updateQueue.shared.pending 中形成环，</p>\n<p>第一阶段 按链表的顺序</p>\n<p>第二阶段 按优先级</p>\n</blockquote>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>"},{"title":"webpack king（三）","date":"2019-09-16T16:00:00.000Z","cover":"https://raw.githubusercontent.com/webpack-contrib/awesome-webpack/master/media/awesome_webpack_branding.png","_content":"# webpack king（三）\n\nwebpack的设计与实现\n\n以下是一个Mini webpack的执行流程图。\n\n![w3](https://technologybook.tech/assets/img/w3.png)\n\n\n\n通过acorn对源代码的编译得到Ast，以下是Ast节点所包含的信息，对于commonjs规范来说，只需要将callee下的name重写，并将argument重写就可以实现模块的有效引用\n\n![w1](https://technologybook.tech/assets/img//w1.png)\n\n![w2](https://technologybook.tech/assets/img/w2.png)\n\n## 我的实现\n\n```typescript\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as process from 'process';\nimport * as babylon from \"babylon\";\nimport traverse from \"@babel/traverse\";\nimport generator from \"@babel/generator\";\nimport * as t from '@babel/types';\nimport { SyncHook } from 'tapable';\ninterface Config {\n    entry: string,\n    mode: \"development\" | \"production\",\n    output: {\n        filename: string,\n        path: string\n    },\n    module?: {\n        rules: Array<{test: RegExp, use: Array<string>}>\n    },\n    plugins?: Array<any>\n}\ntype Modules = {[k in string]: string}\n\nclass Minipack {\n    root: string = process.cwd();\n    entry: string = this.config.entry;\n    modules: Modules = {};\n    hooks = {\n        beforeStart: new SyncHook([\"beforeStart\"]),\n        compile: new SyncHook([\"compile\"]),\n        emit: new SyncHook([\"emit\"])\n    }\n    constructor(public config: Config) {\n        this.config = config;\n        let plugins = this.config.plugins || [];\n        plugins.forEach(p => p.apply(this))\n    }\n    static CURRENT: Readonly<string> = \"./\";\n\n    getSourceCode(path: string): string {\n        let code = fs.readFileSync(path, 'utf8');\n        code = this.load(path, code);\n        return code;\n    }\n\n    parseCode(code: string, parentPath: string): {code: string, deps: Array<string>}{\n        const ast = babylon.parse(code)as any as t.Node;\n        let deps: Array<string> = [];\n        traverse(ast , {\n            CallExpression(p) {\n                let node = p.node as any;\n                if (node.callee .name === 'require') {\n                    node.callee.name = \"__webpack_require__\";\n                    const currentName = node.arguments[0].value;\n                    let name = `${Minipack.CURRENT}${path.join(parentPath, currentName)}`;\n                    deps.push(name)\n                    node.arguments = [t.stringLiteral(currentName)];\n                }\n            }\n        })\n        const finalCode = generator(ast);\n        return { code: finalCode.code, deps}\n    }\n\n    build(filePath: string, isEntry = false ): Modules {\n        const code = this.getSourceCode(path.resolve(this.root, filePath));\n        let moduleName = Minipack.CURRENT + path.relative(this.root, filePath);\n        isEntry && (this.entry = moduleName);\n        this.hooks.compile.call(\"compile\")\n        const {code: sourceCode, deps = []} = this.parseCode(code, path.dirname(filePath));\n        this.modules[moduleName] = sourceCode;\n        deps.forEach(dep => {\n            this.build(dep);\n        })\n        return this.modules;\n    }\n\n    start() {\n\n        const module = this.build(this.config.entry, true);\n        console.log(module)\n    }\n\n    load(p: string, code: string) {\n        let rules = this.config.module?.rules;\n        if (!rules?.length) return code;\n        rules.forEach(rule => {\n            const {test, use } = rule;\n            if (test.test(p)) {\n                let loaderLen = 0;\n                while(loaderLen <= use.length) {\n                    let loader = require(use[loaderLen++]);\n                    code = loader(code);\n                }\n\n            }\n        })\n        return code\n    }\n}\n\nconst m = new Minipack({\n    mode: \"development\",\n    entry: \"./test.js\",\n    output: {\n        filename: \"bundle.js\",\n        path: path.resolve(__dirname, \"dist\")\n    }\n});\nm.hooks.beforeStart.call(\"beforeStart\")\nm.start();\n```\n\n### 关于loader\n\n一个简单的loader-它的作用是可以通过babel将代码转换。\n\n```typescript\nimport * as loaderUtils from 'loader-utils';\nimport * as babel from 'babel-core';\nfunction loader(code) {\n    const opt = loaderUtils.getOptions(this);\n    const fn= this.async()\n    babel.transform(source, {\n        ...opt\n    }, (err, result) => {\n        const {code, map} = result\n        fn(err, code, map)\n    })\n}\n```\n\n在使用过程中还需注意 loaderContext的使用,即this上挂的一些API\n\n**同步返回** \n\nthis.callback\n\n**异步返回**\n\n```\nconst callback = this.async();\ncallback(err, code, map)\n```\n\n**配置了options对象**\n\nthis.query\n\n**模块所在的目录**\n\nthis.context  \n\n**解析出来的 request 字符串**\n\nthis.request\n\n### “Raw” loader\n\n资源文件会被转化为 UTF-8 字符串，然后传给 loader。\n\n**`pitch` 方法**\n\n如果某个 loader 在 `pitch` 方法中给出一个结果，那么这个过程会回过身来，并跳过剩下的 loader。\n\n## Plugin\n\n一个最简单的plugin\n\n- compiler ：webpack 实例，记载着你在 webpack.config.js 中的配置和其它基础构建Module 等。\n- compilation ：包含了当前的模块资源、编译生成资源、变化的文件等，继承compiler。\n\n```typescript\nclass Plugin {\n    apply(packer: Minipack) {\n        packer.hooks.emit.tap(\"emit\", () => {\n            console.log('emit');\n        })\n    }\n}\n```\n\n插件生命周期\n\nentryOption : 在 webpack 选项中的 entry 配置项 处理过之后，执行插件。\nafterPlugins : 设置完初始插件之后，执行插件。\ncompilation : 编译创建之后，生成文件之前，执行插件。。\nemit : 生成资源到 output 目录之前。\ndone : 编译完成。`compiler.hooks` 下指定**事件钩子函数**，便会触发钩子时，执行回调函数。\n\nWebpack 提供三种触发钩子的方法：\n\n- `tap` ：以**同步方式**触发钩子；\n- `tapAsync` ：以**异步方式**触发钩子；\n- `tapPromise` ：以**异步方式**触发钩子，返回 Promise；\n- ![image-20210324010907998](https://technologybook.tech/assets/img/w4.png)","source":"_posts/webpack3.md","raw":"title: webpack king（三）\ndate: 2019/09/17\ncover: https://raw.githubusercontent.com/webpack-contrib/awesome-webpack/master/media/awesome_webpack_branding.png\ncategories:\n- tool\ntags:\n- webpack\n\n---\n# webpack king（三）\n\nwebpack的设计与实现\n\n以下是一个Mini webpack的执行流程图。\n\n![w3](https://technologybook.tech/assets/img/w3.png)\n\n\n\n通过acorn对源代码的编译得到Ast，以下是Ast节点所包含的信息，对于commonjs规范来说，只需要将callee下的name重写，并将argument重写就可以实现模块的有效引用\n\n![w1](https://technologybook.tech/assets/img//w1.png)\n\n![w2](https://technologybook.tech/assets/img/w2.png)\n\n## 我的实现\n\n```typescript\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as process from 'process';\nimport * as babylon from \"babylon\";\nimport traverse from \"@babel/traverse\";\nimport generator from \"@babel/generator\";\nimport * as t from '@babel/types';\nimport { SyncHook } from 'tapable';\ninterface Config {\n    entry: string,\n    mode: \"development\" | \"production\",\n    output: {\n        filename: string,\n        path: string\n    },\n    module?: {\n        rules: Array<{test: RegExp, use: Array<string>}>\n    },\n    plugins?: Array<any>\n}\ntype Modules = {[k in string]: string}\n\nclass Minipack {\n    root: string = process.cwd();\n    entry: string = this.config.entry;\n    modules: Modules = {};\n    hooks = {\n        beforeStart: new SyncHook([\"beforeStart\"]),\n        compile: new SyncHook([\"compile\"]),\n        emit: new SyncHook([\"emit\"])\n    }\n    constructor(public config: Config) {\n        this.config = config;\n        let plugins = this.config.plugins || [];\n        plugins.forEach(p => p.apply(this))\n    }\n    static CURRENT: Readonly<string> = \"./\";\n\n    getSourceCode(path: string): string {\n        let code = fs.readFileSync(path, 'utf8');\n        code = this.load(path, code);\n        return code;\n    }\n\n    parseCode(code: string, parentPath: string): {code: string, deps: Array<string>}{\n        const ast = babylon.parse(code)as any as t.Node;\n        let deps: Array<string> = [];\n        traverse(ast , {\n            CallExpression(p) {\n                let node = p.node as any;\n                if (node.callee .name === 'require') {\n                    node.callee.name = \"__webpack_require__\";\n                    const currentName = node.arguments[0].value;\n                    let name = `${Minipack.CURRENT}${path.join(parentPath, currentName)}`;\n                    deps.push(name)\n                    node.arguments = [t.stringLiteral(currentName)];\n                }\n            }\n        })\n        const finalCode = generator(ast);\n        return { code: finalCode.code, deps}\n    }\n\n    build(filePath: string, isEntry = false ): Modules {\n        const code = this.getSourceCode(path.resolve(this.root, filePath));\n        let moduleName = Minipack.CURRENT + path.relative(this.root, filePath);\n        isEntry && (this.entry = moduleName);\n        this.hooks.compile.call(\"compile\")\n        const {code: sourceCode, deps = []} = this.parseCode(code, path.dirname(filePath));\n        this.modules[moduleName] = sourceCode;\n        deps.forEach(dep => {\n            this.build(dep);\n        })\n        return this.modules;\n    }\n\n    start() {\n\n        const module = this.build(this.config.entry, true);\n        console.log(module)\n    }\n\n    load(p: string, code: string) {\n        let rules = this.config.module?.rules;\n        if (!rules?.length) return code;\n        rules.forEach(rule => {\n            const {test, use } = rule;\n            if (test.test(p)) {\n                let loaderLen = 0;\n                while(loaderLen <= use.length) {\n                    let loader = require(use[loaderLen++]);\n                    code = loader(code);\n                }\n\n            }\n        })\n        return code\n    }\n}\n\nconst m = new Minipack({\n    mode: \"development\",\n    entry: \"./test.js\",\n    output: {\n        filename: \"bundle.js\",\n        path: path.resolve(__dirname, \"dist\")\n    }\n});\nm.hooks.beforeStart.call(\"beforeStart\")\nm.start();\n```\n\n### 关于loader\n\n一个简单的loader-它的作用是可以通过babel将代码转换。\n\n```typescript\nimport * as loaderUtils from 'loader-utils';\nimport * as babel from 'babel-core';\nfunction loader(code) {\n    const opt = loaderUtils.getOptions(this);\n    const fn= this.async()\n    babel.transform(source, {\n        ...opt\n    }, (err, result) => {\n        const {code, map} = result\n        fn(err, code, map)\n    })\n}\n```\n\n在使用过程中还需注意 loaderContext的使用,即this上挂的一些API\n\n**同步返回** \n\nthis.callback\n\n**异步返回**\n\n```\nconst callback = this.async();\ncallback(err, code, map)\n```\n\n**配置了options对象**\n\nthis.query\n\n**模块所在的目录**\n\nthis.context  \n\n**解析出来的 request 字符串**\n\nthis.request\n\n### “Raw” loader\n\n资源文件会被转化为 UTF-8 字符串，然后传给 loader。\n\n**`pitch` 方法**\n\n如果某个 loader 在 `pitch` 方法中给出一个结果，那么这个过程会回过身来，并跳过剩下的 loader。\n\n## Plugin\n\n一个最简单的plugin\n\n- compiler ：webpack 实例，记载着你在 webpack.config.js 中的配置和其它基础构建Module 等。\n- compilation ：包含了当前的模块资源、编译生成资源、变化的文件等，继承compiler。\n\n```typescript\nclass Plugin {\n    apply(packer: Minipack) {\n        packer.hooks.emit.tap(\"emit\", () => {\n            console.log('emit');\n        })\n    }\n}\n```\n\n插件生命周期\n\nentryOption : 在 webpack 选项中的 entry 配置项 处理过之后，执行插件。\nafterPlugins : 设置完初始插件之后，执行插件。\ncompilation : 编译创建之后，生成文件之前，执行插件。。\nemit : 生成资源到 output 目录之前。\ndone : 编译完成。`compiler.hooks` 下指定**事件钩子函数**，便会触发钩子时，执行回调函数。\n\nWebpack 提供三种触发钩子的方法：\n\n- `tap` ：以**同步方式**触发钩子；\n- `tapAsync` ：以**异步方式**触发钩子；\n- `tapPromise` ：以**异步方式**触发钩子，返回 Promise；\n- ![image-20210324010907998](https://technologybook.tech/assets/img/w4.png)","slug":"webpack3","published":1,"updated":"2024-04-10T17:46:25.879Z","_id":"cluvjqddv001x0wpd0pjq1bph","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"webpack-king（三）\"><a href=\"#webpack-king（三）\" class=\"headerlink\" title=\"webpack king（三）\"></a>webpack king（三）</h1><p>webpack的设计与实现</p>\n<p>以下是一个Mini webpack的执行流程图。</p>\n<p><img src=\"https://technologybook.tech/assets/img/w3.png\" alt=\"w3\"></p>\n<p>通过acorn对源代码的编译得到Ast，以下是Ast节点所包含的信息，对于commonjs规范来说，只需要将callee下的name重写，并将argument重写就可以实现模块的有效引用</p>\n<p><img src=\"https://technologybook.tech/assets/img//w1.png\" alt=\"w1\"></p>\n<p><img src=\"https://technologybook.tech/assets/img/w2.png\" alt=\"w2\"></p>\n<h2 id=\"我的实现\"><a href=\"#我的实现\" class=\"headerlink\" title=\"我的实现\"></a>我的实现</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> process <span class=\"keyword\">from</span> <span class=\"string\">&#x27;process&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> babylon <span class=\"keyword\">from</span> <span class=\"string\">&quot;babylon&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> traverse <span class=\"keyword\">from</span> <span class=\"string\">&quot;@babel/traverse&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> generator <span class=\"keyword\">from</span> <span class=\"string\">&quot;@babel/generator&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> t <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@babel/types&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SyncHook</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;tapable&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span> | <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>?: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: <span class=\"title class_\">Array</span>&lt;&#123;<span class=\"attr\">test</span>: <span class=\"title class_\">RegExp</span>, <span class=\"attr\">use</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;&#125;&gt;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins?: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Modules</span> = &#123;[k <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Minipack</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">root</span>: <span class=\"built_in\">string</span> = process.<span class=\"title function_\">cwd</span>();</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"built_in\">string</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">entry</span>;</span><br><span class=\"line\">    <span class=\"attr\">modules</span>: <span class=\"title class_\">Modules</span> = &#123;&#125;;</span><br><span class=\"line\">    hooks = &#123;</span><br><span class=\"line\">        <span class=\"attr\">beforeStart</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;beforeStart&quot;</span>]),</span><br><span class=\"line\">        <span class=\"attr\">compile</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compile&quot;</span>]),</span><br><span class=\"line\">        <span class=\"attr\">emit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;emit&quot;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> config: Config</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">config</span> = config;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> plugins = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">plugins</span> || [];</span><br><span class=\"line\">        plugins.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"attr\">CURRENT</span>: <span class=\"title class_\">Readonly</span>&lt;<span class=\"built_in\">string</span>&gt; = <span class=\"string\">&quot;./&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">getSourceCode</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> code = fs.<span class=\"title function_\">readFileSync</span>(path, <span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\">        code = <span class=\"variable language_\">this</span>.<span class=\"title function_\">load</span>(path, code);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">parseCode</span>(<span class=\"attr\">code</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">parentPath</span>: <span class=\"built_in\">string</span>): &#123;<span class=\"attr\">code</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">deps</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;&#125;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ast = babylon.<span class=\"title function_\">parse</span>(code)<span class=\"keyword\">as</span> <span class=\"built_in\">any</span> <span class=\"keyword\">as</span> t.<span class=\"property\">Node</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">deps</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; = [];</span><br><span class=\"line\">        <span class=\"title function_\">traverse</span>(ast , &#123;</span><br><span class=\"line\">            <span class=\"title class_\">CallExpression</span>(p) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> node = p.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.<span class=\"property\">callee</span> .<span class=\"property\">name</span> === <span class=\"string\">&#x27;require&#x27;</span>) &#123;</span><br><span class=\"line\">                    node.<span class=\"property\">callee</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;__webpack_require__&quot;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> currentName = node.<span class=\"property\">arguments</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> name = <span class=\"string\">`<span class=\"subst\">$&#123;Minipack.CURRENT&#125;</span><span class=\"subst\">$&#123;path.join(parentPath, currentName)&#125;</span>`</span>;</span><br><span class=\"line\">                    deps.<span class=\"title function_\">push</span>(name)</span><br><span class=\"line\">                    node.<span class=\"property\">arguments</span> = [t.<span class=\"title function_\">stringLiteral</span>(currentName)];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> finalCode = <span class=\"title function_\">generator</span>(ast);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">code</span>: finalCode.<span class=\"property\">code</span>, deps&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">build</span>(<span class=\"attr\">filePath</span>: <span class=\"built_in\">string</span>, isEntry = <span class=\"literal\">false</span> ): <span class=\"title class_\">Modules</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> code = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getSourceCode</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>, filePath));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> moduleName = <span class=\"title class_\">Minipack</span>.<span class=\"property\">CURRENT</span> + path.<span class=\"title function_\">relative</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>, filePath);</span><br><span class=\"line\">        isEntry &amp;&amp; (<span class=\"variable language_\">this</span>.<span class=\"property\">entry</span> = moduleName);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">compile</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;compile&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;<span class=\"attr\">code</span>: sourceCode, deps = []&#125; = <span class=\"variable language_\">this</span>.<span class=\"title function_\">parseCode</span>(code, path.<span class=\"title function_\">dirname</span>(filePath));</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>[moduleName] = sourceCode;</span><br><span class=\"line\">        deps.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">dep</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">build</span>(dep);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"variable language_\">module</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">build</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">entry</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">load</span>(<span class=\"params\">p: <span class=\"built_in\">string</span>, code: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> rules = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">module</span>?.<span class=\"property\">rules</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rules?.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">        rules.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">rule</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;test, use &#125; = rule;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (test.<span class=\"title function_\">test</span>(p)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> loaderLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(loaderLen &lt;= use.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> loader = <span class=\"built_in\">require</span>(use[loaderLen++]);</span><br><span class=\"line\">                    code = <span class=\"title function_\">loader</span>(code);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"title class_\">Minipack</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./test.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">m.<span class=\"property\">hooks</span>.<span class=\"property\">beforeStart</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;beforeStart&quot;</span>)</span><br><span class=\"line\">m.<span class=\"title function_\">start</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于loader\"><a href=\"#关于loader\" class=\"headerlink\" title=\"关于loader\"></a>关于loader</h3><p>一个简单的loader-它的作用是可以通过babel将代码转换。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> loaderUtils <span class=\"keyword\">from</span> <span class=\"string\">&#x27;loader-utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> babel <span class=\"keyword\">from</span> <span class=\"string\">&#x27;babel-core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loader</span>(<span class=\"params\">code</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> opt = loaderUtils.<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn= <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">    babel.<span class=\"title function_\">transform</span>(source, &#123;</span><br><span class=\"line\">        ...opt</span><br><span class=\"line\">    &#125;, <span class=\"function\">(<span class=\"params\">err, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;code, map&#125; = result</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(err, code, map)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用过程中还需注意 loaderContext的使用,即this上挂的一些API</p>\n<p><strong>同步返回</strong> </p>\n<p>this.callback</p>\n<p><strong>异步返回</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const callback = this.async();</span><br><span class=\"line\">callback(err, code, map)</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置了options对象</strong></p>\n<p>this.query</p>\n<p><strong>模块所在的目录</strong></p>\n<p>this.context  </p>\n<p><strong>解析出来的 request 字符串</strong></p>\n<p>this.request</p>\n<h3 id=\"“Raw”-loader\"><a href=\"#“Raw”-loader\" class=\"headerlink\" title=\"“Raw” loader\"></a>“Raw” loader</h3><p>资源文件会被转化为 UTF-8 字符串，然后传给 loader。</p>\n<p><strong><code>pitch</code> 方法</strong></p>\n<p>如果某个 loader 在 <code>pitch</code> 方法中给出一个结果，那么这个过程会回过身来，并跳过剩下的 loader。</p>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><p>一个最简单的plugin</p>\n<ul>\n<li>compiler ：webpack 实例，记载着你在 webpack.config.js 中的配置和其它基础构建Module 等。</li>\n<li>compilation ：包含了当前的模块资源、编译生成资源、变化的文件等，继承compiler。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Plugin</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">apply</span>(<span class=\"params\">packer: Minipack</span>) &#123;</span><br><span class=\"line\">        packer.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;emit&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;emit&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>插件生命周期</p>\n<p>entryOption : 在 webpack 选项中的 entry 配置项 处理过之后，执行插件。<br>afterPlugins : 设置完初始插件之后，执行插件。<br>compilation : 编译创建之后，生成文件之前，执行插件。。<br>emit : 生成资源到 output 目录之前。<br>done : 编译完成。<code>compiler.hooks</code> 下指定<strong>事件钩子函数</strong>，便会触发钩子时，执行回调函数。</p>\n<p>Webpack 提供三种触发钩子的方法：</p>\n<ul>\n<li><code>tap</code> ：以<strong>同步方式</strong>触发钩子；</li>\n<li><code>tapAsync</code> ：以<strong>异步方式</strong>触发钩子；</li>\n<li><code>tapPromise</code> ：以<strong>异步方式</strong>触发钩子，返回 Promise；</li>\n<li><img src=\"https://technologybook.tech/assets/img/w4.png\" alt=\"image-20210324010907998\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack-king（三）\"><a href=\"#webpack-king（三）\" class=\"headerlink\" title=\"webpack king（三）\"></a>webpack king（三）</h1><p>webpack的设计与实现</p>\n<p>以下是一个Mini webpack的执行流程图。</p>\n<p><img src=\"https://technologybook.tech/assets/img/w3.png\" alt=\"w3\"></p>\n<p>通过acorn对源代码的编译得到Ast，以下是Ast节点所包含的信息，对于commonjs规范来说，只需要将callee下的name重写，并将argument重写就可以实现模块的有效引用</p>\n<p><img src=\"https://technologybook.tech/assets/img//w1.png\" alt=\"w1\"></p>\n<p><img src=\"https://technologybook.tech/assets/img/w2.png\" alt=\"w2\"></p>\n<h2 id=\"我的实现\"><a href=\"#我的实现\" class=\"headerlink\" title=\"我的实现\"></a>我的实现</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> process <span class=\"keyword\">from</span> <span class=\"string\">&#x27;process&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> babylon <span class=\"keyword\">from</span> <span class=\"string\">&quot;babylon&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> traverse <span class=\"keyword\">from</span> <span class=\"string\">&quot;@babel/traverse&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> generator <span class=\"keyword\">from</span> <span class=\"string\">&quot;@babel/generator&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> t <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@babel/types&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SyncHook</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;tapable&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span> | <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>?: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: <span class=\"title class_\">Array</span>&lt;&#123;<span class=\"attr\">test</span>: <span class=\"title class_\">RegExp</span>, <span class=\"attr\">use</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;&#125;&gt;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins?: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Modules</span> = &#123;[k <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Minipack</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">root</span>: <span class=\"built_in\">string</span> = process.<span class=\"title function_\">cwd</span>();</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"built_in\">string</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">entry</span>;</span><br><span class=\"line\">    <span class=\"attr\">modules</span>: <span class=\"title class_\">Modules</span> = &#123;&#125;;</span><br><span class=\"line\">    hooks = &#123;</span><br><span class=\"line\">        <span class=\"attr\">beforeStart</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;beforeStart&quot;</span>]),</span><br><span class=\"line\">        <span class=\"attr\">compile</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compile&quot;</span>]),</span><br><span class=\"line\">        <span class=\"attr\">emit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;emit&quot;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> config: Config</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">config</span> = config;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> plugins = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">plugins</span> || [];</span><br><span class=\"line\">        plugins.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"attr\">CURRENT</span>: <span class=\"title class_\">Readonly</span>&lt;<span class=\"built_in\">string</span>&gt; = <span class=\"string\">&quot;./&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">getSourceCode</span>(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> code = fs.<span class=\"title function_\">readFileSync</span>(path, <span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\">        code = <span class=\"variable language_\">this</span>.<span class=\"title function_\">load</span>(path, code);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">parseCode</span>(<span class=\"attr\">code</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">parentPath</span>: <span class=\"built_in\">string</span>): &#123;<span class=\"attr\">code</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">deps</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;&#125;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ast = babylon.<span class=\"title function_\">parse</span>(code)<span class=\"keyword\">as</span> <span class=\"built_in\">any</span> <span class=\"keyword\">as</span> t.<span class=\"property\">Node</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">deps</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; = [];</span><br><span class=\"line\">        <span class=\"title function_\">traverse</span>(ast , &#123;</span><br><span class=\"line\">            <span class=\"title class_\">CallExpression</span>(p) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> node = p.<span class=\"property\">node</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.<span class=\"property\">callee</span> .<span class=\"property\">name</span> === <span class=\"string\">&#x27;require&#x27;</span>) &#123;</span><br><span class=\"line\">                    node.<span class=\"property\">callee</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;__webpack_require__&quot;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> currentName = node.<span class=\"property\">arguments</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> name = <span class=\"string\">`<span class=\"subst\">$&#123;Minipack.CURRENT&#125;</span><span class=\"subst\">$&#123;path.join(parentPath, currentName)&#125;</span>`</span>;</span><br><span class=\"line\">                    deps.<span class=\"title function_\">push</span>(name)</span><br><span class=\"line\">                    node.<span class=\"property\">arguments</span> = [t.<span class=\"title function_\">stringLiteral</span>(currentName)];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> finalCode = <span class=\"title function_\">generator</span>(ast);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">code</span>: finalCode.<span class=\"property\">code</span>, deps&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">build</span>(<span class=\"attr\">filePath</span>: <span class=\"built_in\">string</span>, isEntry = <span class=\"literal\">false</span> ): <span class=\"title class_\">Modules</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> code = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getSourceCode</span>(path.<span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>, filePath));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> moduleName = <span class=\"title class_\">Minipack</span>.<span class=\"property\">CURRENT</span> + path.<span class=\"title function_\">relative</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>, filePath);</span><br><span class=\"line\">        isEntry &amp;&amp; (<span class=\"variable language_\">this</span>.<span class=\"property\">entry</span> = moduleName);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span>.<span class=\"property\">compile</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;compile&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;<span class=\"attr\">code</span>: sourceCode, deps = []&#125; = <span class=\"variable language_\">this</span>.<span class=\"title function_\">parseCode</span>(code, path.<span class=\"title function_\">dirname</span>(filePath));</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>[moduleName] = sourceCode;</span><br><span class=\"line\">        deps.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">dep</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">build</span>(dep);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"variable language_\">module</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">build</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">entry</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">load</span>(<span class=\"params\">p: <span class=\"built_in\">string</span>, code: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> rules = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">module</span>?.<span class=\"property\">rules</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rules?.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">        rules.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">rule</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;test, use &#125; = rule;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (test.<span class=\"title function_\">test</span>(p)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> loaderLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(loaderLen &lt;= use.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> loader = <span class=\"built_in\">require</span>(use[loaderLen++]);</span><br><span class=\"line\">                    code = <span class=\"title function_\">loader</span>(code);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"title class_\">Minipack</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./test.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">m.<span class=\"property\">hooks</span>.<span class=\"property\">beforeStart</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;beforeStart&quot;</span>)</span><br><span class=\"line\">m.<span class=\"title function_\">start</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于loader\"><a href=\"#关于loader\" class=\"headerlink\" title=\"关于loader\"></a>关于loader</h3><p>一个简单的loader-它的作用是可以通过babel将代码转换。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> loaderUtils <span class=\"keyword\">from</span> <span class=\"string\">&#x27;loader-utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> babel <span class=\"keyword\">from</span> <span class=\"string\">&#x27;babel-core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loader</span>(<span class=\"params\">code</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> opt = loaderUtils.<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn= <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">    babel.<span class=\"title function_\">transform</span>(source, &#123;</span><br><span class=\"line\">        ...opt</span><br><span class=\"line\">    &#125;, <span class=\"function\">(<span class=\"params\">err, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;code, map&#125; = result</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(err, code, map)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用过程中还需注意 loaderContext的使用,即this上挂的一些API</p>\n<p><strong>同步返回</strong> </p>\n<p>this.callback</p>\n<p><strong>异步返回</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const callback = this.async();</span><br><span class=\"line\">callback(err, code, map)</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置了options对象</strong></p>\n<p>this.query</p>\n<p><strong>模块所在的目录</strong></p>\n<p>this.context  </p>\n<p><strong>解析出来的 request 字符串</strong></p>\n<p>this.request</p>\n<h3 id=\"“Raw”-loader\"><a href=\"#“Raw”-loader\" class=\"headerlink\" title=\"“Raw” loader\"></a>“Raw” loader</h3><p>资源文件会被转化为 UTF-8 字符串，然后传给 loader。</p>\n<p><strong><code>pitch</code> 方法</strong></p>\n<p>如果某个 loader 在 <code>pitch</code> 方法中给出一个结果，那么这个过程会回过身来，并跳过剩下的 loader。</p>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><p>一个最简单的plugin</p>\n<ul>\n<li>compiler ：webpack 实例，记载着你在 webpack.config.js 中的配置和其它基础构建Module 等。</li>\n<li>compilation ：包含了当前的模块资源、编译生成资源、变化的文件等，继承compiler。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Plugin</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">apply</span>(<span class=\"params\">packer: Minipack</span>) &#123;</span><br><span class=\"line\">        packer.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;emit&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;emit&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>插件生命周期</p>\n<p>entryOption : 在 webpack 选项中的 entry 配置项 处理过之后，执行插件。<br>afterPlugins : 设置完初始插件之后，执行插件。<br>compilation : 编译创建之后，生成文件之前，执行插件。。<br>emit : 生成资源到 output 目录之前。<br>done : 编译完成。<code>compiler.hooks</code> 下指定<strong>事件钩子函数</strong>，便会触发钩子时，执行回调函数。</p>\n<p>Webpack 提供三种触发钩子的方法：</p>\n<ul>\n<li><code>tap</code> ：以<strong>同步方式</strong>触发钩子；</li>\n<li><code>tapAsync</code> ：以<strong>异步方式</strong>触发钩子；</li>\n<li><code>tapPromise</code> ：以<strong>异步方式</strong>触发钩子，返回 Promise；</li>\n<li><img src=\"https://technologybook.tech/assets/img/w4.png\" alt=\"image-20210324010907998\"></li>\n</ul>\n"},{"title":"HTTP！！！","date":"2019-05-14T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/osi.png","_content":"# HTTP（S）协议的故事\n\n> The **Hypertext Transfer Protocol** (**HTTP**) is an [application layer](https://en.wikipedia.org/wiki/Application_layer) protocol for distributed, collaborative, [hypermedia](https://en.wikipedia.org/wiki/Hypermedia) information systems \n>\n> -- wikipedia\n\n\n\n## 为什么需要 http ？\n\nhttp设计的初衷是提供一种接受和发布html页面的方法，随着协议的发展逐渐演变成当代互联网的基础，即提供可靠的信息交换途径。\n\n## 原理\n\n### 网络分层\n\n不同的分层相应的解决了一些网络中的问题。例如数据丢包，重复，完整性问题，信号转换，信号衰减等，限制了层与层之间的接口就实现的网络升级低耦合的目标。\n\n- ***OSI*** 七层网络模型（物理层，数据链入层，网络层，传输层，会话层，表现层，应用层）。\n\n  ![image-20210319210204161](https://technologybook.tech/assets/img/osi.png)\n\n\n\n一个请求在七层模型中运转图示\n\n![image-20210319212258553](https://technologybook.tech/assets/img/osi1.png)\n\n### TCP/IP\n\nTCP的一些特点\n\n- 基于链接（数据之间传输需要建立连接）\n- 全双工： 双向\n- 字节流\n- 可靠\n- 拥塞控制\n\n可靠： TCP 三次握手四次挥手\n\n​\t\t\t\t\t\t\t\t![osi3](https://technologybook.tech/assets/img/osi3.png)\n\n通过报标示\n\nACK：响应报文\n\nSYN： 同步序列号建立连接\n\nFIN： 结束连接的报文\n\nURG： 优先处理\n\n![image-20210319213733857](https://technologybook.tech/assets/img/osi2.png)\n\n## https\n\n> 对抗中间人攻击的唯一的办法\n\nhttps = http + ssl/tsl\n\n摘要算法: 能够把任意长度的数据压缩成固定长度的摘要。md5/sha1/sha2/sha256\n\n对成加密算法: xor AES RC4\n\n非对称加密算法: 有两个密钥，公钥和私钥，公钥加密私钥解密。 DH/DSA/RSA/ECC\n\n 数字证书: 先生成公钥和私钥，提供公钥，域名等信息给CA机构，机构审查，通过后提供包含了签名（通过摘要算法获得），CA信息，有效时间，序列号和公钥的数字证书。\n\n### 过程\n\n1. TCP握手建立连接\n2. 客户端的加密套件（客户端支持哪些加密算法）\n3. 服务端查看支持的加密方式并传递支持的加密方式和公钥数字证书（CA/公钥用户信息/公钥/权威机构签名/有效期）\n4. 客户端验证证书 （通过hash算法获得摘要， 通过公钥获得CA的摘要，比对）\n5. 生成随机密钥（对成加密密钥），并将生成的密钥用公钥进行加密\n6. 服务端私钥解密\n7. 使用对成加密密钥加密数据","source":"_posts/httpNhttps.md","raw":"title: HTTP！！！\ndate: 2019/05/15\ncover: https://technologybook.tech/assets/img/osi.png\ncategories:\n- protocol\ntags:\n- http\n\n---\n# HTTP（S）协议的故事\n\n> The **Hypertext Transfer Protocol** (**HTTP**) is an [application layer](https://en.wikipedia.org/wiki/Application_layer) protocol for distributed, collaborative, [hypermedia](https://en.wikipedia.org/wiki/Hypermedia) information systems \n>\n> -- wikipedia\n\n\n\n## 为什么需要 http ？\n\nhttp设计的初衷是提供一种接受和发布html页面的方法，随着协议的发展逐渐演变成当代互联网的基础，即提供可靠的信息交换途径。\n\n## 原理\n\n### 网络分层\n\n不同的分层相应的解决了一些网络中的问题。例如数据丢包，重复，完整性问题，信号转换，信号衰减等，限制了层与层之间的接口就实现的网络升级低耦合的目标。\n\n- ***OSI*** 七层网络模型（物理层，数据链入层，网络层，传输层，会话层，表现层，应用层）。\n\n  ![image-20210319210204161](https://technologybook.tech/assets/img/osi.png)\n\n\n\n一个请求在七层模型中运转图示\n\n![image-20210319212258553](https://technologybook.tech/assets/img/osi1.png)\n\n### TCP/IP\n\nTCP的一些特点\n\n- 基于链接（数据之间传输需要建立连接）\n- 全双工： 双向\n- 字节流\n- 可靠\n- 拥塞控制\n\n可靠： TCP 三次握手四次挥手\n\n​\t\t\t\t\t\t\t\t![osi3](https://technologybook.tech/assets/img/osi3.png)\n\n通过报标示\n\nACK：响应报文\n\nSYN： 同步序列号建立连接\n\nFIN： 结束连接的报文\n\nURG： 优先处理\n\n![image-20210319213733857](https://technologybook.tech/assets/img/osi2.png)\n\n## https\n\n> 对抗中间人攻击的唯一的办法\n\nhttps = http + ssl/tsl\n\n摘要算法: 能够把任意长度的数据压缩成固定长度的摘要。md5/sha1/sha2/sha256\n\n对成加密算法: xor AES RC4\n\n非对称加密算法: 有两个密钥，公钥和私钥，公钥加密私钥解密。 DH/DSA/RSA/ECC\n\n 数字证书: 先生成公钥和私钥，提供公钥，域名等信息给CA机构，机构审查，通过后提供包含了签名（通过摘要算法获得），CA信息，有效时间，序列号和公钥的数字证书。\n\n### 过程\n\n1. TCP握手建立连接\n2. 客户端的加密套件（客户端支持哪些加密算法）\n3. 服务端查看支持的加密方式并传递支持的加密方式和公钥数字证书（CA/公钥用户信息/公钥/权威机构签名/有效期）\n4. 客户端验证证书 （通过hash算法获得摘要， 通过公钥获得CA的摘要，比对）\n5. 生成随机密钥（对成加密密钥），并将生成的密钥用公钥进行加密\n6. 服务端私钥解密\n7. 使用对成加密密钥加密数据","slug":"httpNhttps","published":1,"updated":"2024-04-10T17:46:25.877Z","_id":"cluvjqddv00200wpd2x0t5rbw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"HTTP（S）协议的故事\"><a href=\"#HTTP（S）协议的故事\" class=\"headerlink\" title=\"HTTP（S）协议的故事\"></a>HTTP（S）协议的故事</h1><blockquote>\n<p>The <strong>Hypertext Transfer Protocol</strong> (<strong>HTTP</strong>) is an <a href=\"https://en.wikipedia.org/wiki/Application_layer\">application layer</a> protocol for distributed, collaborative, <a href=\"https://en.wikipedia.org/wiki/Hypermedia\">hypermedia</a> information systems </p>\n<p>– wikipedia</p>\n</blockquote>\n<h2 id=\"为什么需要-http-？\"><a href=\"#为什么需要-http-？\" class=\"headerlink\" title=\"为什么需要 http ？\"></a>为什么需要 http ？</h2><p>http设计的初衷是提供一种接受和发布html页面的方法，随着协议的发展逐渐演变成当代互联网的基础，即提供可靠的信息交换途径。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"网络分层\"><a href=\"#网络分层\" class=\"headerlink\" title=\"网络分层\"></a>网络分层</h3><p>不同的分层相应的解决了一些网络中的问题。例如数据丢包，重复，完整性问题，信号转换，信号衰减等，限制了层与层之间的接口就实现的网络升级低耦合的目标。</p>\n<ul>\n<li><p><em><strong>OSI</strong></em> 七层网络模型（物理层，数据链入层，网络层，传输层，会话层，表现层，应用层）。</p>\n<p><img src=\"https://technologybook.tech/assets/img/osi.png\" alt=\"image-20210319210204161\"></p>\n</li>\n</ul>\n<p>一个请求在七层模型中运转图示</p>\n<p><img src=\"https://technologybook.tech/assets/img/osi1.png\" alt=\"image-20210319212258553\"></p>\n<h3 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP&#x2F;IP\"></a>TCP&#x2F;IP</h3><p>TCP的一些特点</p>\n<ul>\n<li>基于链接（数据之间传输需要建立连接）</li>\n<li>全双工： 双向</li>\n<li>字节流</li>\n<li>可靠</li>\n<li>拥塞控制</li>\n</ul>\n<p>可靠： TCP 三次握手四次挥手</p>\n<p>​\t\t\t\t\t\t\t\t<img src=\"https://technologybook.tech/assets/img/osi3.png\" alt=\"osi3\"></p>\n<p>通过报标示</p>\n<p>ACK：响应报文</p>\n<p>SYN： 同步序列号建立连接</p>\n<p>FIN： 结束连接的报文</p>\n<p>URG： 优先处理</p>\n<p><img src=\"https://technologybook.tech/assets/img/osi2.png\" alt=\"image-20210319213733857\"></p>\n<h2 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h2><blockquote>\n<p>对抗中间人攻击的唯一的办法</p>\n</blockquote>\n<p>https &#x3D; http + ssl&#x2F;tsl</p>\n<p>摘要算法: 能够把任意长度的数据压缩成固定长度的摘要。md5&#x2F;sha1&#x2F;sha2&#x2F;sha256</p>\n<p>对成加密算法: xor AES RC4</p>\n<p>非对称加密算法: 有两个密钥，公钥和私钥，公钥加密私钥解密。 DH&#x2F;DSA&#x2F;RSA&#x2F;ECC</p>\n<p> 数字证书: 先生成公钥和私钥，提供公钥，域名等信息给CA机构，机构审查，通过后提供包含了签名（通过摘要算法获得），CA信息，有效时间，序列号和公钥的数字证书。</p>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><ol>\n<li>TCP握手建立连接</li>\n<li>客户端的加密套件（客户端支持哪些加密算法）</li>\n<li>服务端查看支持的加密方式并传递支持的加密方式和公钥数字证书（CA&#x2F;公钥用户信息&#x2F;公钥&#x2F;权威机构签名&#x2F;有效期）</li>\n<li>客户端验证证书 （通过hash算法获得摘要， 通过公钥获得CA的摘要，比对）</li>\n<li>生成随机密钥（对成加密密钥），并将生成的密钥用公钥进行加密</li>\n<li>服务端私钥解密</li>\n<li>使用对成加密密钥加密数据</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTTP（S）协议的故事\"><a href=\"#HTTP（S）协议的故事\" class=\"headerlink\" title=\"HTTP（S）协议的故事\"></a>HTTP（S）协议的故事</h1><blockquote>\n<p>The <strong>Hypertext Transfer Protocol</strong> (<strong>HTTP</strong>) is an <a href=\"https://en.wikipedia.org/wiki/Application_layer\">application layer</a> protocol for distributed, collaborative, <a href=\"https://en.wikipedia.org/wiki/Hypermedia\">hypermedia</a> information systems </p>\n<p>– wikipedia</p>\n</blockquote>\n<h2 id=\"为什么需要-http-？\"><a href=\"#为什么需要-http-？\" class=\"headerlink\" title=\"为什么需要 http ？\"></a>为什么需要 http ？</h2><p>http设计的初衷是提供一种接受和发布html页面的方法，随着协议的发展逐渐演变成当代互联网的基础，即提供可靠的信息交换途径。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"网络分层\"><a href=\"#网络分层\" class=\"headerlink\" title=\"网络分层\"></a>网络分层</h3><p>不同的分层相应的解决了一些网络中的问题。例如数据丢包，重复，完整性问题，信号转换，信号衰减等，限制了层与层之间的接口就实现的网络升级低耦合的目标。</p>\n<ul>\n<li><p><em><strong>OSI</strong></em> 七层网络模型（物理层，数据链入层，网络层，传输层，会话层，表现层，应用层）。</p>\n<p><img src=\"https://technologybook.tech/assets/img/osi.png\" alt=\"image-20210319210204161\"></p>\n</li>\n</ul>\n<p>一个请求在七层模型中运转图示</p>\n<p><img src=\"https://technologybook.tech/assets/img/osi1.png\" alt=\"image-20210319212258553\"></p>\n<h3 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP&#x2F;IP\"></a>TCP&#x2F;IP</h3><p>TCP的一些特点</p>\n<ul>\n<li>基于链接（数据之间传输需要建立连接）</li>\n<li>全双工： 双向</li>\n<li>字节流</li>\n<li>可靠</li>\n<li>拥塞控制</li>\n</ul>\n<p>可靠： TCP 三次握手四次挥手</p>\n<p>​\t\t\t\t\t\t\t\t<img src=\"https://technologybook.tech/assets/img/osi3.png\" alt=\"osi3\"></p>\n<p>通过报标示</p>\n<p>ACK：响应报文</p>\n<p>SYN： 同步序列号建立连接</p>\n<p>FIN： 结束连接的报文</p>\n<p>URG： 优先处理</p>\n<p><img src=\"https://technologybook.tech/assets/img/osi2.png\" alt=\"image-20210319213733857\"></p>\n<h2 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h2><blockquote>\n<p>对抗中间人攻击的唯一的办法</p>\n</blockquote>\n<p>https &#x3D; http + ssl&#x2F;tsl</p>\n<p>摘要算法: 能够把任意长度的数据压缩成固定长度的摘要。md5&#x2F;sha1&#x2F;sha2&#x2F;sha256</p>\n<p>对成加密算法: xor AES RC4</p>\n<p>非对称加密算法: 有两个密钥，公钥和私钥，公钥加密私钥解密。 DH&#x2F;DSA&#x2F;RSA&#x2F;ECC</p>\n<p> 数字证书: 先生成公钥和私钥，提供公钥，域名等信息给CA机构，机构审查，通过后提供包含了签名（通过摘要算法获得），CA信息，有效时间，序列号和公钥的数字证书。</p>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><ol>\n<li>TCP握手建立连接</li>\n<li>客户端的加密套件（客户端支持哪些加密算法）</li>\n<li>服务端查看支持的加密方式并传递支持的加密方式和公钥数字证书（CA&#x2F;公钥用户信息&#x2F;公钥&#x2F;权威机构签名&#x2F;有效期）</li>\n<li>客户端验证证书 （通过hash算法获得摘要， 通过公钥获得CA的摘要，比对）</li>\n<li>生成随机密钥（对成加密密钥），并将生成的密钥用公钥进行加密</li>\n<li>服务端私钥解密</li>\n<li>使用对成加密密钥加密数据</li>\n</ol>\n"},{"title":"Low Code 之 自动填写","date":"2021-01-26T16:00:00.000Z","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=962309492,3418279211&fm=26&gp=0.jpg","_content":"\n# Low Code 之 自动填写\n\n上次的blog部分完成了对Form的处理，这次记录一下，对数据获取方面设计的全过程，这次的工作也就是完成图中，对应每一个国家进行填写的这部分。\n\n![image-20210327155304930](https://technologybook.tech/assets/img/image-20210327155304930.png)\n\n我需要做的就是一个基于JSON 的可配置填写脚本们只需要通过简单的指令就能获取到页面信息并且操作页面进行处理。\n\n## 调研\n\n寻找能够控制页面访问的库，我把方向锁定在爬虫技术希望通过爬虫确定一个底层的库，然后基于底层的库进行封装。\n\n**基于python的selenium**\n\n>  本质上是一个测试框架，提供很好的的浏览器兼容性\n\n**Puppeteer**\n\n> Puppeteer is a Node library which provides a high-level API to control [headless](https://developers.google.com/web/updates/2017/04/headless-chrome) Chrome or Chromium over the [DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/). It can also be configured to use full (non-headless) Chrome or Chromium.\n\n它能够\n\n- 生成页面 PDF。\n- 抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。\n- 自动提交表单，进行 UI 测试，键盘输入等。\n- 创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。\n- 捕获网站的 [timeline trace](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference)，用来帮助分析性能问题。\n- 测试浏览器扩展。\n\n\n\n找到Pupeteer就基本上确定了，以Pupeteer为基础的自动填写脚本平台的设计。\n\n一个通用的填写平台主要有以下几个困难\n\n- 页面状态不稳定（页面可能有基于各种技术平台的，jquery到angular，以及目标构造表单方式）\n- 合理有效的错误处理机制（包括应用程序错误和业务流程错误）\n- 页面的校验机制\n- 信息源错误过期等异常的上报\n- 反反爬虫机制\n\n对与 json schema 的配置我使用的是类似distributor的方式\n\n![image-20210327175051537](https://technologybook.tech/assets/img/image-20210327175051537.png)\n\n每一个动作对应一个处理函数\n\n每个个type对应一种动作，这样配置文件就可以\n\n```json\n{\n\ttype: \"JUMP\",\n\ttarget: \"selector\"\n\toption: {\n\t\tdata: x\n\t}\n}\n```\n\n一个distributor对一个的各个部分都处理完成之后\n\n进入一个状态机器\n\n大体分三步\n\n对应的是[网页端目标的状态， 脚本状态， 服务端接口状态]\n\nstatus\n\n- SUCCESS target✅ script✅ server✅\n- INTERNALERROR script❌\n- FAILED target ❌\n- SERVERERROR ❌\n\n。。。\n\n错误处理使用EventEmit对不同的错误CODE做处理\n\n如图示\n\n![image-20210327180759086](https://technologybook.tech/assets/img/image-20210327180759086.png)\n\n错误处理机制如上图，\n\n大体上分为\n\n- retry\n- 上报错误信息\n- 慢启动重试\n- 最后进入平台处理\n\n## 页面校验部分\n\n区分用户的有效性\n\n有效性大概分为两部分\n\n信息有效性\n\n> 即当前信息是否滞后\n\n数据有效性\n\n> 记录国家的错误率，然后针对国家尽心处理\n\n原则是 **由近到远** **由高到低**即有限处理距离当前日期近的身份信息和国家成功率高的\n\n### 反反爬虫\n\n- 平台验证码识别\n\n接入平台验证码识别\n\n- ip池防止ip封锁\n\n### 插件机制\n\n代码提供一种类似webpack的插件机制，在constructor中执行，分别对IP进行相应的处理，以达到快速切换IP线程池的操作。是一种中间件机制。\n\n```typescript\nclass Distributor {\n  constructor(private plugins){\n    this.plugins = plugins\n\t\t....\n  }\n  process(){\n    const ips = startSetIp({\n      IP: this.plugins.ipTag\n    })\n    new this.plugins.Captcha()\n    ...\n  }\n  startSetIp({IP}) {\n    try {\n      const ipIns = new IP();\n      const newIP = ipIns.getNewestIpList()\n      this.establish(newIP);\n      ...\n    } catch(){}\n  }\n}\n    \n    \n    class Captcha {\n      constructor(c) {\n        this.c = c\n        ...\n      }\n        cut(){...}\n       async identify(image) {\n          const result = await this.identify(image);\n        }\n    }\n```\n\n相关的代码还有很多，这里仅梳理一下结构，如果验证有效会考虑开源\n\n***TODO***\n\n\n\n","source":"_posts/Low code之路（二）.md","raw":"\n---\ntitle: Low Code 之 自动填写\ndate: 2021/01/27\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=962309492,3418279211&fm=26&gp=0.jpg\ncategories:\n- LowCode\ntags: \n- puppeteer\n\n---\n\n# Low Code 之 自动填写\n\n上次的blog部分完成了对Form的处理，这次记录一下，对数据获取方面设计的全过程，这次的工作也就是完成图中，对应每一个国家进行填写的这部分。\n\n![image-20210327155304930](https://technologybook.tech/assets/img/image-20210327155304930.png)\n\n我需要做的就是一个基于JSON 的可配置填写脚本们只需要通过简单的指令就能获取到页面信息并且操作页面进行处理。\n\n## 调研\n\n寻找能够控制页面访问的库，我把方向锁定在爬虫技术希望通过爬虫确定一个底层的库，然后基于底层的库进行封装。\n\n**基于python的selenium**\n\n>  本质上是一个测试框架，提供很好的的浏览器兼容性\n\n**Puppeteer**\n\n> Puppeteer is a Node library which provides a high-level API to control [headless](https://developers.google.com/web/updates/2017/04/headless-chrome) Chrome or Chromium over the [DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/). It can also be configured to use full (non-headless) Chrome or Chromium.\n\n它能够\n\n- 生成页面 PDF。\n- 抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。\n- 自动提交表单，进行 UI 测试，键盘输入等。\n- 创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。\n- 捕获网站的 [timeline trace](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference)，用来帮助分析性能问题。\n- 测试浏览器扩展。\n\n\n\n找到Pupeteer就基本上确定了，以Pupeteer为基础的自动填写脚本平台的设计。\n\n一个通用的填写平台主要有以下几个困难\n\n- 页面状态不稳定（页面可能有基于各种技术平台的，jquery到angular，以及目标构造表单方式）\n- 合理有效的错误处理机制（包括应用程序错误和业务流程错误）\n- 页面的校验机制\n- 信息源错误过期等异常的上报\n- 反反爬虫机制\n\n对与 json schema 的配置我使用的是类似distributor的方式\n\n![image-20210327175051537](https://technologybook.tech/assets/img/image-20210327175051537.png)\n\n每一个动作对应一个处理函数\n\n每个个type对应一种动作，这样配置文件就可以\n\n```json\n{\n\ttype: \"JUMP\",\n\ttarget: \"selector\"\n\toption: {\n\t\tdata: x\n\t}\n}\n```\n\n一个distributor对一个的各个部分都处理完成之后\n\n进入一个状态机器\n\n大体分三步\n\n对应的是[网页端目标的状态， 脚本状态， 服务端接口状态]\n\nstatus\n\n- SUCCESS target✅ script✅ server✅\n- INTERNALERROR script❌\n- FAILED target ❌\n- SERVERERROR ❌\n\n。。。\n\n错误处理使用EventEmit对不同的错误CODE做处理\n\n如图示\n\n![image-20210327180759086](https://technologybook.tech/assets/img/image-20210327180759086.png)\n\n错误处理机制如上图，\n\n大体上分为\n\n- retry\n- 上报错误信息\n- 慢启动重试\n- 最后进入平台处理\n\n## 页面校验部分\n\n区分用户的有效性\n\n有效性大概分为两部分\n\n信息有效性\n\n> 即当前信息是否滞后\n\n数据有效性\n\n> 记录国家的错误率，然后针对国家尽心处理\n\n原则是 **由近到远** **由高到低**即有限处理距离当前日期近的身份信息和国家成功率高的\n\n### 反反爬虫\n\n- 平台验证码识别\n\n接入平台验证码识别\n\n- ip池防止ip封锁\n\n### 插件机制\n\n代码提供一种类似webpack的插件机制，在constructor中执行，分别对IP进行相应的处理，以达到快速切换IP线程池的操作。是一种中间件机制。\n\n```typescript\nclass Distributor {\n  constructor(private plugins){\n    this.plugins = plugins\n\t\t....\n  }\n  process(){\n    const ips = startSetIp({\n      IP: this.plugins.ipTag\n    })\n    new this.plugins.Captcha()\n    ...\n  }\n  startSetIp({IP}) {\n    try {\n      const ipIns = new IP();\n      const newIP = ipIns.getNewestIpList()\n      this.establish(newIP);\n      ...\n    } catch(){}\n  }\n}\n    \n    \n    class Captcha {\n      constructor(c) {\n        this.c = c\n        ...\n      }\n        cut(){...}\n       async identify(image) {\n          const result = await this.identify(image);\n        }\n    }\n```\n\n相关的代码还有很多，这里仅梳理一下结构，如果验证有效会考虑开源\n\n***TODO***\n\n\n\n","slug":"Low code之路（二）","published":1,"updated":"2024-04-10T17:46:25.875Z","_id":"cluvjqddw00230wpdb0avf1as","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Low-Code-之-自动填写\"><a href=\"#Low-Code-之-自动填写\" class=\"headerlink\" title=\"Low Code 之 自动填写\"></a>Low Code 之 自动填写</h1><p>上次的blog部分完成了对Form的处理，这次记录一下，对数据获取方面设计的全过程，这次的工作也就是完成图中，对应每一个国家进行填写的这部分。</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327155304930.png\" alt=\"image-20210327155304930\"></p>\n<p>我需要做的就是一个基于JSON 的可配置填写脚本们只需要通过简单的指令就能获取到页面信息并且操作页面进行处理。</p>\n<h2 id=\"调研\"><a href=\"#调研\" class=\"headerlink\" title=\"调研\"></a>调研</h2><p>寻找能够控制页面访问的库，我把方向锁定在爬虫技术希望通过爬虫确定一个底层的库，然后基于底层的库进行封装。</p>\n<p><strong>基于python的selenium</strong></p>\n<blockquote>\n<p> 本质上是一个测试框架，提供很好的的浏览器兼容性</p>\n</blockquote>\n<p><strong>Puppeteer</strong></p>\n<blockquote>\n<p>Puppeteer is a Node library which provides a high-level API to control <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\">headless</a> Chrome or Chromium over the <a href=\"https://chromedevtools.github.io/devtools-protocol/\">DevTools Protocol</a>. It can also be configured to use full (non-headless) Chrome or Chromium.</p>\n</blockquote>\n<p>它能够</p>\n<ul>\n<li>生成页面 PDF。</li>\n<li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li>\n<li>自动提交表单，进行 UI 测试，键盘输入等。</li>\n<li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li>\n<li>捕获网站的 <a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference\">timeline trace</a>，用来帮助分析性能问题。</li>\n<li>测试浏览器扩展。</li>\n</ul>\n<p>找到Pupeteer就基本上确定了，以Pupeteer为基础的自动填写脚本平台的设计。</p>\n<p>一个通用的填写平台主要有以下几个困难</p>\n<ul>\n<li>页面状态不稳定（页面可能有基于各种技术平台的，jquery到angular，以及目标构造表单方式）</li>\n<li>合理有效的错误处理机制（包括应用程序错误和业务流程错误）</li>\n<li>页面的校验机制</li>\n<li>信息源错误过期等异常的上报</li>\n<li>反反爬虫机制</li>\n</ul>\n<p>对与 json schema 的配置我使用的是类似distributor的方式</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327175051537.png\" alt=\"image-20210327175051537\"></p>\n<p>每一个动作对应一个处理函数</p>\n<p>每个个type对应一种动作，这样配置文件就可以</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\ttype<span class=\"punctuation\">:</span> <span class=\"string\">&quot;JUMP&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\ttarget<span class=\"punctuation\">:</span> <span class=\"string\">&quot;selector&quot;</span></span><br><span class=\"line\">\toption<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\tdata<span class=\"punctuation\">:</span> x</span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个distributor对一个的各个部分都处理完成之后</p>\n<p>进入一个状态机器</p>\n<p>大体分三步</p>\n<p>对应的是[网页端目标的状态， 脚本状态， 服务端接口状态]</p>\n<p>status</p>\n<ul>\n<li>SUCCESS target✅ script✅ server✅</li>\n<li>INTERNALERROR script❌</li>\n<li>FAILED target ❌</li>\n<li>SERVERERROR ❌</li>\n</ul>\n<p>。。。</p>\n<p>错误处理使用EventEmit对不同的错误CODE做处理</p>\n<p>如图示</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327180759086.png\" alt=\"image-20210327180759086\"></p>\n<p>错误处理机制如上图，</p>\n<p>大体上分为</p>\n<ul>\n<li>retry</li>\n<li>上报错误信息</li>\n<li>慢启动重试</li>\n<li>最后进入平台处理</li>\n</ul>\n<h2 id=\"页面校验部分\"><a href=\"#页面校验部分\" class=\"headerlink\" title=\"页面校验部分\"></a>页面校验部分</h2><p>区分用户的有效性</p>\n<p>有效性大概分为两部分</p>\n<p>信息有效性</p>\n<blockquote>\n<p>即当前信息是否滞后</p>\n</blockquote>\n<p>数据有效性</p>\n<blockquote>\n<p>记录国家的错误率，然后针对国家尽心处理</p>\n</blockquote>\n<p>原则是 <strong>由近到远</strong> <strong>由高到低</strong>即有限处理距离当前日期近的身份信息和国家成功率高的</p>\n<h3 id=\"反反爬虫\"><a href=\"#反反爬虫\" class=\"headerlink\" title=\"反反爬虫\"></a>反反爬虫</h3><ul>\n<li>平台验证码识别</li>\n</ul>\n<p>接入平台验证码识别</p>\n<ul>\n<li>ip池防止ip封锁</li>\n</ul>\n<h3 id=\"插件机制\"><a href=\"#插件机制\" class=\"headerlink\" title=\"插件机制\"></a>插件机制</h3><p>代码提供一种类似webpack的插件机制，在constructor中执行，分别对IP进行相应的处理，以达到快速切换IP线程池的操作。是一种中间件机制。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Distributor</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> plugins</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">plugins</span> = plugins</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ips = <span class=\"title function_\">startSetIp</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">IP</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">plugins</span>.<span class=\"property\">ipTag</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"variable language_\">this</span>.<span class=\"property\">plugins</span>.<span class=\"title class_\">Captcha</span>()</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">startSetIp</span>(<span class=\"params\">&#123;IP&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ipIns = <span class=\"keyword\">new</span> <span class=\"title function_\">IP</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newIP = ipIns.<span class=\"title function_\">getNewestIpList</span>()</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">establish</span>(newIP);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>()&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Captcha</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">constructor</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">c</span> = c</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">        <span class=\"title function_\">cut</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">       <span class=\"keyword\">async</span> <span class=\"title function_\">identify</span>(<span class=\"params\">image</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">identify</span>(image);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>相关的代码还有很多，这里仅梳理一下结构，如果验证有效会考虑开源</p>\n<p><em><strong>TODO</strong></em></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Low-Code-之-自动填写\"><a href=\"#Low-Code-之-自动填写\" class=\"headerlink\" title=\"Low Code 之 自动填写\"></a>Low Code 之 自动填写</h1><p>上次的blog部分完成了对Form的处理，这次记录一下，对数据获取方面设计的全过程，这次的工作也就是完成图中，对应每一个国家进行填写的这部分。</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327155304930.png\" alt=\"image-20210327155304930\"></p>\n<p>我需要做的就是一个基于JSON 的可配置填写脚本们只需要通过简单的指令就能获取到页面信息并且操作页面进行处理。</p>\n<h2 id=\"调研\"><a href=\"#调研\" class=\"headerlink\" title=\"调研\"></a>调研</h2><p>寻找能够控制页面访问的库，我把方向锁定在爬虫技术希望通过爬虫确定一个底层的库，然后基于底层的库进行封装。</p>\n<p><strong>基于python的selenium</strong></p>\n<blockquote>\n<p> 本质上是一个测试框架，提供很好的的浏览器兼容性</p>\n</blockquote>\n<p><strong>Puppeteer</strong></p>\n<blockquote>\n<p>Puppeteer is a Node library which provides a high-level API to control <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\">headless</a> Chrome or Chromium over the <a href=\"https://chromedevtools.github.io/devtools-protocol/\">DevTools Protocol</a>. It can also be configured to use full (non-headless) Chrome or Chromium.</p>\n</blockquote>\n<p>它能够</p>\n<ul>\n<li>生成页面 PDF。</li>\n<li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li>\n<li>自动提交表单，进行 UI 测试，键盘输入等。</li>\n<li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li>\n<li>捕获网站的 <a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference\">timeline trace</a>，用来帮助分析性能问题。</li>\n<li>测试浏览器扩展。</li>\n</ul>\n<p>找到Pupeteer就基本上确定了，以Pupeteer为基础的自动填写脚本平台的设计。</p>\n<p>一个通用的填写平台主要有以下几个困难</p>\n<ul>\n<li>页面状态不稳定（页面可能有基于各种技术平台的，jquery到angular，以及目标构造表单方式）</li>\n<li>合理有效的错误处理机制（包括应用程序错误和业务流程错误）</li>\n<li>页面的校验机制</li>\n<li>信息源错误过期等异常的上报</li>\n<li>反反爬虫机制</li>\n</ul>\n<p>对与 json schema 的配置我使用的是类似distributor的方式</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327175051537.png\" alt=\"image-20210327175051537\"></p>\n<p>每一个动作对应一个处理函数</p>\n<p>每个个type对应一种动作，这样配置文件就可以</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\ttype<span class=\"punctuation\">:</span> <span class=\"string\">&quot;JUMP&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\ttarget<span class=\"punctuation\">:</span> <span class=\"string\">&quot;selector&quot;</span></span><br><span class=\"line\">\toption<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\tdata<span class=\"punctuation\">:</span> x</span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个distributor对一个的各个部分都处理完成之后</p>\n<p>进入一个状态机器</p>\n<p>大体分三步</p>\n<p>对应的是[网页端目标的状态， 脚本状态， 服务端接口状态]</p>\n<p>status</p>\n<ul>\n<li>SUCCESS target✅ script✅ server✅</li>\n<li>INTERNALERROR script❌</li>\n<li>FAILED target ❌</li>\n<li>SERVERERROR ❌</li>\n</ul>\n<p>。。。</p>\n<p>错误处理使用EventEmit对不同的错误CODE做处理</p>\n<p>如图示</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327180759086.png\" alt=\"image-20210327180759086\"></p>\n<p>错误处理机制如上图，</p>\n<p>大体上分为</p>\n<ul>\n<li>retry</li>\n<li>上报错误信息</li>\n<li>慢启动重试</li>\n<li>最后进入平台处理</li>\n</ul>\n<h2 id=\"页面校验部分\"><a href=\"#页面校验部分\" class=\"headerlink\" title=\"页面校验部分\"></a>页面校验部分</h2><p>区分用户的有效性</p>\n<p>有效性大概分为两部分</p>\n<p>信息有效性</p>\n<blockquote>\n<p>即当前信息是否滞后</p>\n</blockquote>\n<p>数据有效性</p>\n<blockquote>\n<p>记录国家的错误率，然后针对国家尽心处理</p>\n</blockquote>\n<p>原则是 <strong>由近到远</strong> <strong>由高到低</strong>即有限处理距离当前日期近的身份信息和国家成功率高的</p>\n<h3 id=\"反反爬虫\"><a href=\"#反反爬虫\" class=\"headerlink\" title=\"反反爬虫\"></a>反反爬虫</h3><ul>\n<li>平台验证码识别</li>\n</ul>\n<p>接入平台验证码识别</p>\n<ul>\n<li>ip池防止ip封锁</li>\n</ul>\n<h3 id=\"插件机制\"><a href=\"#插件机制\" class=\"headerlink\" title=\"插件机制\"></a>插件机制</h3><p>代码提供一种类似webpack的插件机制，在constructor中执行，分别对IP进行相应的处理，以达到快速切换IP线程池的操作。是一种中间件机制。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Distributor</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> plugins</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">plugins</span> = plugins</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ips = <span class=\"title function_\">startSetIp</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">IP</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">plugins</span>.<span class=\"property\">ipTag</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"variable language_\">this</span>.<span class=\"property\">plugins</span>.<span class=\"title class_\">Captcha</span>()</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">startSetIp</span>(<span class=\"params\">&#123;IP&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ipIns = <span class=\"keyword\">new</span> <span class=\"title function_\">IP</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newIP = ipIns.<span class=\"title function_\">getNewestIpList</span>()</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">establish</span>(newIP);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>()&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Captcha</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">constructor</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">c</span> = c</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">        <span class=\"title function_\">cut</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">       <span class=\"keyword\">async</span> <span class=\"title function_\">identify</span>(<span class=\"params\">image</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">identify</span>(image);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>相关的代码还有很多，这里仅梳理一下结构，如果验证有效会考虑开源</p>\n<p><em><strong>TODO</strong></em></p>\n"},{"title":"Redux Middleware笔记","date":"2017-07-18T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/react.png","_content":"# Redux Middleware笔记\n\n> 最近囿于公司React，Redux项目越来越繁杂，经手的人也越来越多，就想通过redux middleware的方式对action，reducer的性能进行监控，以达到控制代码质量的目的，middleware的代码逻辑非常简单，这次希望从更深的方面去了解Redux Middleware的工作机制。\n\n#### React，Redux的工作原理\n\nRedux遵循着三大理念\n\n+ Single source of truth(单一数据源)\n+ State is readOnly（状态只读）\n+ Changes are made with pure functions（使用[纯函数](https://medium.freecodecamp.org/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468)来修改Store)\n\n\n\nRedux，React，ReduxMiddleWare三者在项目中有一个交汇点，那就是CreateStore方法中enchancer参数接受的applyMiddleware方法。\n\n```typescript\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n//。。。。\n    \n\n```\n\n以下是ApplyMiddleware的源码：\n\n```typescript\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    // 通过对middle的规约传入dispatch\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n\n\n\n```typescript\n// 这个函数非常的有意思，它的作用就是可以把func以高阶函数的形式组织起来\n// compose(funcA, funcB, funcC) => funcA(funcB(funcC))\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n\n\n进过compose的组织applyMiddleware的工作机制已经清楚了，简单来说applymiddleware方法在调用middleware时形如：\n\n```javascript\n\tmiddleware(store)(dispatch);\n```\n\n所以当我们编写middleware时只需要基于准则就可以编写一个方便易用的middleware了\n\n```\nfunc = (store) => dispatch => {\n\tdispatch(action)\n} \n\n```\n\n比如我们想要检测action的性能\n\n```\nexport const spendTimeLog = store => next => action => {\n      console.log( '%c emit ', 'background: #e9e6e7; color: #888', action );\n\t  var start = new Date().getTime();\n\t  const result = next( action );\n      var end = new Date().getTime();\n      console.log( `%c result \"${action.type}\" spend ${ end-start } milliseconds.`, 'background: #e9e6e7; color: #000' );\n      return result;\n};\n\nexport default perflogger;\n```\n\n","source":"_posts/Redux Middleware.md","raw":"---\ntitle: Redux Middleware笔记\ndate: 2017/07/19\ncover: https://technologybook.tech/assets/img/react.png\ncategories:\n- redux\ntags: \n- redux\n\n---\n# Redux Middleware笔记\n\n> 最近囿于公司React，Redux项目越来越繁杂，经手的人也越来越多，就想通过redux middleware的方式对action，reducer的性能进行监控，以达到控制代码质量的目的，middleware的代码逻辑非常简单，这次希望从更深的方面去了解Redux Middleware的工作机制。\n\n#### React，Redux的工作原理\n\nRedux遵循着三大理念\n\n+ Single source of truth(单一数据源)\n+ State is readOnly（状态只读）\n+ Changes are made with pure functions（使用[纯函数](https://medium.freecodecamp.org/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468)来修改Store)\n\n\n\nRedux，React，ReduxMiddleWare三者在项目中有一个交汇点，那就是CreateStore方法中enchancer参数接受的applyMiddleware方法。\n\n```typescript\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n//。。。。\n    \n\n```\n\n以下是ApplyMiddleware的源码：\n\n```typescript\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    // 通过对middle的规约传入dispatch\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n\n\n\n```typescript\n// 这个函数非常的有意思，它的作用就是可以把func以高阶函数的形式组织起来\n// compose(funcA, funcB, funcC) => funcA(funcB(funcC))\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n\n\n进过compose的组织applyMiddleware的工作机制已经清楚了，简单来说applymiddleware方法在调用middleware时形如：\n\n```javascript\n\tmiddleware(store)(dispatch);\n```\n\n所以当我们编写middleware时只需要基于准则就可以编写一个方便易用的middleware了\n\n```\nfunc = (store) => dispatch => {\n\tdispatch(action)\n} \n\n```\n\n比如我们想要检测action的性能\n\n```\nexport const spendTimeLog = store => next => action => {\n      console.log( '%c emit ', 'background: #e9e6e7; color: #888', action );\n\t  var start = new Date().getTime();\n\t  const result = next( action );\n      var end = new Date().getTime();\n      console.log( `%c result \"${action.type}\" spend ${ end-start } milliseconds.`, 'background: #e9e6e7; color: #000' );\n      return result;\n};\n\nexport default perflogger;\n```\n\n","slug":"Redux Middleware","published":1,"updated":"2024-04-10T17:46:25.876Z","_id":"cluvjqddw00280wpd61bigdc5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redux-Middleware笔记\"><a href=\"#Redux-Middleware笔记\" class=\"headerlink\" title=\"Redux Middleware笔记\"></a>Redux Middleware笔记</h1><blockquote>\n<p>最近囿于公司React，Redux项目越来越繁杂，经手的人也越来越多，就想通过redux middleware的方式对action，reducer的性能进行监控，以达到控制代码质量的目的，middleware的代码逻辑非常简单，这次希望从更深的方面去了解Redux Middleware的工作机制。</p>\n</blockquote>\n<h4 id=\"React，Redux的工作原理\"><a href=\"#React，Redux的工作原理\" class=\"headerlink\" title=\"React，Redux的工作原理\"></a>React，Redux的工作原理</h4><p>Redux遵循着三大理念</p>\n<ul>\n<li>Single source of truth(单一数据源)</li>\n<li>State is readOnly（状态只读）</li>\n<li>Changes are made with pure functions（使用<a href=\"https://medium.freecodecamp.org/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468\">纯函数</a>来修改Store)</li>\n</ul>\n<p>Redux，React，ReduxMiddleWare三者在项目中有一个交汇点，那就是CreateStore方法中enchancer参数接受的applyMiddleware方法。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the enhancer to be a function.&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">enhancer</span>(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//。。。。</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以下是ApplyMiddleware的源码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">createStore</span> =&gt;</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">dispatch</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      <span class=\"attr\">getState</span>: store.<span class=\"property\">getState</span>,</span><br><span class=\"line\">      <span class=\"attr\">dispatch</span>: <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过对middle的规约传入dispatch</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"title function_\">middleware</span>(middlewareAPI))</span><br><span class=\"line\">    dispatch = <span class=\"title function_\">compose</span>(...chain)(store.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个函数非常的有意思，它的作用就是可以把func以高阶函数的形式组织起来</span></span><br><span class=\"line\"><span class=\"comment\">// compose(funcA, funcB, funcC) =&gt; funcA(funcB(funcC))</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">...funcs</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"title function_\">a</span>(<span class=\"title function_\">b</span>(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>进过compose的组织applyMiddleware的工作机制已经清楚了，简单来说applymiddleware方法在调用middleware时形如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">middleware</span>(store)(dispatch);</span><br></pre></td></tr></table></figure>\n\n<p>所以当我们编写middleware时只需要基于准则就可以编写一个方便易用的middleware了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func = (store) =&gt; dispatch =&gt; &#123;</span><br><span class=\"line\">\tdispatch(action)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>比如我们想要检测action的性能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const spendTimeLog = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class=\"line\">      console.log( &#x27;%c emit &#x27;, &#x27;background: #e9e6e7; color: #888&#x27;, action );</span><br><span class=\"line\">\t  var start = new Date().getTime();</span><br><span class=\"line\">\t  const result = next( action );</span><br><span class=\"line\">      var end = new Date().getTime();</span><br><span class=\"line\">      console.log( `%c result &quot;$&#123;action.type&#125;&quot; spend $&#123; end-start &#125; milliseconds.`, &#x27;background: #e9e6e7; color: #000&#x27; );</span><br><span class=\"line\">      return result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default perflogger;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redux-Middleware笔记\"><a href=\"#Redux-Middleware笔记\" class=\"headerlink\" title=\"Redux Middleware笔记\"></a>Redux Middleware笔记</h1><blockquote>\n<p>最近囿于公司React，Redux项目越来越繁杂，经手的人也越来越多，就想通过redux middleware的方式对action，reducer的性能进行监控，以达到控制代码质量的目的，middleware的代码逻辑非常简单，这次希望从更深的方面去了解Redux Middleware的工作机制。</p>\n</blockquote>\n<h4 id=\"React，Redux的工作原理\"><a href=\"#React，Redux的工作原理\" class=\"headerlink\" title=\"React，Redux的工作原理\"></a>React，Redux的工作原理</h4><p>Redux遵循着三大理念</p>\n<ul>\n<li>Single source of truth(单一数据源)</li>\n<li>State is readOnly（状态只读）</li>\n<li>Changes are made with pure functions（使用<a href=\"https://medium.freecodecamp.org/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468\">纯函数</a>来修改Store)</li>\n</ul>\n<p>Redux，React，ReduxMiddleWare三者在项目中有一个交汇点，那就是CreateStore方法中enchancer参数接受的applyMiddleware方法。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the enhancer to be a function.&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">enhancer</span>(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//。。。。</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以下是ApplyMiddleware的源码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">createStore</span> =&gt;</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">dispatch</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      <span class=\"attr\">getState</span>: store.<span class=\"property\">getState</span>,</span><br><span class=\"line\">      <span class=\"attr\">dispatch</span>: <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"title function_\">dispatch</span>(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过对middle的规约传入dispatch</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"title function_\">middleware</span>(middlewareAPI))</span><br><span class=\"line\">    dispatch = <span class=\"title function_\">compose</span>(...chain)(store.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个函数非常的有意思，它的作用就是可以把func以高阶函数的形式组织起来</span></span><br><span class=\"line\"><span class=\"comment\">// compose(funcA, funcB, funcC) =&gt; funcA(funcB(funcC))</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">...funcs</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> <span class=\"title function_\">a</span>(<span class=\"title function_\">b</span>(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>进过compose的组织applyMiddleware的工作机制已经清楚了，简单来说applymiddleware方法在调用middleware时形如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">middleware</span>(store)(dispatch);</span><br></pre></td></tr></table></figure>\n\n<p>所以当我们编写middleware时只需要基于准则就可以编写一个方便易用的middleware了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func = (store) =&gt; dispatch =&gt; &#123;</span><br><span class=\"line\">\tdispatch(action)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>比如我们想要检测action的性能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const spendTimeLog = store =&gt; next =&gt; action =&gt; &#123;</span><br><span class=\"line\">      console.log( &#x27;%c emit &#x27;, &#x27;background: #e9e6e7; color: #888&#x27;, action );</span><br><span class=\"line\">\t  var start = new Date().getTime();</span><br><span class=\"line\">\t  const result = next( action );</span><br><span class=\"line\">      var end = new Date().getTime();</span><br><span class=\"line\">      console.log( `%c result &quot;$&#123;action.type&#125;&quot; spend $&#123; end-start &#125; milliseconds.`, &#x27;background: #e9e6e7; color: #000&#x27; );</span><br><span class=\"line\">      return result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default perflogger;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Low Code 之路（一）","date":"2020-12-14T16:00:00.000Z","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=962309492,3418279211&fm=26&gp=0.jpg","_content":"# Low Code 之路（一）\n\n## 背景\n\n20年要做一些新的事情，终于可以脱离繁复的业务逻辑，主导一些更加有趣的事情。\n\n先来聊下我之前负责的业务流程是什么样的，即传统的业务是如何进行的。\n\n![image-20210327155304930](https://technologybook.tech/assets/img/image-20210327155304930.png)\n\n当然这一套系统还包含其他的一些细节包括错误通知，处理流程等复杂的内容，但其核心就如图示\n\n这种方案的问题\n\n- 每个国家对应一套form再对应一套代码，维护成本高\n- 服务端返回也是一一对应\n- 同一，因为使领馆常有变化，维护成本更高，几乎不可复用。\n- 代码独立性太高，故障率高\n\n所以今年我主要投入到对这个流程的优化的工作中来， 主要的工作围绕着 建立一个通用表单， 建立一个通用填写脚本两个方面来进行，目标即使，就需要相应的配置文件，任何人都可以基于配置文件进行配置，简单的修改配置文件就能生成新的表单，和规定相应的爬取流程来对内容进行获取和填充。\n\n![image-20210327160340220](https://technologybook.tech/assets/img/image-20210327160340220.png)\n\n\n\n### 调研阶段\n\n#### 市面上的竞品\n\n***Formily***\n\n> Formily 解决方案的本质是构造了一个 Observable Form Graph，在这个 Form Graph 中，我们抽象了整个表单领域模型，同时这个模型又是一个无限循环状态机。\n\n读了下代码主要是基于RX的Observeable Form Graph状态机，基本是通过component type找到render的内容，然后通过一个基于Rx 的 所谓Form graph来维护全局的状态，读JSON 来render Form视图然后通过key来建立field relation，然后维护全局状态，主要的工作在对Form 数据结构及数据更新算法和一些性能优势，搞出一套updater tree 和 path match性能不错，而且是经过大量用户验证的，包括阿里内部验证的可靠的库。\n\n***Amis***\n\n> amis 是一个低代码前端框架，它使用 JSON 配置来生成页面，可以减少页面开发工作量，极大提升效率。\n\n初始化接口，数据链的设计，更偏向业务一些，包括表达式，联动， renderer都让人感到这是一个很reactive的库，简单易用，源代码没有看，想想大概差不多。\n\n> 渲染过程就是根据节点 path 信息，跟组件池中的组件 `test` (检测) 信息做匹配，如果命中，则把当前节点转给对应组件渲染，节点中其他属性将作为目标组件的 props。需要注意的是，如果是容器组件，比如以上例子中的 `page` 组件，从 props 中拿到的 `body` 是一个子节点，由于节点类型是不固定，由使用者决定，所以不能直接完成渲染，所以交给属性中下发的 `render` 方法去完成渲染，`{render('body', body)}`，他的工作就是拿子节点的 path 信息去组件池里面找到对应的渲染器，然后交给对应组件去完成渲染\n\n***FormRender***\n\n> 通过 JSON Schema 生成标准 Form，常用于自定义搭建配置界面生成\n\n它提供一个 表单设计器，和基于JSON的formcreate，文档写的不是很好。。，代码里也是用global context维护状态，通过eval实现表达式，比较灵活，支持几种标准类型，通过schema type类型来确定渲染内容这个我不是很中意，也支持自定义type component，但是目前看bug比较多，更新策略也是全量更新，没有优化，性能差一些。\n\n还有一些诸如formcreator等等库，方案都大同小异，同一上的调研确定了几点\n\n- 基于JSON Schema 的配置文件。\n- 提供 接口接入标准\n- 接口字段到schema的映射语法\n- 支持template\n- 更新粒度以path为依准\n\n![image-20210327163922088](https://technologybook.tech/assets/img/image-20210327163922088.png)\n\n\n\n\n\n一下是部分实现\n\nstore 是基于 Rx 的数据控制中心\n\n通过只有有效更新才能设置form\n\n```typescript\nexport default class Manage<T extends HashObj> implements IManage<T> {\n    public $form: Subject<T> = new Subject<T>();\n    private _storeForm: T;\n    public formData: T;\n    private static instance: Manage<any>;\n    private readonly isFreeze: boolean = false;\n    private haveSetDefault = false;\n    public validations: Map<string, IValidation> = new Map<string, IValidation>();\n    private engine = new TemplateEngine();\n\n    get storeForm() {\n        return this._storeForm;\n    }\n\n    set storeForm(data) {\n        if (!this.isFreeze) {\n            this._storeForm = { ...data };\n        }\n    }\n\n    get data() {\n        return this.formData;\n    }\n\t\t.....\n```\n\n\n\n更新粒度为path\n\n```typescript\n    public notifyByPath = (path: string, changed: HashObj, other?: HashObj): void => {\n        console.log('I\\'m in ', path, this.formData, this.validations);\n        const originPath = other!.path;\n        const validation = this.validations.get(originPath);\n        const newData = produce(this.formData, draft => {\n            set(draft, path, changed);\n            if (validation && !isEmptyArray(validation.rules)) {\n                const errors = validation.rules.map((validatorName: string) => {\n                    let defaultValidatorFunc = Validators?.[validatorName];\n                    let validatorFunc = this.actions?.[validatorName];\n                    if (typeof validatorFunc === 'function') {\n                        return validatorFunc(changed);\n                    }\n                    if (typeof defaultValidatorFunc === 'function') {\n                        return defaultValidatorFunc?.(changed);\n                    }\n\n                    throw new Error('invalid validation in' + originPath);\n                }).filter(r => r !== ValidationResult.PASS);\n                const currentComp = draft.components.find(comp => comp.path === originPath)?.validation;\n                if (currentComp) {\n                    currentComp.errors = errors;\n                    set(draft, originPath + 'components', currentComp);\n                }\n            }\n        });\n\n        this.notify(newData);\n    };\n```\n\n\n\n整体的状态维护也是基于Context。\n\n这样一个基础的状态管里就完成了，\n\n接下来需要根据type渲染\n\n```typescript\npublic buildDataTree(dataStruct: HashObj, components: TAllComponents[]): TAllComponents[] | void {\n        if (!Array.isArray(components)) {\n            throw new TypeError('ComponentTree->buildDataTree: Wrong Type .Params Must Be Array');\n        }\n        const newComponents: TAllComponents[] = [];\n        for (let i = 0, len = components.length; i < len; i++) {\n            const componentItem = components[i];\n            if (isUndefined(componentItem)) {\n                throw new Error(`buildDataTree: Component Invalid`);\n            }\n\n            const { path, type } = componentItem || {};\n            const currentVal = get(dataStruct, path);\n\n            if (isUndefined(currentVal)) {\n                throw new Error(\n                    `buildDataTree: current: wrong path ${path}, components should have corresponding component`,\n                );\n            }\n\n            if (!isObject(currentVal) || type === FormItemType.CUSTOM) {\n                const produceItem = produce(componentItem, draft => {\n                    set(draft, 'value', currentVal);\n                    this.buildComponentTree(draft);\n                });\n                newComponents.push(produceItem);\n            }\n        }\n        return newComponents;\n    }\n\n    public buildComponentTree(component: TAllComponents, componentConfig?: TComponentConfig) {\n        const { type, typeName } = component;\n        let componentType: FormItemType | string = type;\n        if (type === FormItemType.CUSTOM) {\n            if (!typeName) {\n                console.error('custom must have typeName');\n            }\n            componentType = typeName;\n        }\n        set(component, '$$component', this.components[componentType]);\n    }\n\n    public buildTree(schema: ISchema, componentLib: HashType<ReactElement>): TAllComponents[] | void {\n        this.setComponents(componentLib);\n        const { data, components } = schema;\n        if (!data || !components) {\n            throw new TypeError('ComponentTree::buildTree: Data Or Component Is Invalid');\n        }\n        return this.buildDataTree(data, components);\n    }\n```\n\n\n\n然后是validator\n\nvalidator本意是要用户自己去确定哪些东西需要被校验，所以并没有写很多的校验方法，仅提供一个基础的校验。\n\n设想是需要将其抽象为一个库，专门维护， compoennt也是一样。\n\n```typescript\nimport { ValidationResult } from '../../constant';\nimport { isNullOrUndefined, isEmpty } from '../../utils';\n\n\nexport class Validators {\n    public static required = (data: unknown): [ValidationResult.FAIL, string] | ValidationResult.PASS => {\n        if (isNullOrUndefined(data) || isEmpty(data)) {\n            return [ValidationResult.FAIL, '不能为空！'];\n        }\n        return ValidationResult.PASS;\n    };\n}\n```\n\n支持模版字符\n\n```typescript\nimport { HashObj, TTemplateResult } from '../../types/project';\nimport { get, isFunction, isString, isTotalWord, isUndefined } from \"../../utils\";\nimport { safeEval } from './safe-eval';\n\ninterface ITemplateEngine<T extends HashObj> {\n    execute(tpl: string, data: T, current: any): TTemplateResult|TTemplateResult[];\n}\n// optimization\ninterface IExpression<T> {\n    analyse(tpl: string, data: T, current: any): TTemplateResult;\n}\n\nabstract class TemplateExpression<T extends HashObj = HashObj> implements IExpression<T> {\n    static getSymbol(tpl: string) {\n        let [anchor, variable] = TemplateEngine.symbolReg.exec(tpl) || [];\n        if (!(anchor && variable)) {\n            console.error('Input Is Invalid: ' + tpl);\n            throw new Error('Input Is Invalid: ' + tpl);\n        }\n        return [anchor, variable];\n    }\n\n    abstract analyse(tpl: string, data: T, current: any): TTemplateResult;\n}\n\nclass PureExpression extends TemplateExpression {\n    analyse(tpl: string): string {\n        return tpl;\n    }\n}\n\nclass VariableExpression extends TemplateExpression {\n    analyse(tpl: string, data: HashObj, current: any): TTemplateResult {\n        let [, code] = TemplateExpression.getSymbol(tpl);\n        const action = get(data, ['actions', code]);\n        const property = get(data, code);\n        return isFunction(action) ? action(current, data) : property;\n    }\n}\n\nclass CalculateExpression extends TemplateExpression {\n    analyse(tpl: string, data: HashObj): TTemplateResult {\n        let [, code] = TemplateExpression.getSymbol(tpl);\n        code = code.replace(TemplateEngine.varReg, (current: string) => {\n            let result = get(data, current);\n            if (['true', 'false'].includes(current)) {\n                return `!!${current}`;\n            }\n            if (typeof result === 'string') {\n                return `\"${result}\"`;\n            }\n            return result;\n        });\n        return safeEval(code) || '';\n    }\n}\n\nexport default class TemplateEngine<T extends HashObj = HashObj> implements ITemplateEngine<T> {\n    public static readonly symbolReg: RegExp = /^{{(.+)?}}$/i;\n    public static readonly varReg: RegExp = /[A-Za-z.]+(?![\"'a-z])/g;\n\n    static isTpl(tpl: string): boolean {\n        return TemplateEngine.symbolReg.test(tpl);\n    }\n\n    getExpressionHandler(tpl: string, data?: T): TemplateExpression {\n        if (!TemplateEngine.isTpl(tpl)) {\n            return new PureExpression();\n        }\n\n        const [, code] = TemplateExpression.getSymbol(tpl);\n\n        if (isTotalWord(code) && !isUndefined(data)) {\n            return new VariableExpression();\n        }\n        return new CalculateExpression();\n    }\n\n\n\n    public execute(tpl: string|string[], data: T, current?: any): TTemplateResult|TTemplateResult[] {\n        if (isString(tpl)) {\n            const handler = this.getExpressionHandler(tpl as string, data);\n            return handler.analyse(tpl, data, current);\n        }\n        return tpl.map(item => {\n            const handler = this.getExpressionHandler(item, data);\n            return handler.analyse(item, data, current);\n        })\n\n    }\n}\n```\n\n\n\n支持一下几种case\n\n```typescript\ndescribe('template-engine', () => {\n  it('should execute code', function() {\n    const tpl = '{{a}}';\n    const mockData = { a: 100 };\n    const tplEngine = new TemplateEngine();\n    const result = tplEngine.execute(tpl, mockData);\n    expect(result).toEqual(100);\n  });\n\n  it('safe eval work', () => {\n    const tpl = '1+1';\n    const result = safeEval(tpl);\n    expect(result).toEqual(2);\n  });\n\n  it(\"safe eval is safe\", function() {\n    const tpl = \"1\";\n    const result = safeEval(tpl);\n    expect(result).toBe(1);\n    const tpl1 = \"onchange\";\n    const result1 = safeEval(tpl1);\n    expect(result1).toBe(undefined)\n  });\n\n  it(\"safe eval throw error\", function() {\n    const tpl = \"asd///\"\n    expect(() => safeEval(tpl)).toThrow();\n  });\n\n  it(\"safe eval without window\", () => {\n    const spy = jest.spyOn(utils, 'isUndefined');\n    spy.mockReturnValue(true);\n    const tpl = \"1\";\n    expect(() => safeEval(tpl)).toThrow();\n    spy.mockRestore();\n  })\n\n  it('execute expression should work', function() {\n    const tpl = '{{1 + 1}}';\n    const tplEngine = new TemplateEngine();\n    const result = tplEngine.execute(tpl, {});\n    expect(result).toEqual(2);\n  });\n\n  it('execute expression with variable should work', function() {\n    const tpl = '{{a + 1}}';\n    const tplEngine = new TemplateEngine();\n    const result = tplEngine.execute(tpl, { a: 100 });\n    expect(result).toEqual(101);\n  });\n\n  it('execute expression with two variable should work', function() {\n    const tpl = '{{a + b}}';\n    const tplEngine = new TemplateEngine();\n    const result = tplEngine.execute(tpl, { a: 100, b: 200 });\n    expect(result).toEqual(300);\n  });\n\n  it('ternary operator should work', () => {\n    const tpl = '{{a > 100 ? 1 : 2}}';\n    const mockData = { a: 100 };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData);\n    expect(result).toEqual(2);\n    mockData.a = 101;\n    result = tplEngine.execute(tpl, mockData);\n    expect(result).toEqual(1);\n  });\n\n  it('call function should work', () => {\n    const tpl = '{{d}}';\n    const mockData = { a: { b: { c: 12 } }, actions: {d: (current: any) => current.b.c} };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData, { b: { c: 12 } });\n    expect(result).toEqual(12);\n  });\n\n  it('call lang api should work', () => {\n    const tpl = '{{[a]}}';\n    const mockData = {\n    a: 1\n  };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData, { b: { c: 12 } });\n    expect(result).toEqual([1]);\n  });\n\n  it('expression list will works', () => {\n    const tpl = [\"{{a}}\"];\n    const mockData = {\n      a: 1\n    };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData, { b: { c: 12 } });\n    expect(result).toEqual([1])\n  });\n\n  it('compare should work', () => {\n    const tpl = '{{a === \"a\"}}';\n    const mockData = {\n      a: 'a'\n    };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData, { b: { c: 12 } });\n    expect(result).toEqual(true);\n  });\n\n  it('compare should work', () => {\n    const tpl = '{{a.b === \"a\"}}';\n    const mockData = {\n      a: {\n        b: \"a\"\n      }\n    };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData);\n    expect(result).toEqual(true);\n  });\n});\n```\n\n\n\n最后暴露给开发者一些hooks\n\n用来应对不同的场景\n\n```typescript\nimport { useContext, useEffect, useMemo, useRef } from 'react';\nimport { IContextParams, SingleContext } from '../core';\nimport { HashObj, IValidation } from '../types/project';\n\nexport function useFormChange<T extends HashObj>(path?: string): [T, (data: T) => void] {\n    const formContext = SingleContext.getContext<T>();\n    const { state, managerIns } = useContext<IContextParams<T>>(formContext);\n    return [state, (changed: HashObj, currentPath?: string) => managerIns.notifyByPath(path || currentPath || '', changed)];\n}\n\nexport function useManage<T extends HashObj>() {\n    const formContext = SingleContext.getContext<T>();\n    const { managerIns } = useContext<IContextParams<T>>(formContext);\n    return managerIns;\n}\n\nexport function useValidation<T extends HashObj>(path: string, validation?: IValidation) {\n    if (!validation) return;\n    const formContext = SingleContext.getContext<T>();\n    const { managerIns } = useContext<IContextParams<T>>(formContext);\n    useMemo(() => {\n        managerIns.registryValidation(path, validation);\n    }, []);\n}\n\nexport function usePrevious<T>(value: T): T|undefined {\n    const ref = useRef<T>();\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); // Only re-run if value changes\n    return ref.current;\n}\n```\n\n总结\n\n一个基于JSON Schema 的buildform就完成了，通过全量的接收数据统一了对接口的interface，每次请求通过参数读取config渲染表单，再通过表单渲染实现面向配置渲染页面，稳步线中～😄\n\n","source":"_posts/low code心路（一）.md","raw":"---\ntitle: Low Code 之路（一）\ndate: 2020/12/15\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=962309492,3418279211&fm=26&gp=0.jpg\ncategories:\n- LowCode\ntags: \n- form\n\n---\n# Low Code 之路（一）\n\n## 背景\n\n20年要做一些新的事情，终于可以脱离繁复的业务逻辑，主导一些更加有趣的事情。\n\n先来聊下我之前负责的业务流程是什么样的，即传统的业务是如何进行的。\n\n![image-20210327155304930](https://technologybook.tech/assets/img/image-20210327155304930.png)\n\n当然这一套系统还包含其他的一些细节包括错误通知，处理流程等复杂的内容，但其核心就如图示\n\n这种方案的问题\n\n- 每个国家对应一套form再对应一套代码，维护成本高\n- 服务端返回也是一一对应\n- 同一，因为使领馆常有变化，维护成本更高，几乎不可复用。\n- 代码独立性太高，故障率高\n\n所以今年我主要投入到对这个流程的优化的工作中来， 主要的工作围绕着 建立一个通用表单， 建立一个通用填写脚本两个方面来进行，目标即使，就需要相应的配置文件，任何人都可以基于配置文件进行配置，简单的修改配置文件就能生成新的表单，和规定相应的爬取流程来对内容进行获取和填充。\n\n![image-20210327160340220](https://technologybook.tech/assets/img/image-20210327160340220.png)\n\n\n\n### 调研阶段\n\n#### 市面上的竞品\n\n***Formily***\n\n> Formily 解决方案的本质是构造了一个 Observable Form Graph，在这个 Form Graph 中，我们抽象了整个表单领域模型，同时这个模型又是一个无限循环状态机。\n\n读了下代码主要是基于RX的Observeable Form Graph状态机，基本是通过component type找到render的内容，然后通过一个基于Rx 的 所谓Form graph来维护全局的状态，读JSON 来render Form视图然后通过key来建立field relation，然后维护全局状态，主要的工作在对Form 数据结构及数据更新算法和一些性能优势，搞出一套updater tree 和 path match性能不错，而且是经过大量用户验证的，包括阿里内部验证的可靠的库。\n\n***Amis***\n\n> amis 是一个低代码前端框架，它使用 JSON 配置来生成页面，可以减少页面开发工作量，极大提升效率。\n\n初始化接口，数据链的设计，更偏向业务一些，包括表达式，联动， renderer都让人感到这是一个很reactive的库，简单易用，源代码没有看，想想大概差不多。\n\n> 渲染过程就是根据节点 path 信息，跟组件池中的组件 `test` (检测) 信息做匹配，如果命中，则把当前节点转给对应组件渲染，节点中其他属性将作为目标组件的 props。需要注意的是，如果是容器组件，比如以上例子中的 `page` 组件，从 props 中拿到的 `body` 是一个子节点，由于节点类型是不固定，由使用者决定，所以不能直接完成渲染，所以交给属性中下发的 `render` 方法去完成渲染，`{render('body', body)}`，他的工作就是拿子节点的 path 信息去组件池里面找到对应的渲染器，然后交给对应组件去完成渲染\n\n***FormRender***\n\n> 通过 JSON Schema 生成标准 Form，常用于自定义搭建配置界面生成\n\n它提供一个 表单设计器，和基于JSON的formcreate，文档写的不是很好。。，代码里也是用global context维护状态，通过eval实现表达式，比较灵活，支持几种标准类型，通过schema type类型来确定渲染内容这个我不是很中意，也支持自定义type component，但是目前看bug比较多，更新策略也是全量更新，没有优化，性能差一些。\n\n还有一些诸如formcreator等等库，方案都大同小异，同一上的调研确定了几点\n\n- 基于JSON Schema 的配置文件。\n- 提供 接口接入标准\n- 接口字段到schema的映射语法\n- 支持template\n- 更新粒度以path为依准\n\n![image-20210327163922088](https://technologybook.tech/assets/img/image-20210327163922088.png)\n\n\n\n\n\n一下是部分实现\n\nstore 是基于 Rx 的数据控制中心\n\n通过只有有效更新才能设置form\n\n```typescript\nexport default class Manage<T extends HashObj> implements IManage<T> {\n    public $form: Subject<T> = new Subject<T>();\n    private _storeForm: T;\n    public formData: T;\n    private static instance: Manage<any>;\n    private readonly isFreeze: boolean = false;\n    private haveSetDefault = false;\n    public validations: Map<string, IValidation> = new Map<string, IValidation>();\n    private engine = new TemplateEngine();\n\n    get storeForm() {\n        return this._storeForm;\n    }\n\n    set storeForm(data) {\n        if (!this.isFreeze) {\n            this._storeForm = { ...data };\n        }\n    }\n\n    get data() {\n        return this.formData;\n    }\n\t\t.....\n```\n\n\n\n更新粒度为path\n\n```typescript\n    public notifyByPath = (path: string, changed: HashObj, other?: HashObj): void => {\n        console.log('I\\'m in ', path, this.formData, this.validations);\n        const originPath = other!.path;\n        const validation = this.validations.get(originPath);\n        const newData = produce(this.formData, draft => {\n            set(draft, path, changed);\n            if (validation && !isEmptyArray(validation.rules)) {\n                const errors = validation.rules.map((validatorName: string) => {\n                    let defaultValidatorFunc = Validators?.[validatorName];\n                    let validatorFunc = this.actions?.[validatorName];\n                    if (typeof validatorFunc === 'function') {\n                        return validatorFunc(changed);\n                    }\n                    if (typeof defaultValidatorFunc === 'function') {\n                        return defaultValidatorFunc?.(changed);\n                    }\n\n                    throw new Error('invalid validation in' + originPath);\n                }).filter(r => r !== ValidationResult.PASS);\n                const currentComp = draft.components.find(comp => comp.path === originPath)?.validation;\n                if (currentComp) {\n                    currentComp.errors = errors;\n                    set(draft, originPath + 'components', currentComp);\n                }\n            }\n        });\n\n        this.notify(newData);\n    };\n```\n\n\n\n整体的状态维护也是基于Context。\n\n这样一个基础的状态管里就完成了，\n\n接下来需要根据type渲染\n\n```typescript\npublic buildDataTree(dataStruct: HashObj, components: TAllComponents[]): TAllComponents[] | void {\n        if (!Array.isArray(components)) {\n            throw new TypeError('ComponentTree->buildDataTree: Wrong Type .Params Must Be Array');\n        }\n        const newComponents: TAllComponents[] = [];\n        for (let i = 0, len = components.length; i < len; i++) {\n            const componentItem = components[i];\n            if (isUndefined(componentItem)) {\n                throw new Error(`buildDataTree: Component Invalid`);\n            }\n\n            const { path, type } = componentItem || {};\n            const currentVal = get(dataStruct, path);\n\n            if (isUndefined(currentVal)) {\n                throw new Error(\n                    `buildDataTree: current: wrong path ${path}, components should have corresponding component`,\n                );\n            }\n\n            if (!isObject(currentVal) || type === FormItemType.CUSTOM) {\n                const produceItem = produce(componentItem, draft => {\n                    set(draft, 'value', currentVal);\n                    this.buildComponentTree(draft);\n                });\n                newComponents.push(produceItem);\n            }\n        }\n        return newComponents;\n    }\n\n    public buildComponentTree(component: TAllComponents, componentConfig?: TComponentConfig) {\n        const { type, typeName } = component;\n        let componentType: FormItemType | string = type;\n        if (type === FormItemType.CUSTOM) {\n            if (!typeName) {\n                console.error('custom must have typeName');\n            }\n            componentType = typeName;\n        }\n        set(component, '$$component', this.components[componentType]);\n    }\n\n    public buildTree(schema: ISchema, componentLib: HashType<ReactElement>): TAllComponents[] | void {\n        this.setComponents(componentLib);\n        const { data, components } = schema;\n        if (!data || !components) {\n            throw new TypeError('ComponentTree::buildTree: Data Or Component Is Invalid');\n        }\n        return this.buildDataTree(data, components);\n    }\n```\n\n\n\n然后是validator\n\nvalidator本意是要用户自己去确定哪些东西需要被校验，所以并没有写很多的校验方法，仅提供一个基础的校验。\n\n设想是需要将其抽象为一个库，专门维护， compoennt也是一样。\n\n```typescript\nimport { ValidationResult } from '../../constant';\nimport { isNullOrUndefined, isEmpty } from '../../utils';\n\n\nexport class Validators {\n    public static required = (data: unknown): [ValidationResult.FAIL, string] | ValidationResult.PASS => {\n        if (isNullOrUndefined(data) || isEmpty(data)) {\n            return [ValidationResult.FAIL, '不能为空！'];\n        }\n        return ValidationResult.PASS;\n    };\n}\n```\n\n支持模版字符\n\n```typescript\nimport { HashObj, TTemplateResult } from '../../types/project';\nimport { get, isFunction, isString, isTotalWord, isUndefined } from \"../../utils\";\nimport { safeEval } from './safe-eval';\n\ninterface ITemplateEngine<T extends HashObj> {\n    execute(tpl: string, data: T, current: any): TTemplateResult|TTemplateResult[];\n}\n// optimization\ninterface IExpression<T> {\n    analyse(tpl: string, data: T, current: any): TTemplateResult;\n}\n\nabstract class TemplateExpression<T extends HashObj = HashObj> implements IExpression<T> {\n    static getSymbol(tpl: string) {\n        let [anchor, variable] = TemplateEngine.symbolReg.exec(tpl) || [];\n        if (!(anchor && variable)) {\n            console.error('Input Is Invalid: ' + tpl);\n            throw new Error('Input Is Invalid: ' + tpl);\n        }\n        return [anchor, variable];\n    }\n\n    abstract analyse(tpl: string, data: T, current: any): TTemplateResult;\n}\n\nclass PureExpression extends TemplateExpression {\n    analyse(tpl: string): string {\n        return tpl;\n    }\n}\n\nclass VariableExpression extends TemplateExpression {\n    analyse(tpl: string, data: HashObj, current: any): TTemplateResult {\n        let [, code] = TemplateExpression.getSymbol(tpl);\n        const action = get(data, ['actions', code]);\n        const property = get(data, code);\n        return isFunction(action) ? action(current, data) : property;\n    }\n}\n\nclass CalculateExpression extends TemplateExpression {\n    analyse(tpl: string, data: HashObj): TTemplateResult {\n        let [, code] = TemplateExpression.getSymbol(tpl);\n        code = code.replace(TemplateEngine.varReg, (current: string) => {\n            let result = get(data, current);\n            if (['true', 'false'].includes(current)) {\n                return `!!${current}`;\n            }\n            if (typeof result === 'string') {\n                return `\"${result}\"`;\n            }\n            return result;\n        });\n        return safeEval(code) || '';\n    }\n}\n\nexport default class TemplateEngine<T extends HashObj = HashObj> implements ITemplateEngine<T> {\n    public static readonly symbolReg: RegExp = /^{{(.+)?}}$/i;\n    public static readonly varReg: RegExp = /[A-Za-z.]+(?![\"'a-z])/g;\n\n    static isTpl(tpl: string): boolean {\n        return TemplateEngine.symbolReg.test(tpl);\n    }\n\n    getExpressionHandler(tpl: string, data?: T): TemplateExpression {\n        if (!TemplateEngine.isTpl(tpl)) {\n            return new PureExpression();\n        }\n\n        const [, code] = TemplateExpression.getSymbol(tpl);\n\n        if (isTotalWord(code) && !isUndefined(data)) {\n            return new VariableExpression();\n        }\n        return new CalculateExpression();\n    }\n\n\n\n    public execute(tpl: string|string[], data: T, current?: any): TTemplateResult|TTemplateResult[] {\n        if (isString(tpl)) {\n            const handler = this.getExpressionHandler(tpl as string, data);\n            return handler.analyse(tpl, data, current);\n        }\n        return tpl.map(item => {\n            const handler = this.getExpressionHandler(item, data);\n            return handler.analyse(item, data, current);\n        })\n\n    }\n}\n```\n\n\n\n支持一下几种case\n\n```typescript\ndescribe('template-engine', () => {\n  it('should execute code', function() {\n    const tpl = '{{a}}';\n    const mockData = { a: 100 };\n    const tplEngine = new TemplateEngine();\n    const result = tplEngine.execute(tpl, mockData);\n    expect(result).toEqual(100);\n  });\n\n  it('safe eval work', () => {\n    const tpl = '1+1';\n    const result = safeEval(tpl);\n    expect(result).toEqual(2);\n  });\n\n  it(\"safe eval is safe\", function() {\n    const tpl = \"1\";\n    const result = safeEval(tpl);\n    expect(result).toBe(1);\n    const tpl1 = \"onchange\";\n    const result1 = safeEval(tpl1);\n    expect(result1).toBe(undefined)\n  });\n\n  it(\"safe eval throw error\", function() {\n    const tpl = \"asd///\"\n    expect(() => safeEval(tpl)).toThrow();\n  });\n\n  it(\"safe eval without window\", () => {\n    const spy = jest.spyOn(utils, 'isUndefined');\n    spy.mockReturnValue(true);\n    const tpl = \"1\";\n    expect(() => safeEval(tpl)).toThrow();\n    spy.mockRestore();\n  })\n\n  it('execute expression should work', function() {\n    const tpl = '{{1 + 1}}';\n    const tplEngine = new TemplateEngine();\n    const result = tplEngine.execute(tpl, {});\n    expect(result).toEqual(2);\n  });\n\n  it('execute expression with variable should work', function() {\n    const tpl = '{{a + 1}}';\n    const tplEngine = new TemplateEngine();\n    const result = tplEngine.execute(tpl, { a: 100 });\n    expect(result).toEqual(101);\n  });\n\n  it('execute expression with two variable should work', function() {\n    const tpl = '{{a + b}}';\n    const tplEngine = new TemplateEngine();\n    const result = tplEngine.execute(tpl, { a: 100, b: 200 });\n    expect(result).toEqual(300);\n  });\n\n  it('ternary operator should work', () => {\n    const tpl = '{{a > 100 ? 1 : 2}}';\n    const mockData = { a: 100 };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData);\n    expect(result).toEqual(2);\n    mockData.a = 101;\n    result = tplEngine.execute(tpl, mockData);\n    expect(result).toEqual(1);\n  });\n\n  it('call function should work', () => {\n    const tpl = '{{d}}';\n    const mockData = { a: { b: { c: 12 } }, actions: {d: (current: any) => current.b.c} };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData, { b: { c: 12 } });\n    expect(result).toEqual(12);\n  });\n\n  it('call lang api should work', () => {\n    const tpl = '{{[a]}}';\n    const mockData = {\n    a: 1\n  };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData, { b: { c: 12 } });\n    expect(result).toEqual([1]);\n  });\n\n  it('expression list will works', () => {\n    const tpl = [\"{{a}}\"];\n    const mockData = {\n      a: 1\n    };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData, { b: { c: 12 } });\n    expect(result).toEqual([1])\n  });\n\n  it('compare should work', () => {\n    const tpl = '{{a === \"a\"}}';\n    const mockData = {\n      a: 'a'\n    };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData, { b: { c: 12 } });\n    expect(result).toEqual(true);\n  });\n\n  it('compare should work', () => {\n    const tpl = '{{a.b === \"a\"}}';\n    const mockData = {\n      a: {\n        b: \"a\"\n      }\n    };\n    const tplEngine = new TemplateEngine();\n    let result = tplEngine.execute(tpl, mockData);\n    expect(result).toEqual(true);\n  });\n});\n```\n\n\n\n最后暴露给开发者一些hooks\n\n用来应对不同的场景\n\n```typescript\nimport { useContext, useEffect, useMemo, useRef } from 'react';\nimport { IContextParams, SingleContext } from '../core';\nimport { HashObj, IValidation } from '../types/project';\n\nexport function useFormChange<T extends HashObj>(path?: string): [T, (data: T) => void] {\n    const formContext = SingleContext.getContext<T>();\n    const { state, managerIns } = useContext<IContextParams<T>>(formContext);\n    return [state, (changed: HashObj, currentPath?: string) => managerIns.notifyByPath(path || currentPath || '', changed)];\n}\n\nexport function useManage<T extends HashObj>() {\n    const formContext = SingleContext.getContext<T>();\n    const { managerIns } = useContext<IContextParams<T>>(formContext);\n    return managerIns;\n}\n\nexport function useValidation<T extends HashObj>(path: string, validation?: IValidation) {\n    if (!validation) return;\n    const formContext = SingleContext.getContext<T>();\n    const { managerIns } = useContext<IContextParams<T>>(formContext);\n    useMemo(() => {\n        managerIns.registryValidation(path, validation);\n    }, []);\n}\n\nexport function usePrevious<T>(value: T): T|undefined {\n    const ref = useRef<T>();\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); // Only re-run if value changes\n    return ref.current;\n}\n```\n\n总结\n\n一个基于JSON Schema 的buildform就完成了，通过全量的接收数据统一了对接口的interface，每次请求通过参数读取config渲染表单，再通过表单渲染实现面向配置渲染页面，稳步线中～😄\n\n","slug":"low code心路（一）","published":1,"updated":"2024-04-10T17:46:25.878Z","_id":"cluvjqddx002b0wpdampx89t5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Low-Code-之路（一）\"><a href=\"#Low-Code-之路（一）\" class=\"headerlink\" title=\"Low Code 之路（一）\"></a>Low Code 之路（一）</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>20年要做一些新的事情，终于可以脱离繁复的业务逻辑，主导一些更加有趣的事情。</p>\n<p>先来聊下我之前负责的业务流程是什么样的，即传统的业务是如何进行的。</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327155304930.png\" alt=\"image-20210327155304930\"></p>\n<p>当然这一套系统还包含其他的一些细节包括错误通知，处理流程等复杂的内容，但其核心就如图示</p>\n<p>这种方案的问题</p>\n<ul>\n<li>每个国家对应一套form再对应一套代码，维护成本高</li>\n<li>服务端返回也是一一对应</li>\n<li>同一，因为使领馆常有变化，维护成本更高，几乎不可复用。</li>\n<li>代码独立性太高，故障率高</li>\n</ul>\n<p>所以今年我主要投入到对这个流程的优化的工作中来， 主要的工作围绕着 建立一个通用表单， 建立一个通用填写脚本两个方面来进行，目标即使，就需要相应的配置文件，任何人都可以基于配置文件进行配置，简单的修改配置文件就能生成新的表单，和规定相应的爬取流程来对内容进行获取和填充。</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327160340220.png\" alt=\"image-20210327160340220\"></p>\n<h3 id=\"调研阶段\"><a href=\"#调研阶段\" class=\"headerlink\" title=\"调研阶段\"></a>调研阶段</h3><h4 id=\"市面上的竞品\"><a href=\"#市面上的竞品\" class=\"headerlink\" title=\"市面上的竞品\"></a>市面上的竞品</h4><p><em><strong>Formily</strong></em></p>\n<blockquote>\n<p>Formily 解决方案的本质是构造了一个 Observable Form Graph，在这个 Form Graph 中，我们抽象了整个表单领域模型，同时这个模型又是一个无限循环状态机。</p>\n</blockquote>\n<p>读了下代码主要是基于RX的Observeable Form Graph状态机，基本是通过component type找到render的内容，然后通过一个基于Rx 的 所谓Form graph来维护全局的状态，读JSON 来render Form视图然后通过key来建立field relation，然后维护全局状态，主要的工作在对Form 数据结构及数据更新算法和一些性能优势，搞出一套updater tree 和 path match性能不错，而且是经过大量用户验证的，包括阿里内部验证的可靠的库。</p>\n<p><em><strong>Amis</strong></em></p>\n<blockquote>\n<p>amis 是一个低代码前端框架，它使用 JSON 配置来生成页面，可以减少页面开发工作量，极大提升效率。</p>\n</blockquote>\n<p>初始化接口，数据链的设计，更偏向业务一些，包括表达式，联动， renderer都让人感到这是一个很reactive的库，简单易用，源代码没有看，想想大概差不多。</p>\n<blockquote>\n<p>渲染过程就是根据节点 path 信息，跟组件池中的组件 <code>test</code> (检测) 信息做匹配，如果命中，则把当前节点转给对应组件渲染，节点中其他属性将作为目标组件的 props。需要注意的是，如果是容器组件，比如以上例子中的 <code>page</code> 组件，从 props 中拿到的 <code>body</code> 是一个子节点，由于节点类型是不固定，由使用者决定，所以不能直接完成渲染，所以交给属性中下发的 <code>render</code> 方法去完成渲染，<code>&#123;render(&#39;body&#39;, body)&#125;</code>，他的工作就是拿子节点的 path 信息去组件池里面找到对应的渲染器，然后交给对应组件去完成渲染</p>\n</blockquote>\n<p><em><strong>FormRender</strong></em></p>\n<blockquote>\n<p>通过 JSON Schema 生成标准 Form，常用于自定义搭建配置界面生成</p>\n</blockquote>\n<p>它提供一个 表单设计器，和基于JSON的formcreate，文档写的不是很好。。，代码里也是用global context维护状态，通过eval实现表达式，比较灵活，支持几种标准类型，通过schema type类型来确定渲染内容这个我不是很中意，也支持自定义type component，但是目前看bug比较多，更新策略也是全量更新，没有优化，性能差一些。</p>\n<p>还有一些诸如formcreator等等库，方案都大同小异，同一上的调研确定了几点</p>\n<ul>\n<li>基于JSON Schema 的配置文件。</li>\n<li>提供 接口接入标准</li>\n<li>接口字段到schema的映射语法</li>\n<li>支持template</li>\n<li>更新粒度以path为依准</li>\n</ul>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327163922088.png\" alt=\"image-20210327163922088\"></p>\n<p>一下是部分实现</p>\n<p>store 是基于 Rx 的数据控制中心</p>\n<p>通过只有有效更新才能设置form</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Manage</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">IManage</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">$form</span>: <span class=\"title class_\">Subject</span>&lt;T&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">_storeForm</span>: T;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">formData</span>: T;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"attr\">instance</span>: <span class=\"title class_\">Manage</span>&lt;<span class=\"built_in\">any</span>&gt;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">isFreeze</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> haveSetDefault = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">validations</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">IValidation</span>&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">IValidation</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> engine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">storeForm</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_storeForm</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">storeForm</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isFreeze</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">_storeForm</span> = &#123; ...data &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">data</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">formData</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t.....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>更新粒度为path</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> notifyByPath = (<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">changed</span>: <span class=\"title class_\">HashObj</span>, other?: <span class=\"title class_\">HashObj</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I\\&#x27;m in &#x27;</span>, path, <span class=\"variable language_\">this</span>.<span class=\"property\">formData</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">validations</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> originPath = other!.<span class=\"property\">path</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> validation = <span class=\"variable language_\">this</span>.<span class=\"property\">validations</span>.<span class=\"title function_\">get</span>(originPath);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newData = <span class=\"title function_\">produce</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">formData</span>, <span class=\"function\"><span class=\"params\">draft</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">set</span>(draft, path, changed);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (validation &amp;&amp; !<span class=\"title function_\">isEmptyArray</span>(validation.<span class=\"property\">rules</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> errors = validation.<span class=\"property\">rules</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">validatorName: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> defaultValidatorFunc = <span class=\"title class_\">Validators</span>?.[validatorName];</span><br><span class=\"line\">                <span class=\"keyword\">let</span> validatorFunc = <span class=\"variable language_\">this</span>.<span class=\"property\">actions</span>?.[validatorName];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> validatorFunc === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">validatorFunc</span>(changed);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> defaultValidatorFunc === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> defaultValidatorFunc?.(changed);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;invalid validation in&#x27;</span> + originPath);</span><br><span class=\"line\">            &#125;).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r !== <span class=\"title class_\">ValidationResult</span>.<span class=\"property\">PASS</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> currentComp = draft.<span class=\"property\">components</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">comp</span> =&gt;</span> comp.<span class=\"property\">path</span> === originPath)?.<span class=\"property\">validation</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentComp) &#123;</span><br><span class=\"line\">                currentComp.<span class=\"property\">errors</span> = errors;</span><br><span class=\"line\">                <span class=\"title function_\">set</span>(draft, originPath + <span class=\"string\">&#x27;components&#x27;</span>, currentComp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">notify</span>(newData);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>整体的状态维护也是基于Context。</p>\n<p>这样一个基础的状态管里就完成了，</p>\n<p>接下来需要根据type渲染</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">buildDataTree</span>(<span class=\"attr\">dataStruct</span>: <span class=\"title class_\">HashObj</span>, <span class=\"attr\">components</span>: <span class=\"title class_\">TAllComponents</span>[]): <span class=\"title class_\">TAllComponents</span>[] | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(components)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;ComponentTree-&gt;buildDataTree: Wrong Type .Params Must Be Array&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">newComponents</span>: <span class=\"title class_\">TAllComponents</span>[] = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = components.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> componentItem = components[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndefined</span>(componentItem)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`buildDataTree: Component Invalid`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; path, <span class=\"keyword\">type</span> &#125; = componentItem || &#123;&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> currentVal = <span class=\"title function_\">get</span>(dataStruct, path);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndefined</span>(currentVal)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">                    <span class=\"string\">`buildDataTree: current: wrong path <span class=\"subst\">$&#123;path&#125;</span>, components should have corresponding component`</span>,</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObject</span>(currentVal) || <span class=\"keyword\">type</span> === <span class=\"title class_\">FormItemType</span>.<span class=\"property\">CUSTOM</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> produceItem = <span class=\"title function_\">produce</span>(componentItem, <span class=\"function\"><span class=\"params\">draft</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">set</span>(draft, <span class=\"string\">&#x27;value&#x27;</span>, currentVal);</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildComponentTree</span>(draft);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                newComponents.<span class=\"title function_\">push</span>(produceItem);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newComponents;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">buildComponentTree</span>(<span class=\"params\">component: TAllComponents, componentConfig?: TComponentConfig</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, typeName &#125; = component;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">componentType</span>: <span class=\"title class_\">FormItemType</span> | <span class=\"built_in\">string</span> = <span class=\"keyword\">type</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"title class_\">FormItemType</span>.<span class=\"property\">CUSTOM</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!typeName) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;custom must have typeName&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            componentType = typeName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">set</span>(component, <span class=\"string\">&#x27;$$component&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">components</span>[componentType]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">buildTree</span>(<span class=\"attr\">schema</span>: <span class=\"title class_\">ISchema</span>, <span class=\"attr\">componentLib</span>: <span class=\"title class_\">HashType</span>&lt;<span class=\"title class_\">ReactElement</span>&gt;): <span class=\"title class_\">TAllComponents</span>[] | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setComponents</span>(componentLib);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data, components &#125; = schema;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data || !components) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;ComponentTree::buildTree: Data Or Component Is Invalid&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildDataTree</span>(data, components);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后是validator</p>\n<p>validator本意是要用户自己去确定哪些东西需要被校验，所以并没有写很多的校验方法，仅提供一个基础的校验。</p>\n<p>设想是需要将其抽象为一个库，专门维护， compoennt也是一样。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ValidationResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../constant&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isNullOrUndefined, isEmpty &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../utils&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Validators</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> required = (<span class=\"attr\">data</span>: <span class=\"built_in\">unknown</span>): [<span class=\"title class_\">ValidationResult</span>.<span class=\"property\">FAIL</span>, <span class=\"built_in\">string</span>] | <span class=\"title class_\">ValidationResult</span>.<span class=\"property\">PASS</span> =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isNullOrUndefined</span>(data) || <span class=\"title function_\">isEmpty</span>(data)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"title class_\">ValidationResult</span>.<span class=\"property\">FAIL</span>, <span class=\"string\">&#x27;不能为空！&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">ValidationResult</span>.<span class=\"property\">PASS</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>支持模版字符</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HashObj</span>, <span class=\"title class_\">TTemplateResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../types/project&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; get, isFunction, isString, isTotalWord, isUndefined &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; safeEval &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./safe-eval&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ITemplateEngine</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">execute</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: T, <span class=\"attr\">current</span>: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span>|<span class=\"title class_\">TTemplateResult</span>[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// optimization</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IExpression</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: T, <span class=\"attr\">current</span>: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TemplateExpression</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span> = <span class=\"title class_\">HashObj</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">IExpression</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">getSymbol</span>(<span class=\"params\">tpl: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [anchor, variable] = <span class=\"title class_\">TemplateEngine</span>.<span class=\"property\">symbolReg</span>.<span class=\"title function_\">exec</span>(tpl) || [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(anchor &amp;&amp; variable)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Input Is Invalid: &#x27;</span> + tpl);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Input Is Invalid: &#x27;</span> + tpl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [anchor, variable];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: T, <span class=\"attr\">current</span>: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PureExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">TemplateExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tpl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VariableExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">TemplateExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: <span class=\"title class_\">HashObj</span>, <span class=\"attr\">current</span>: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [, code] = <span class=\"title class_\">TemplateExpression</span>.<span class=\"title function_\">getSymbol</span>(tpl);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> action = <span class=\"title function_\">get</span>(data, [<span class=\"string\">&#x27;actions&#x27;</span>, code]);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> property = <span class=\"title function_\">get</span>(data, code);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">isFunction</span>(action) ? <span class=\"title function_\">action</span>(current, data) : property;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CalculateExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">TemplateExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: <span class=\"title class_\">HashObj</span>): <span class=\"title class_\">TTemplateResult</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [, code] = <span class=\"title class_\">TemplateExpression</span>.<span class=\"title function_\">getSymbol</span>(tpl);</span><br><span class=\"line\">        code = code.<span class=\"title function_\">replace</span>(<span class=\"title class_\">TemplateEngine</span>.<span class=\"property\">varReg</span>, <span class=\"function\">(<span class=\"params\">current: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> result = <span class=\"title function_\">get</span>(data, current);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"string\">&#x27;true&#x27;</span>, <span class=\"string\">&#x27;false&#x27;</span>].<span class=\"title function_\">includes</span>(current)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">`!!<span class=\"subst\">$&#123;current&#125;</span>`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">`&quot;<span class=\"subst\">$&#123;result&#125;</span>&quot;`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">safeEval</span>(code) || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TemplateEngine</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span> = <span class=\"title class_\">HashObj</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">ITemplateEngine</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">symbolReg</span>: <span class=\"title class_\">RegExp</span> = <span class=\"regexp\">/^&#123;&#123;(.+)?&#125;&#125;$/i</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">varReg</span>: <span class=\"title class_\">RegExp</span> = <span class=\"regexp\">/[A-Za-z.]+(?![&quot;&#x27;a-z])/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">isTpl</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">TemplateEngine</span>.<span class=\"property\">symbolReg</span>.<span class=\"title function_\">test</span>(tpl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">getExpressionHandler</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, data?: T): <span class=\"title class_\">TemplateExpression</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title class_\">TemplateEngine</span>.<span class=\"title function_\">isTpl</span>(tpl)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PureExpression</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> [, code] = <span class=\"title class_\">TemplateExpression</span>.<span class=\"title function_\">getSymbol</span>(tpl);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isTotalWord</span>(code) &amp;&amp; !<span class=\"title function_\">isUndefined</span>(data)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VariableExpression</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CalculateExpression</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">execute</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>|<span class=\"built_in\">string</span>[], <span class=\"attr\">data</span>: T, current?: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span>|<span class=\"title class_\">TTemplateResult</span>[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isString</span>(tpl)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> handler = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getExpressionHandler</span>(tpl <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>, data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> handler.<span class=\"title function_\">analyse</span>(tpl, data, current);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tpl.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> handler = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getExpressionHandler</span>(item, data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> handler.<span class=\"title function_\">analyse</span>(item, data, current);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>支持一下几种case</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;template-engine&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should execute code&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;safe eval work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;1+1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title function_\">safeEval</span>(tpl);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;safe eval is safe&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title function_\">safeEval</span>(tpl);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl1 = <span class=\"string\">&quot;onchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result1 = <span class=\"title function_\">safeEval</span>(tpl1);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result1).<span class=\"title function_\">toBe</span>(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;safe eval throw error&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&quot;asd///&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">safeEval</span>(tpl)).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;safe eval without window&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spy = jest.<span class=\"title function_\">spyOn</span>(utils, <span class=\"string\">&#x27;isUndefined&#x27;</span>);</span><br><span class=\"line\">    spy.<span class=\"title function_\">mockReturnValue</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">safeEval</span>(tpl)).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">    spy.<span class=\"title function_\">mockRestore</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;execute expression should work&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;1 + 1&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, &#123;&#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;execute expression with variable should work&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a + 1&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, &#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span> &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">101</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;execute expression with two variable should work&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a + b&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, &#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span>, <span class=\"attr\">b</span>: <span class=\"number\">200</span> &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">300</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;ternary operator should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a &gt; 100 ? 1 : 2&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    mockData.<span class=\"property\">a</span> = <span class=\"number\">101</span>;</span><br><span class=\"line\">    result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;call function should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;d&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;, <span class=\"attr\">actions</span>: &#123;<span class=\"attr\">d</span>: <span class=\"function\">(<span class=\"params\">current: <span class=\"built_in\">any</span></span>) =&gt;</span> current.<span class=\"property\">b</span>.<span class=\"property\">c</span>&#125; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData, &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;call lang api should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;[a]&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData, &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>([<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;expression list will works&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = [<span class=\"string\">&quot;&#123;&#123;a&#125;&#125;&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData, &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>([<span class=\"number\">1</span>])</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;compare should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a === &quot;a&quot;&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData, &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;compare should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a.b === &quot;a&quot;&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">b</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>最后暴露给开发者一些hooks</p>\n<p>用来应对不同的场景</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useContext, useEffect, useMemo, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IContextParams</span>, <span class=\"title class_\">SingleContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HashObj</span>, <span class=\"title class_\">IValidation</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/project&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useFormChange&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt;(path?: <span class=\"built_in\">string</span>): [T, <span class=\"function\">(<span class=\"params\">data: T</span>) =&gt;</span> <span class=\"built_in\">void</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = <span class=\"title class_\">SingleContext</span>.<span class=\"property\">getContext</span>&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; state, managerIns &#125; = useContext&lt;<span class=\"title class_\">IContextParams</span>&lt;T&gt;&gt;(formContext);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [state, <span class=\"function\">(<span class=\"params\">changed: HashObj, currentPath?: <span class=\"built_in\">string</span></span>) =&gt;</span> managerIns.<span class=\"title function_\">notifyByPath</span>(path || currentPath || <span class=\"string\">&#x27;&#x27;</span>, changed)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useManage&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt;() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = <span class=\"title class_\">SingleContext</span>.<span class=\"property\">getContext</span>&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; managerIns &#125; = useContext&lt;<span class=\"title class_\">IContextParams</span>&lt;T&gt;&gt;(formContext);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> managerIns;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useValidation&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt;(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, validation?: <span class=\"title class_\">IValidation</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validation) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = <span class=\"title class_\">SingleContext</span>.<span class=\"property\">getContext</span>&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; managerIns &#125; = useContext&lt;<span class=\"title class_\">IContextParams</span>&lt;T&gt;&gt;(formContext);</span><br><span class=\"line\">    <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        managerIns.<span class=\"title function_\">registryValidation</span>(path, validation);</span><br><span class=\"line\">    &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> usePrevious&lt;T&gt;(<span class=\"attr\">value</span>: T): T|<span class=\"literal\">undefined</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = useRef&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        ref.<span class=\"property\">current</span> = value;</span><br><span class=\"line\">    &#125;, [value]); <span class=\"comment\">// Only re-run if value changes</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ref.<span class=\"property\">current</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结</p>\n<p>一个基于JSON Schema 的buildform就完成了，通过全量的接收数据统一了对接口的interface，每次请求通过参数读取config渲染表单，再通过表单渲染实现面向配置渲染页面，稳步线中～😄</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Low-Code-之路（一）\"><a href=\"#Low-Code-之路（一）\" class=\"headerlink\" title=\"Low Code 之路（一）\"></a>Low Code 之路（一）</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>20年要做一些新的事情，终于可以脱离繁复的业务逻辑，主导一些更加有趣的事情。</p>\n<p>先来聊下我之前负责的业务流程是什么样的，即传统的业务是如何进行的。</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327155304930.png\" alt=\"image-20210327155304930\"></p>\n<p>当然这一套系统还包含其他的一些细节包括错误通知，处理流程等复杂的内容，但其核心就如图示</p>\n<p>这种方案的问题</p>\n<ul>\n<li>每个国家对应一套form再对应一套代码，维护成本高</li>\n<li>服务端返回也是一一对应</li>\n<li>同一，因为使领馆常有变化，维护成本更高，几乎不可复用。</li>\n<li>代码独立性太高，故障率高</li>\n</ul>\n<p>所以今年我主要投入到对这个流程的优化的工作中来， 主要的工作围绕着 建立一个通用表单， 建立一个通用填写脚本两个方面来进行，目标即使，就需要相应的配置文件，任何人都可以基于配置文件进行配置，简单的修改配置文件就能生成新的表单，和规定相应的爬取流程来对内容进行获取和填充。</p>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327160340220.png\" alt=\"image-20210327160340220\"></p>\n<h3 id=\"调研阶段\"><a href=\"#调研阶段\" class=\"headerlink\" title=\"调研阶段\"></a>调研阶段</h3><h4 id=\"市面上的竞品\"><a href=\"#市面上的竞品\" class=\"headerlink\" title=\"市面上的竞品\"></a>市面上的竞品</h4><p><em><strong>Formily</strong></em></p>\n<blockquote>\n<p>Formily 解决方案的本质是构造了一个 Observable Form Graph，在这个 Form Graph 中，我们抽象了整个表单领域模型，同时这个模型又是一个无限循环状态机。</p>\n</blockquote>\n<p>读了下代码主要是基于RX的Observeable Form Graph状态机，基本是通过component type找到render的内容，然后通过一个基于Rx 的 所谓Form graph来维护全局的状态，读JSON 来render Form视图然后通过key来建立field relation，然后维护全局状态，主要的工作在对Form 数据结构及数据更新算法和一些性能优势，搞出一套updater tree 和 path match性能不错，而且是经过大量用户验证的，包括阿里内部验证的可靠的库。</p>\n<p><em><strong>Amis</strong></em></p>\n<blockquote>\n<p>amis 是一个低代码前端框架，它使用 JSON 配置来生成页面，可以减少页面开发工作量，极大提升效率。</p>\n</blockquote>\n<p>初始化接口，数据链的设计，更偏向业务一些，包括表达式，联动， renderer都让人感到这是一个很reactive的库，简单易用，源代码没有看，想想大概差不多。</p>\n<blockquote>\n<p>渲染过程就是根据节点 path 信息，跟组件池中的组件 <code>test</code> (检测) 信息做匹配，如果命中，则把当前节点转给对应组件渲染，节点中其他属性将作为目标组件的 props。需要注意的是，如果是容器组件，比如以上例子中的 <code>page</code> 组件，从 props 中拿到的 <code>body</code> 是一个子节点，由于节点类型是不固定，由使用者决定，所以不能直接完成渲染，所以交给属性中下发的 <code>render</code> 方法去完成渲染，<code>&#123;render(&#39;body&#39;, body)&#125;</code>，他的工作就是拿子节点的 path 信息去组件池里面找到对应的渲染器，然后交给对应组件去完成渲染</p>\n</blockquote>\n<p><em><strong>FormRender</strong></em></p>\n<blockquote>\n<p>通过 JSON Schema 生成标准 Form，常用于自定义搭建配置界面生成</p>\n</blockquote>\n<p>它提供一个 表单设计器，和基于JSON的formcreate，文档写的不是很好。。，代码里也是用global context维护状态，通过eval实现表达式，比较灵活，支持几种标准类型，通过schema type类型来确定渲染内容这个我不是很中意，也支持自定义type component，但是目前看bug比较多，更新策略也是全量更新，没有优化，性能差一些。</p>\n<p>还有一些诸如formcreator等等库，方案都大同小异，同一上的调研确定了几点</p>\n<ul>\n<li>基于JSON Schema 的配置文件。</li>\n<li>提供 接口接入标准</li>\n<li>接口字段到schema的映射语法</li>\n<li>支持template</li>\n<li>更新粒度以path为依准</li>\n</ul>\n<p><img src=\"https://technologybook.tech/assets/img/image-20210327163922088.png\" alt=\"image-20210327163922088\"></p>\n<p>一下是部分实现</p>\n<p>store 是基于 Rx 的数据控制中心</p>\n<p>通过只有有效更新才能设置form</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Manage</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">IManage</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">$form</span>: <span class=\"title class_\">Subject</span>&lt;T&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">_storeForm</span>: T;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">formData</span>: T;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"attr\">instance</span>: <span class=\"title class_\">Manage</span>&lt;<span class=\"built_in\">any</span>&gt;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">isFreeze</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> haveSetDefault = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">validations</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">IValidation</span>&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">IValidation</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> engine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">storeForm</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_storeForm</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">storeForm</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isFreeze</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">_storeForm</span> = &#123; ...data &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">data</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">formData</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t.....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>更新粒度为path</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> notifyByPath = (<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">changed</span>: <span class=\"title class_\">HashObj</span>, other?: <span class=\"title class_\">HashObj</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I\\&#x27;m in &#x27;</span>, path, <span class=\"variable language_\">this</span>.<span class=\"property\">formData</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">validations</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> originPath = other!.<span class=\"property\">path</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> validation = <span class=\"variable language_\">this</span>.<span class=\"property\">validations</span>.<span class=\"title function_\">get</span>(originPath);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newData = <span class=\"title function_\">produce</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">formData</span>, <span class=\"function\"><span class=\"params\">draft</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">set</span>(draft, path, changed);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (validation &amp;&amp; !<span class=\"title function_\">isEmptyArray</span>(validation.<span class=\"property\">rules</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> errors = validation.<span class=\"property\">rules</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">validatorName: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> defaultValidatorFunc = <span class=\"title class_\">Validators</span>?.[validatorName];</span><br><span class=\"line\">                <span class=\"keyword\">let</span> validatorFunc = <span class=\"variable language_\">this</span>.<span class=\"property\">actions</span>?.[validatorName];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> validatorFunc === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">validatorFunc</span>(changed);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> defaultValidatorFunc === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> defaultValidatorFunc?.(changed);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;invalid validation in&#x27;</span> + originPath);</span><br><span class=\"line\">            &#125;).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r !== <span class=\"title class_\">ValidationResult</span>.<span class=\"property\">PASS</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> currentComp = draft.<span class=\"property\">components</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">comp</span> =&gt;</span> comp.<span class=\"property\">path</span> === originPath)?.<span class=\"property\">validation</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentComp) &#123;</span><br><span class=\"line\">                currentComp.<span class=\"property\">errors</span> = errors;</span><br><span class=\"line\">                <span class=\"title function_\">set</span>(draft, originPath + <span class=\"string\">&#x27;components&#x27;</span>, currentComp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">notify</span>(newData);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>整体的状态维护也是基于Context。</p>\n<p>这样一个基础的状态管里就完成了，</p>\n<p>接下来需要根据type渲染</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">buildDataTree</span>(<span class=\"attr\">dataStruct</span>: <span class=\"title class_\">HashObj</span>, <span class=\"attr\">components</span>: <span class=\"title class_\">TAllComponents</span>[]): <span class=\"title class_\">TAllComponents</span>[] | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(components)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;ComponentTree-&gt;buildDataTree: Wrong Type .Params Must Be Array&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">newComponents</span>: <span class=\"title class_\">TAllComponents</span>[] = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = components.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> componentItem = components[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndefined</span>(componentItem)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`buildDataTree: Component Invalid`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; path, <span class=\"keyword\">type</span> &#125; = componentItem || &#123;&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> currentVal = <span class=\"title function_\">get</span>(dataStruct, path);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndefined</span>(currentVal)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">                    <span class=\"string\">`buildDataTree: current: wrong path <span class=\"subst\">$&#123;path&#125;</span>, components should have corresponding component`</span>,</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObject</span>(currentVal) || <span class=\"keyword\">type</span> === <span class=\"title class_\">FormItemType</span>.<span class=\"property\">CUSTOM</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> produceItem = <span class=\"title function_\">produce</span>(componentItem, <span class=\"function\"><span class=\"params\">draft</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">set</span>(draft, <span class=\"string\">&#x27;value&#x27;</span>, currentVal);</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildComponentTree</span>(draft);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                newComponents.<span class=\"title function_\">push</span>(produceItem);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newComponents;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">buildComponentTree</span>(<span class=\"params\">component: TAllComponents, componentConfig?: TComponentConfig</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, typeName &#125; = component;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">componentType</span>: <span class=\"title class_\">FormItemType</span> | <span class=\"built_in\">string</span> = <span class=\"keyword\">type</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"title class_\">FormItemType</span>.<span class=\"property\">CUSTOM</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!typeName) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;custom must have typeName&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            componentType = typeName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">set</span>(component, <span class=\"string\">&#x27;$$component&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">components</span>[componentType]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">buildTree</span>(<span class=\"attr\">schema</span>: <span class=\"title class_\">ISchema</span>, <span class=\"attr\">componentLib</span>: <span class=\"title class_\">HashType</span>&lt;<span class=\"title class_\">ReactElement</span>&gt;): <span class=\"title class_\">TAllComponents</span>[] | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setComponents</span>(componentLib);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data, components &#125; = schema;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data || !components) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;ComponentTree::buildTree: Data Or Component Is Invalid&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildDataTree</span>(data, components);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后是validator</p>\n<p>validator本意是要用户自己去确定哪些东西需要被校验，所以并没有写很多的校验方法，仅提供一个基础的校验。</p>\n<p>设想是需要将其抽象为一个库，专门维护， compoennt也是一样。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ValidationResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../constant&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isNullOrUndefined, isEmpty &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../utils&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Validators</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> required = (<span class=\"attr\">data</span>: <span class=\"built_in\">unknown</span>): [<span class=\"title class_\">ValidationResult</span>.<span class=\"property\">FAIL</span>, <span class=\"built_in\">string</span>] | <span class=\"title class_\">ValidationResult</span>.<span class=\"property\">PASS</span> =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isNullOrUndefined</span>(data) || <span class=\"title function_\">isEmpty</span>(data)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"title class_\">ValidationResult</span>.<span class=\"property\">FAIL</span>, <span class=\"string\">&#x27;不能为空！&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">ValidationResult</span>.<span class=\"property\">PASS</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>支持模版字符</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HashObj</span>, <span class=\"title class_\">TTemplateResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../types/project&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; get, isFunction, isString, isTotalWord, isUndefined &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; safeEval &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./safe-eval&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ITemplateEngine</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">execute</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: T, <span class=\"attr\">current</span>: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span>|<span class=\"title class_\">TTemplateResult</span>[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// optimization</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IExpression</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: T, <span class=\"attr\">current</span>: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TemplateExpression</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span> = <span class=\"title class_\">HashObj</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">IExpression</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">getSymbol</span>(<span class=\"params\">tpl: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [anchor, variable] = <span class=\"title class_\">TemplateEngine</span>.<span class=\"property\">symbolReg</span>.<span class=\"title function_\">exec</span>(tpl) || [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(anchor &amp;&amp; variable)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Input Is Invalid: &#x27;</span> + tpl);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Input Is Invalid: &#x27;</span> + tpl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [anchor, variable];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: T, <span class=\"attr\">current</span>: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PureExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">TemplateExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tpl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VariableExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">TemplateExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: <span class=\"title class_\">HashObj</span>, <span class=\"attr\">current</span>: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [, code] = <span class=\"title class_\">TemplateExpression</span>.<span class=\"title function_\">getSymbol</span>(tpl);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> action = <span class=\"title function_\">get</span>(data, [<span class=\"string\">&#x27;actions&#x27;</span>, code]);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> property = <span class=\"title function_\">get</span>(data, code);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">isFunction</span>(action) ? <span class=\"title function_\">action</span>(current, data) : property;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CalculateExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">TemplateExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">analyse</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: <span class=\"title class_\">HashObj</span>): <span class=\"title class_\">TTemplateResult</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [, code] = <span class=\"title class_\">TemplateExpression</span>.<span class=\"title function_\">getSymbol</span>(tpl);</span><br><span class=\"line\">        code = code.<span class=\"title function_\">replace</span>(<span class=\"title class_\">TemplateEngine</span>.<span class=\"property\">varReg</span>, <span class=\"function\">(<span class=\"params\">current: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> result = <span class=\"title function_\">get</span>(data, current);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"string\">&#x27;true&#x27;</span>, <span class=\"string\">&#x27;false&#x27;</span>].<span class=\"title function_\">includes</span>(current)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">`!!<span class=\"subst\">$&#123;current&#125;</span>`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">`&quot;<span class=\"subst\">$&#123;result&#125;</span>&quot;`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">safeEval</span>(code) || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TemplateEngine</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span> = <span class=\"title class_\">HashObj</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">ITemplateEngine</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">symbolReg</span>: <span class=\"title class_\">RegExp</span> = <span class=\"regexp\">/^&#123;&#123;(.+)?&#125;&#125;$/i</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">varReg</span>: <span class=\"title class_\">RegExp</span> = <span class=\"regexp\">/[A-Za-z.]+(?![&quot;&#x27;a-z])/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">isTpl</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">TemplateEngine</span>.<span class=\"property\">symbolReg</span>.<span class=\"title function_\">test</span>(tpl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">getExpressionHandler</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>, data?: T): <span class=\"title class_\">TemplateExpression</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title class_\">TemplateEngine</span>.<span class=\"title function_\">isTpl</span>(tpl)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PureExpression</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> [, code] = <span class=\"title class_\">TemplateExpression</span>.<span class=\"title function_\">getSymbol</span>(tpl);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isTotalWord</span>(code) &amp;&amp; !<span class=\"title function_\">isUndefined</span>(data)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VariableExpression</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CalculateExpression</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">execute</span>(<span class=\"attr\">tpl</span>: <span class=\"built_in\">string</span>|<span class=\"built_in\">string</span>[], <span class=\"attr\">data</span>: T, current?: <span class=\"built_in\">any</span>): <span class=\"title class_\">TTemplateResult</span>|<span class=\"title class_\">TTemplateResult</span>[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isString</span>(tpl)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> handler = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getExpressionHandler</span>(tpl <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>, data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> handler.<span class=\"title function_\">analyse</span>(tpl, data, current);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tpl.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> handler = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getExpressionHandler</span>(item, data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> handler.<span class=\"title function_\">analyse</span>(item, data, current);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>支持一下几种case</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;template-engine&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should execute code&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;safe eval work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;1+1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title function_\">safeEval</span>(tpl);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;safe eval is safe&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title function_\">safeEval</span>(tpl);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl1 = <span class=\"string\">&quot;onchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result1 = <span class=\"title function_\">safeEval</span>(tpl1);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result1).<span class=\"title function_\">toBe</span>(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;safe eval throw error&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&quot;asd///&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">safeEval</span>(tpl)).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;safe eval without window&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spy = jest.<span class=\"title function_\">spyOn</span>(utils, <span class=\"string\">&#x27;isUndefined&#x27;</span>);</span><br><span class=\"line\">    spy.<span class=\"title function_\">mockReturnValue</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">safeEval</span>(tpl)).<span class=\"title function_\">toThrow</span>();</span><br><span class=\"line\">    spy.<span class=\"title function_\">mockRestore</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;execute expression should work&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;1 + 1&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, &#123;&#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;execute expression with variable should work&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a + 1&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, &#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span> &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">101</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;execute expression with two variable should work&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a + b&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, &#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span>, <span class=\"attr\">b</span>: <span class=\"number\">200</span> &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">300</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;ternary operator should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a &gt; 100 ? 1 : 2&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    mockData.<span class=\"property\">a</span> = <span class=\"number\">101</span>;</span><br><span class=\"line\">    result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;call function should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;d&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;, <span class=\"attr\">actions</span>: &#123;<span class=\"attr\">d</span>: <span class=\"function\">(<span class=\"params\">current: <span class=\"built_in\">any</span></span>) =&gt;</span> current.<span class=\"property\">b</span>.<span class=\"property\">c</span>&#125; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData, &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;call lang api should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;[a]&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData, &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>([<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;expression list will works&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = [<span class=\"string\">&quot;&#123;&#123;a&#125;&#125;&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData, &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>([<span class=\"number\">1</span>])</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;compare should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a === &quot;a&quot;&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData, &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">12</span> &#125; &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;compare should work&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tpl = <span class=\"string\">&#x27;&#123;&#123;a.b === &quot;a&quot;&#125;&#125;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">b</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tplEngine = <span class=\"keyword\">new</span> <span class=\"title class_\">TemplateEngine</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = tplEngine.<span class=\"title function_\">execute</span>(tpl, mockData);</span><br><span class=\"line\">    <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>最后暴露给开发者一些hooks</p>\n<p>用来应对不同的场景</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useContext, useEffect, useMemo, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IContextParams</span>, <span class=\"title class_\">SingleContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HashObj</span>, <span class=\"title class_\">IValidation</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/project&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useFormChange&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt;(path?: <span class=\"built_in\">string</span>): [T, <span class=\"function\">(<span class=\"params\">data: T</span>) =&gt;</span> <span class=\"built_in\">void</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = <span class=\"title class_\">SingleContext</span>.<span class=\"property\">getContext</span>&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; state, managerIns &#125; = useContext&lt;<span class=\"title class_\">IContextParams</span>&lt;T&gt;&gt;(formContext);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [state, <span class=\"function\">(<span class=\"params\">changed: HashObj, currentPath?: <span class=\"built_in\">string</span></span>) =&gt;</span> managerIns.<span class=\"title function_\">notifyByPath</span>(path || currentPath || <span class=\"string\">&#x27;&#x27;</span>, changed)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useManage&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt;() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = <span class=\"title class_\">SingleContext</span>.<span class=\"property\">getContext</span>&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; managerIns &#125; = useContext&lt;<span class=\"title class_\">IContextParams</span>&lt;T&gt;&gt;(formContext);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> managerIns;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useValidation&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">HashObj</span>&gt;(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, validation?: <span class=\"title class_\">IValidation</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validation) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = <span class=\"title class_\">SingleContext</span>.<span class=\"property\">getContext</span>&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; managerIns &#125; = useContext&lt;<span class=\"title class_\">IContextParams</span>&lt;T&gt;&gt;(formContext);</span><br><span class=\"line\">    <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        managerIns.<span class=\"title function_\">registryValidation</span>(path, validation);</span><br><span class=\"line\">    &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> usePrevious&lt;T&gt;(<span class=\"attr\">value</span>: T): T|<span class=\"literal\">undefined</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = useRef&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        ref.<span class=\"property\">current</span> = value;</span><br><span class=\"line\">    &#125;, [value]); <span class=\"comment\">// Only re-run if value changes</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ref.<span class=\"property\">current</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结</p>\n<p>一个基于JSON Schema 的buildform就完成了，通过全量的接收数据统一了对接口的interface，每次请求通过参数读取config渲染表单，再通过表单渲染实现面向配置渲染页面，稳步线中～😄</p>\n"},{"title":"JavaScript设计模式","date":"2018-04-11T16:00:00.000Z","_content":"\n# JavaScript设计模式\n\n## 工厂模式\n\n1，**用函数来封装特定接口创建对象的细节**。工厂模式解决了**创建多个相似对象对象的问题**，但还没有解决**对象识别的问题**。（通过函数封装）\n\n```\nfunction createPerson(name, age, job) {\n    var o = new Object();//用以封装接口的函数\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    sayName = function () {\n        alert(this.name);\n    };\n    return o;\n}\nvar person1 = createPerson('zxj', 23, \"Software Engineer\");\nvar person2 = createPerson('sdf', 25, \"Software Engineer\");\n```\n\n## 构造函数模式\n\n1，Person()中的代码除了和createPerson()中相同的部分外，还存在以下不同之处：\n\n- 没有显式的创建对象；\n- 直接将属性和方法赋给了this对象；\n- 没有return语句；\n  2，**创建构造函数Person的实例必须使用new运算符**：\n- 创建一个新对象；\n- **将构造函数的作用域赋给新对象**（因此this就指向这个新对象）；\n- 执行构造函数中的代码（为这个新对象添加属性和方法）；\n- 返回新对象；\n\n```\nfunction Person () {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n           alert(this.name); \n   }\n}\n    var person1 = new Person(\"mark\" , 29 , 'Software Engineer');\n    var person2 = new Person(\"Greg\" , 27 , 'Doctor');\n```\n\n3,**实例化的person1 ，person2 都有一个constructor 属性指向Person**(标示对象类型用constructor 检测对象类型用instanceof)\n\n> alert(person1.constructor == Person ); //true\n> alert(person1.constructor == Person ); //true\n> 通过构造的constructor 指向Person，通过原型使用**proto** 指向原型的prototype。\n\n4，构造函数与函数\n1， 两者的调用方式不同，构造函数**只能通过new操作符来调用**\n\n```\n// 当作构造函数\nvar person = new Person('zxj', 23, \"Software Engineer\");\nperson.sayName(); //zxj \n// 当作普通函数\nPerson('sdf', 25, \"Software Engineer\"); //添加到window\nwindow.sayName(); //saf\n// 在另一个对象的作用域中调用\nvar o = new Object();\nPerson.call(o, \"qwe\", 25, \"Nurse\");\no.sayName(); //qwe\n```\n\n2，构造函数的问题\n\n```\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;//被调用的函数\n}\n//相当于定义了全局的函数在构造函数体内被调用\nfunction sayName() {\n    alert(this.name);\n};\n//每个Person 实例都包含一个不同的FUNCTION以这种方式创建函数会导致不同的作用域链和标识符解析\nvar person1 = new Person('zxj', 23, \"Software Engineer\");\nvar person2 = new Person('sdf', 25, \"Software Engineer\");\n```\n\n# 原型模式\n\n1，每个函数都有一个prototype属性这个属性**包含一个\\*_proto_\\***这个属性是**一个指针**，**指向一个父对象的prototype**属性，而这个对象可以和特定实例共享属性和方法。\n\n```\nfunction Person(){\n}\nPerson.prototype.name = 'Nicholas';\nPersaon.prototype.age = 29;\nPerson.prototype.sayName = function (){\n    alert（this.name）;\n}\nvar person1 = new Person();\nperson1.sayName();//\"Nicholas\";\nvar person2 = new Person();\nperson2.sayName();//\"Nicholas\"\nalert(person1.sayName == person2.sayName) // true\n```\n\n2，**只要创建了一个新函数**就会有一组特定的规则为该函数**创建一个prototype**属性 这个属性中的**constructor指向f父对象描述了这个函数的构造方法**，***_proto_\\*指针指向父对象的prototype**\n*可以通过isPrototypeof方法来确定对象之间是否存在这种关系该方法返回一个Boolean值*\n\n> alert(person.prototype.isPrototypeof(person1))\n> alert(person.prototype.isPrototypeof(person2))\n\n3，原型模式实现原理 每当代码读取某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从**实例**本身开始。如果在**实例**中找到了具有给定名字的属性。如果查找到则返回，否则则在父对象的prototype中寻找通过 **proto**属性。（实例）\n\n4，delete可以删除来自原型的的值然后显示出继承自父对象的属性。\n\n```\nvar person1 = new Person();\nvar person2 = new Person();\nperson1.name  = \"mark\"\nalert(person1.name) //\"mark\"\nalert(person2.name) // \"Nichloas\"\ndelete person1.name ; \nalert(person1) // \"Nichloas\"\n```\n\n5 ,**hasOwnProperty()**是检测一个属性是存在于实例中还是存在与原型中（这个方法继承自Object对象） 该方法返回一个Boolean值\n\n```\nfunction Person () {\n}\nPerson.prototype.name = \"Nichloas\"\nPerson.prototype.age = \"Software Engineer \";\nPerson.prototype.sayName = function(){\n        alert(this.name)\n}\nvar person1 = new Person();\nvar  person2 = new Person();\nperson1.name  = \"Gerg\"\nalert (person.hasOwnProperty(\"name\")); //false 属性来自实例\nalert(person2.name)\nalert(person2.hasOwnProperty(\"name\"))://true 属性来自原型\ndelete person1.name\nalert(person1.hasOwnProperty(\"name\"))//true 属性0000000来自原型\n```\n\n### 原型与in操作符\n\n> 在for in 循环中使用\n> 单独使用时in 操作符通过对象能够访问给定属性时返回true 与hasOwnProperty不同in只判断是否访问到而后者判断是否来自原型\n\n```\n*判断存在于对象中或者存在于原型中代码*\nfunction hasProtootypeProperty(){\n     return !object .hasOwnProperty (name ) && (name in object)\n}\n```\n\n#### 在使用枚举 for in 时会返回可枚举的（enumerated）所有属性\n\n*ECMAscript5 将constuctor 和 prototype 属性[Enumerable]属性设置成false 不可枚举*\n要取得对象上所有可枚举的实例属性 可以使用Object.key()方法\n\n```\nvar key = Object.key(Person.prototype);\n```\n\n要取得所有实例属性（无论可否枚举）使用Object.getOwnPropertyNames()方法\n\n```\n var key = object.getOwnPropertyNames(Person.prototype);\n```\n\n(都可以替代for in 来获取实例属性)\n\n# 更简洁的的与原型语法\n\nPerson.prototype设置成为等于一个对象字面量形式创建的对象，相当于重构了Person.prototype。得到的结果相同。但constructor不再指向Person而是指向最初的Person原型\n*重写了prototype语法*\n先创建实例后修改原型依旧运转正常（**原型中查找值的过程是一次搜索**）\n\n```\nvar friend = new Person();\nPersonPrototype.sayHi = function() {\n        alert(\"hi\")\n}\nfriend.sayHi();\n```\n\n**原型的缺点**\n\n- 实例在默认情况下取得相同的属性值，所有属性被实例共享，对于包含引用类型的属性来说是一场灾难。\n\n```\n function Person () {\n }\n Person.prototyrpe={\n//重写prototype属性\nfriends:[\"mark\",\"lee\"],\n}\nvar person1 =new Person();\nvar person2 =new Person();\nperson1.friends.push（“van”）\nalert(person2.friends)//mark lee van\n```\n\n##### ！！！prototype 的指向确定属性，constructor确定构造方法","source":"_posts/jsdesignpartern.md","raw":"title: JavaScript设计模式\ndate: 2018/04/12\ncategories:\n- js\ntags:\n- js\n\n---\n\n# JavaScript设计模式\n\n## 工厂模式\n\n1，**用函数来封装特定接口创建对象的细节**。工厂模式解决了**创建多个相似对象对象的问题**，但还没有解决**对象识别的问题**。（通过函数封装）\n\n```\nfunction createPerson(name, age, job) {\n    var o = new Object();//用以封装接口的函数\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    sayName = function () {\n        alert(this.name);\n    };\n    return o;\n}\nvar person1 = createPerson('zxj', 23, \"Software Engineer\");\nvar person2 = createPerson('sdf', 25, \"Software Engineer\");\n```\n\n## 构造函数模式\n\n1，Person()中的代码除了和createPerson()中相同的部分外，还存在以下不同之处：\n\n- 没有显式的创建对象；\n- 直接将属性和方法赋给了this对象；\n- 没有return语句；\n  2，**创建构造函数Person的实例必须使用new运算符**：\n- 创建一个新对象；\n- **将构造函数的作用域赋给新对象**（因此this就指向这个新对象）；\n- 执行构造函数中的代码（为这个新对象添加属性和方法）；\n- 返回新对象；\n\n```\nfunction Person () {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n           alert(this.name); \n   }\n}\n    var person1 = new Person(\"mark\" , 29 , 'Software Engineer');\n    var person2 = new Person(\"Greg\" , 27 , 'Doctor');\n```\n\n3,**实例化的person1 ，person2 都有一个constructor 属性指向Person**(标示对象类型用constructor 检测对象类型用instanceof)\n\n> alert(person1.constructor == Person ); //true\n> alert(person1.constructor == Person ); //true\n> 通过构造的constructor 指向Person，通过原型使用**proto** 指向原型的prototype。\n\n4，构造函数与函数\n1， 两者的调用方式不同，构造函数**只能通过new操作符来调用**\n\n```\n// 当作构造函数\nvar person = new Person('zxj', 23, \"Software Engineer\");\nperson.sayName(); //zxj \n// 当作普通函数\nPerson('sdf', 25, \"Software Engineer\"); //添加到window\nwindow.sayName(); //saf\n// 在另一个对象的作用域中调用\nvar o = new Object();\nPerson.call(o, \"qwe\", 25, \"Nurse\");\no.sayName(); //qwe\n```\n\n2，构造函数的问题\n\n```\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;//被调用的函数\n}\n//相当于定义了全局的函数在构造函数体内被调用\nfunction sayName() {\n    alert(this.name);\n};\n//每个Person 实例都包含一个不同的FUNCTION以这种方式创建函数会导致不同的作用域链和标识符解析\nvar person1 = new Person('zxj', 23, \"Software Engineer\");\nvar person2 = new Person('sdf', 25, \"Software Engineer\");\n```\n\n# 原型模式\n\n1，每个函数都有一个prototype属性这个属性**包含一个\\*_proto_\\***这个属性是**一个指针**，**指向一个父对象的prototype**属性，而这个对象可以和特定实例共享属性和方法。\n\n```\nfunction Person(){\n}\nPerson.prototype.name = 'Nicholas';\nPersaon.prototype.age = 29;\nPerson.prototype.sayName = function (){\n    alert（this.name）;\n}\nvar person1 = new Person();\nperson1.sayName();//\"Nicholas\";\nvar person2 = new Person();\nperson2.sayName();//\"Nicholas\"\nalert(person1.sayName == person2.sayName) // true\n```\n\n2，**只要创建了一个新函数**就会有一组特定的规则为该函数**创建一个prototype**属性 这个属性中的**constructor指向f父对象描述了这个函数的构造方法**，***_proto_\\*指针指向父对象的prototype**\n*可以通过isPrototypeof方法来确定对象之间是否存在这种关系该方法返回一个Boolean值*\n\n> alert(person.prototype.isPrototypeof(person1))\n> alert(person.prototype.isPrototypeof(person2))\n\n3，原型模式实现原理 每当代码读取某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从**实例**本身开始。如果在**实例**中找到了具有给定名字的属性。如果查找到则返回，否则则在父对象的prototype中寻找通过 **proto**属性。（实例）\n\n4，delete可以删除来自原型的的值然后显示出继承自父对象的属性。\n\n```\nvar person1 = new Person();\nvar person2 = new Person();\nperson1.name  = \"mark\"\nalert(person1.name) //\"mark\"\nalert(person2.name) // \"Nichloas\"\ndelete person1.name ; \nalert(person1) // \"Nichloas\"\n```\n\n5 ,**hasOwnProperty()**是检测一个属性是存在于实例中还是存在与原型中（这个方法继承自Object对象） 该方法返回一个Boolean值\n\n```\nfunction Person () {\n}\nPerson.prototype.name = \"Nichloas\"\nPerson.prototype.age = \"Software Engineer \";\nPerson.prototype.sayName = function(){\n        alert(this.name)\n}\nvar person1 = new Person();\nvar  person2 = new Person();\nperson1.name  = \"Gerg\"\nalert (person.hasOwnProperty(\"name\")); //false 属性来自实例\nalert(person2.name)\nalert(person2.hasOwnProperty(\"name\"))://true 属性来自原型\ndelete person1.name\nalert(person1.hasOwnProperty(\"name\"))//true 属性0000000来自原型\n```\n\n### 原型与in操作符\n\n> 在for in 循环中使用\n> 单独使用时in 操作符通过对象能够访问给定属性时返回true 与hasOwnProperty不同in只判断是否访问到而后者判断是否来自原型\n\n```\n*判断存在于对象中或者存在于原型中代码*\nfunction hasProtootypeProperty(){\n     return !object .hasOwnProperty (name ) && (name in object)\n}\n```\n\n#### 在使用枚举 for in 时会返回可枚举的（enumerated）所有属性\n\n*ECMAscript5 将constuctor 和 prototype 属性[Enumerable]属性设置成false 不可枚举*\n要取得对象上所有可枚举的实例属性 可以使用Object.key()方法\n\n```\nvar key = Object.key(Person.prototype);\n```\n\n要取得所有实例属性（无论可否枚举）使用Object.getOwnPropertyNames()方法\n\n```\n var key = object.getOwnPropertyNames(Person.prototype);\n```\n\n(都可以替代for in 来获取实例属性)\n\n# 更简洁的的与原型语法\n\nPerson.prototype设置成为等于一个对象字面量形式创建的对象，相当于重构了Person.prototype。得到的结果相同。但constructor不再指向Person而是指向最初的Person原型\n*重写了prototype语法*\n先创建实例后修改原型依旧运转正常（**原型中查找值的过程是一次搜索**）\n\n```\nvar friend = new Person();\nPersonPrototype.sayHi = function() {\n        alert(\"hi\")\n}\nfriend.sayHi();\n```\n\n**原型的缺点**\n\n- 实例在默认情况下取得相同的属性值，所有属性被实例共享，对于包含引用类型的属性来说是一场灾难。\n\n```\n function Person () {\n }\n Person.prototyrpe={\n//重写prototype属性\nfriends:[\"mark\",\"lee\"],\n}\nvar person1 =new Person();\nvar person2 =new Person();\nperson1.friends.push（“van”）\nalert(person2.friends)//mark lee van\n```\n\n##### ！！！prototype 的指向确定属性，constructor确定构造方法","slug":"jsdesignpartern","published":1,"updated":"2024-04-10T17:46:25.877Z","_id":"cluvjqddx002d0wpd1dp06n2b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JavaScript设计模式\"><a href=\"#JavaScript设计模式\" class=\"headerlink\" title=\"JavaScript设计模式\"></a>JavaScript设计模式</h1><h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>1，<strong>用函数来封装特定接口创建对象的细节</strong>。工厂模式解决了<strong>创建多个相似对象对象的问题</strong>，但还没有解决<strong>对象识别的问题</strong>。（通过函数封装）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age, job) &#123;</span><br><span class=\"line\">    var o = new Object();//用以封装接口的函数</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age = age;</span><br><span class=\"line\">    o.job = job;</span><br><span class=\"line\">    sayName = function () &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = createPerson(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = createPerson(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>1，Person()中的代码除了和createPerson()中相同的部分外，还存在以下不同之处：</p>\n<ul>\n<li>没有显式的创建对象；</li>\n<li>直接将属性和方法赋给了this对象；</li>\n<li>没有return语句；<br>2，<strong>创建构造函数Person的实例必须使用new运算符</strong>：</li>\n<li>创建一个新对象；</li>\n<li><strong>将构造函数的作用域赋给新对象</strong>（因此this就指向这个新对象）；</li>\n<li>执行构造函数中的代码（为这个新对象添加属性和方法）；</li>\n<li>返回新对象；</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person () &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = function()&#123;</span><br><span class=\"line\">           alert(this.name); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    var person1 = new Person(&quot;mark&quot; , 29 , &#x27;Software Engineer&#x27;);</span><br><span class=\"line\">    var person2 = new Person(&quot;Greg&quot; , 27 , &#x27;Doctor&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>3,<strong>实例化的person1 ，person2 都有一个constructor 属性指向Person</strong>(标示对象类型用constructor 检测对象类型用instanceof)</p>\n<blockquote>\n<p>alert(person1.constructor &#x3D;&#x3D; Person ); &#x2F;&#x2F;true<br>alert(person1.constructor &#x3D;&#x3D; Person ); &#x2F;&#x2F;true<br>通过构造的constructor 指向Person，通过原型使用<strong>proto</strong> 指向原型的prototype。</p>\n</blockquote>\n<p>4，构造函数与函数<br>1， 两者的调用方式不同，构造函数<strong>只能通过new操作符来调用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当作构造函数</span><br><span class=\"line\">var person = new Person(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">person.sayName(); //zxj </span><br><span class=\"line\">// 当作普通函数</span><br><span class=\"line\">Person(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;); //添加到window</span><br><span class=\"line\">window.sayName(); //saf</span><br><span class=\"line\">// 在另一个对象的作用域中调用</span><br><span class=\"line\">var o = new Object();</span><br><span class=\"line\">Person.call(o, &quot;qwe&quot;, 25, &quot;Nurse&quot;);</span><br><span class=\"line\">o.sayName(); //qwe</span><br></pre></td></tr></table></figure>\n\n<p>2，构造函数的问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = sayName;//被调用的函数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//相当于定义了全局的函数在构造函数体内被调用</span><br><span class=\"line\">function sayName() &#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//每个Person 实例都包含一个不同的FUNCTION以这种方式创建函数会导致不同的作用域链和标识符解析</span><br><span class=\"line\">var person1 = new Person(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = new Person(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><p>1，每个函数都有一个prototype属性这个属性<strong>包含一个*<em>proto</em>*<strong>这个属性是</strong>一个指针</strong>，<strong>指向一个父对象的prototype</strong>属性，而这个对象可以和特定实例共享属性和方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &#x27;Nicholas&#x27;;</span><br><span class=\"line\">Persaon.prototype.age = 29;</span><br><span class=\"line\">Person.prototype.sayName = function ()&#123;</span><br><span class=\"line\">    alert（this.name）;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">person1.sayName();//&quot;Nicholas&quot;;</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName();//&quot;Nicholas&quot;</span><br><span class=\"line\">alert(person1.sayName == person2.sayName) // true</span><br></pre></td></tr></table></figure>\n\n<p>2，<strong>只要创建了一个新函数</strong>就会有一组特定的规则为该函数<strong>创建一个prototype</strong>属性 这个属性中的<strong>constructor指向f父对象描述了这个函数的构造方法</strong>，***<em>proto</em>*指针指向父对象的prototype**<br><em>可以通过isPrototypeof方法来确定对象之间是否存在这种关系该方法返回一个Boolean值</em></p>\n<blockquote>\n<p>alert(person.prototype.isPrototypeof(person1))<br>alert(person.prototype.isPrototypeof(person2))</p>\n</blockquote>\n<p>3，原型模式实现原理 每当代码读取某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从<strong>实例</strong>本身开始。如果在<strong>实例</strong>中找到了具有给定名字的属性。如果查找到则返回，否则则在父对象的prototype中寻找通过 <strong>proto</strong>属性。（实例）</p>\n<p>4，delete可以删除来自原型的的值然后显示出继承自父对象的属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person1.name  = &quot;mark&quot;</span><br><span class=\"line\">alert(person1.name) //&quot;mark&quot;</span><br><span class=\"line\">alert(person2.name) // &quot;Nichloas&quot;</span><br><span class=\"line\">delete person1.name ; </span><br><span class=\"line\">alert(person1) // &quot;Nichloas&quot;</span><br></pre></td></tr></table></figure>\n\n<p>5 ,**hasOwnProperty()**是检测一个属性是存在于实例中还是存在与原型中（这个方法继承自Object对象） 该方法返回一个Boolean值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person () &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;Nichloas&quot;</span><br><span class=\"line\">Person.prototype.age = &quot;Software Engineer &quot;;</span><br><span class=\"line\">Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var  person2 = new Person();</span><br><span class=\"line\">person1.name  = &quot;Gerg&quot;</span><br><span class=\"line\">alert (person.hasOwnProperty(&quot;name&quot;)); //false 属性来自实例</span><br><span class=\"line\">alert(person2.name)</span><br><span class=\"line\">alert(person2.hasOwnProperty(&quot;name&quot;))://true 属性来自原型</span><br><span class=\"line\">delete person1.name</span><br><span class=\"line\">alert(person1.hasOwnProperty(&quot;name&quot;))//true 属性0000000来自原型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h3><blockquote>\n<p>在for in 循环中使用<br>单独使用时in 操作符通过对象能够访问给定属性时返回true 与hasOwnProperty不同in只判断是否访问到而后者判断是否来自原型</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*判断存在于对象中或者存在于原型中代码*</span><br><span class=\"line\">function hasProtootypeProperty()&#123;</span><br><span class=\"line\">     return !object .hasOwnProperty (name ) &amp;&amp; (name in object)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在使用枚举-for-in-时会返回可枚举的（enumerated）所有属性\"><a href=\"#在使用枚举-for-in-时会返回可枚举的（enumerated）所有属性\" class=\"headerlink\" title=\"在使用枚举 for in 时会返回可枚举的（enumerated）所有属性\"></a>在使用枚举 for in 时会返回可枚举的（enumerated）所有属性</h4><p><em>ECMAscript5 将constuctor 和 prototype 属性[Enumerable]属性设置成false 不可枚举</em><br>要取得对象上所有可枚举的实例属性 可以使用Object.key()方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var key = Object.key(Person.prototype);</span><br></pre></td></tr></table></figure>\n\n<p>要取得所有实例属性（无论可否枚举）使用Object.getOwnPropertyNames()方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var key = object.getOwnPropertyNames(Person.prototype);</span><br></pre></td></tr></table></figure>\n\n<p>(都可以替代for in 来获取实例属性)</p>\n<h1 id=\"更简洁的的与原型语法\"><a href=\"#更简洁的的与原型语法\" class=\"headerlink\" title=\"更简洁的的与原型语法\"></a>更简洁的的与原型语法</h1><p>Person.prototype设置成为等于一个对象字面量形式创建的对象，相当于重构了Person.prototype。得到的结果相同。但constructor不再指向Person而是指向最初的Person原型<br><em>重写了prototype语法</em><br>先创建实例后修改原型依旧运转正常（<strong>原型中查找值的过程是一次搜索</strong>）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var friend = new Person();</span><br><span class=\"line\">PersonPrototype.sayHi = function() &#123;</span><br><span class=\"line\">        alert(&quot;hi&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">friend.sayHi();</span><br></pre></td></tr></table></figure>\n\n<p><strong>原型的缺点</strong></p>\n<ul>\n<li>实例在默认情况下取得相同的属性值，所有属性被实例共享，对于包含引用类型的属性来说是一场灾难。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function Person () &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Person.prototyrpe=&#123;</span><br><span class=\"line\">//重写prototype属性</span><br><span class=\"line\">friends:[&quot;mark&quot;,&quot;lee&quot;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 =new Person();</span><br><span class=\"line\">var person2 =new Person();</span><br><span class=\"line\">person1.friends.push（“van”）</span><br><span class=\"line\">alert(person2.friends)//mark lee van</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"！！！prototype-的指向确定属性，constructor确定构造方法\"><a href=\"#！！！prototype-的指向确定属性，constructor确定构造方法\" class=\"headerlink\" title=\"！！！prototype 的指向确定属性，constructor确定构造方法\"></a>！！！prototype 的指向确定属性，constructor确定构造方法</h5>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript设计模式\"><a href=\"#JavaScript设计模式\" class=\"headerlink\" title=\"JavaScript设计模式\"></a>JavaScript设计模式</h1><h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>1，<strong>用函数来封装特定接口创建对象的细节</strong>。工厂模式解决了<strong>创建多个相似对象对象的问题</strong>，但还没有解决<strong>对象识别的问题</strong>。（通过函数封装）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age, job) &#123;</span><br><span class=\"line\">    var o = new Object();//用以封装接口的函数</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age = age;</span><br><span class=\"line\">    o.job = job;</span><br><span class=\"line\">    sayName = function () &#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = createPerson(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = createPerson(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>1，Person()中的代码除了和createPerson()中相同的部分外，还存在以下不同之处：</p>\n<ul>\n<li>没有显式的创建对象；</li>\n<li>直接将属性和方法赋给了this对象；</li>\n<li>没有return语句；<br>2，<strong>创建构造函数Person的实例必须使用new运算符</strong>：</li>\n<li>创建一个新对象；</li>\n<li><strong>将构造函数的作用域赋给新对象</strong>（因此this就指向这个新对象）；</li>\n<li>执行构造函数中的代码（为这个新对象添加属性和方法）；</li>\n<li>返回新对象；</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person () &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = function()&#123;</span><br><span class=\"line\">           alert(this.name); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    var person1 = new Person(&quot;mark&quot; , 29 , &#x27;Software Engineer&#x27;);</span><br><span class=\"line\">    var person2 = new Person(&quot;Greg&quot; , 27 , &#x27;Doctor&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>3,<strong>实例化的person1 ，person2 都有一个constructor 属性指向Person</strong>(标示对象类型用constructor 检测对象类型用instanceof)</p>\n<blockquote>\n<p>alert(person1.constructor &#x3D;&#x3D; Person ); &#x2F;&#x2F;true<br>alert(person1.constructor &#x3D;&#x3D; Person ); &#x2F;&#x2F;true<br>通过构造的constructor 指向Person，通过原型使用<strong>proto</strong> 指向原型的prototype。</p>\n</blockquote>\n<p>4，构造函数与函数<br>1， 两者的调用方式不同，构造函数<strong>只能通过new操作符来调用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当作构造函数</span><br><span class=\"line\">var person = new Person(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">person.sayName(); //zxj </span><br><span class=\"line\">// 当作普通函数</span><br><span class=\"line\">Person(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;); //添加到window</span><br><span class=\"line\">window.sayName(); //saf</span><br><span class=\"line\">// 在另一个对象的作用域中调用</span><br><span class=\"line\">var o = new Object();</span><br><span class=\"line\">Person.call(o, &quot;qwe&quot;, 25, &quot;Nurse&quot;);</span><br><span class=\"line\">o.sayName(); //qwe</span><br></pre></td></tr></table></figure>\n\n<p>2，构造函数的问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.sayName = sayName;//被调用的函数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//相当于定义了全局的函数在构造函数体内被调用</span><br><span class=\"line\">function sayName() &#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//每个Person 实例都包含一个不同的FUNCTION以这种方式创建函数会导致不同的作用域链和标识符解析</span><br><span class=\"line\">var person1 = new Person(&#x27;zxj&#x27;, 23, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = new Person(&#x27;sdf&#x27;, 25, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><p>1，每个函数都有一个prototype属性这个属性<strong>包含一个*<em>proto</em>*<strong>这个属性是</strong>一个指针</strong>，<strong>指向一个父对象的prototype</strong>属性，而这个对象可以和特定实例共享属性和方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &#x27;Nicholas&#x27;;</span><br><span class=\"line\">Persaon.prototype.age = 29;</span><br><span class=\"line\">Person.prototype.sayName = function ()&#123;</span><br><span class=\"line\">    alert（this.name）;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">person1.sayName();//&quot;Nicholas&quot;;</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName();//&quot;Nicholas&quot;</span><br><span class=\"line\">alert(person1.sayName == person2.sayName) // true</span><br></pre></td></tr></table></figure>\n\n<p>2，<strong>只要创建了一个新函数</strong>就会有一组特定的规则为该函数<strong>创建一个prototype</strong>属性 这个属性中的<strong>constructor指向f父对象描述了这个函数的构造方法</strong>，***<em>proto</em>*指针指向父对象的prototype**<br><em>可以通过isPrototypeof方法来确定对象之间是否存在这种关系该方法返回一个Boolean值</em></p>\n<blockquote>\n<p>alert(person.prototype.isPrototypeof(person1))<br>alert(person.prototype.isPrototypeof(person2))</p>\n</blockquote>\n<p>3，原型模式实现原理 每当代码读取某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从<strong>实例</strong>本身开始。如果在<strong>实例</strong>中找到了具有给定名字的属性。如果查找到则返回，否则则在父对象的prototype中寻找通过 <strong>proto</strong>属性。（实例）</p>\n<p>4，delete可以删除来自原型的的值然后显示出继承自父对象的属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person1.name  = &quot;mark&quot;</span><br><span class=\"line\">alert(person1.name) //&quot;mark&quot;</span><br><span class=\"line\">alert(person2.name) // &quot;Nichloas&quot;</span><br><span class=\"line\">delete person1.name ; </span><br><span class=\"line\">alert(person1) // &quot;Nichloas&quot;</span><br></pre></td></tr></table></figure>\n\n<p>5 ,**hasOwnProperty()**是检测一个属性是存在于实例中还是存在与原型中（这个方法继承自Object对象） 该方法返回一个Boolean值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person () &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;Nichloas&quot;</span><br><span class=\"line\">Person.prototype.age = &quot;Software Engineer &quot;;</span><br><span class=\"line\">Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var  person2 = new Person();</span><br><span class=\"line\">person1.name  = &quot;Gerg&quot;</span><br><span class=\"line\">alert (person.hasOwnProperty(&quot;name&quot;)); //false 属性来自实例</span><br><span class=\"line\">alert(person2.name)</span><br><span class=\"line\">alert(person2.hasOwnProperty(&quot;name&quot;))://true 属性来自原型</span><br><span class=\"line\">delete person1.name</span><br><span class=\"line\">alert(person1.hasOwnProperty(&quot;name&quot;))//true 属性0000000来自原型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h3><blockquote>\n<p>在for in 循环中使用<br>单独使用时in 操作符通过对象能够访问给定属性时返回true 与hasOwnProperty不同in只判断是否访问到而后者判断是否来自原型</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*判断存在于对象中或者存在于原型中代码*</span><br><span class=\"line\">function hasProtootypeProperty()&#123;</span><br><span class=\"line\">     return !object .hasOwnProperty (name ) &amp;&amp; (name in object)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在使用枚举-for-in-时会返回可枚举的（enumerated）所有属性\"><a href=\"#在使用枚举-for-in-时会返回可枚举的（enumerated）所有属性\" class=\"headerlink\" title=\"在使用枚举 for in 时会返回可枚举的（enumerated）所有属性\"></a>在使用枚举 for in 时会返回可枚举的（enumerated）所有属性</h4><p><em>ECMAscript5 将constuctor 和 prototype 属性[Enumerable]属性设置成false 不可枚举</em><br>要取得对象上所有可枚举的实例属性 可以使用Object.key()方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var key = Object.key(Person.prototype);</span><br></pre></td></tr></table></figure>\n\n<p>要取得所有实例属性（无论可否枚举）使用Object.getOwnPropertyNames()方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var key = object.getOwnPropertyNames(Person.prototype);</span><br></pre></td></tr></table></figure>\n\n<p>(都可以替代for in 来获取实例属性)</p>\n<h1 id=\"更简洁的的与原型语法\"><a href=\"#更简洁的的与原型语法\" class=\"headerlink\" title=\"更简洁的的与原型语法\"></a>更简洁的的与原型语法</h1><p>Person.prototype设置成为等于一个对象字面量形式创建的对象，相当于重构了Person.prototype。得到的结果相同。但constructor不再指向Person而是指向最初的Person原型<br><em>重写了prototype语法</em><br>先创建实例后修改原型依旧运转正常（<strong>原型中查找值的过程是一次搜索</strong>）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var friend = new Person();</span><br><span class=\"line\">PersonPrototype.sayHi = function() &#123;</span><br><span class=\"line\">        alert(&quot;hi&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">friend.sayHi();</span><br></pre></td></tr></table></figure>\n\n<p><strong>原型的缺点</strong></p>\n<ul>\n<li>实例在默认情况下取得相同的属性值，所有属性被实例共享，对于包含引用类型的属性来说是一场灾难。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function Person () &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Person.prototyrpe=&#123;</span><br><span class=\"line\">//重写prototype属性</span><br><span class=\"line\">friends:[&quot;mark&quot;,&quot;lee&quot;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 =new Person();</span><br><span class=\"line\">var person2 =new Person();</span><br><span class=\"line\">person1.friends.push（“van”）</span><br><span class=\"line\">alert(person2.friends)//mark lee van</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"！！！prototype-的指向确定属性，constructor确定构造方法\"><a href=\"#！！！prototype-的指向确定属性，constructor确定构造方法\" class=\"headerlink\" title=\"！！！prototype 的指向确定属性，constructor确定构造方法\"></a>！！！prototype 的指向确定属性，constructor确定构造方法</h5>"},{"title":"Rxjs 总结","date":"2017-09-08T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/rxjs.png","_content":"# Rxjs 总结（一）\n![rx](https://cdn-images-1.medium.com/max/2000/1*gD37OB2-PtMqZdk3X1YnEQ.png)\n\n# 操作符汇总\n\n> 在Rx的世界发生的一切现象都是围绕着数据流展开的，数据流以Observable对象的的形式存在，而对Rx的应用实际就是使用操作符对数据流进行操作。按照使用方式，大体上可以将操作符划分为四类，分别是创建类，合并类，过滤类，转化类操作符。\n\n## 创建类操作符\n\n> 顾名思义，创建类数据流的产出是一个Observable对象。\n\n#### 一. 创建同步数据流\n\n**create** :create的本质是直接调用Observable的构造函数。\n\n```javascript\nObservable.create = function(subscribe) {\n    return new Observable(subscribe)\n}\n```\n\n **of**  : 利用of操作符可以轻松产生包含给定数据集合的Observable对象。\n\n```javascript\nRx.Observable.of(1,2,3).subscribe(console.log);\n//output: 1,2,3\n```\n\n**range** : 返回一定范围上，以第一个参数为起点，持续加一作为数据的Observable对象\n\n```javascript\nRx.Observable.range(1,100).subscribe(console.log);\n//output: 1......100\nRx.Observable.range(1.5,100).subscribe(console.log);\n//output: 1.5,2.5,3.5....100.5\n```\n\n**generate**  : 类似于for循环，包含条件判断，递增值设置，返回结果规则，创建一组Observable。\n\n```javascript\nRx.Observable.generate(2,v <= 10, v => v+2, v => v**2).subscribe(console.log)\n// output 4, 16, 36, 64, 100\n```\n\n**repeat** ： repeat操作符是一个实例操作符，能够复制上游的Observable中的数据若干次，使用repeat操作符实际上是将Observable订阅了若干次\t。\n\n```javascript\nRx.Observable.of(1,2,3).repeat(3).subscribe(console.log);\n// output 1,2,3,1,2,3,1,2,3\n```\n\n**empty** : 产生一个空的直接完结的Observable对象。\n\n**throw** ： 产生一个直接抛出错误的Observable对象。\n\n```javascript\nRx.Observable.throw(new Error('Test')).subscribe(console.log, console.log, console.log('complete'))\n\n// output complete \n// Error: Test\n```\n\n**never** : 产生一个既不抛错也不完结，也没有什么动作，就那么呆着的一个Observable。。。。。\n\n```javascript\nRx.Observable.generate(2,v => v <= 10, v => v+2, v => v**2).subscribe(console.log)\n// output 4, 16, 36, 64, 100\n```\n\n#### 二. 创建异步数据流\n\n**interval** ： 创建出一个根据设置时间递增的Observable对象，interval不会主动停止，需要下游调用complete才会终止。\n\n```javascript\nRx.Observable.interval(1000).subscribe(console.log)\n// output 1，2，3.....\n```\n\n**timer** ： （时间/毫秒数, ？时间间隔）=> 若没有第二个参数，timer会在指定时间返回0，若有第二个参数则以第一个参数为起点，第二个参数为时间间隔，持续产生一个递增的Observable对象。\n\n```javascript\nRx.Observable.timer(Date.now() + 1000).subscribe(console.log)\n// output 0\nRx.Observable.timer(Date.now() + 1000, 1000).subscribe(console.log)\n// output 0, 1, 2, 3, 4\n```\n\n#### 三. 把其他类型的数据转化为Observable\n\n**from** : 可以把任何js对象转化为Observable对象。\n\n```javascript\nRx.Observable.from([1,2,3]).subscribe(console.log);\n// output: 1, 2, 3\n```\n\n**fromPromise** : 将promise类型的对象转化为Observable 对象；\n\n```javascript\nRx.Observable.fromPromise(Promise.resolve(\"test\")).map(v => `hello, ${v}`).subscribe(console.log)\n\n// output: hello test\n```\n\n**fromEvent** : 将DOM事件，或nodejs的event对象转化为Observable；\n\n```javascript\nRx.Observable.fromEvent(document.getElementById('app'), 'click').subscribe(console.log);\n// node \nconst emitter = new EventEmitter();\nRx.Observable.fromEvent(emitter, 'test').subscribe(console.log);\nemitter.emit('msg', 1);\n// output: 1\n\n```\n\n\n\n#### 四. 其他\n\n**repeatWhen** ： 相比于repeat可控的重复订阅上游。\n\n```javascript\nRx.Observable.of(1,2,3).repeatWhen((notifier$) => notifier$.delay(1000)).subscribe(console.log)\n// output: 1,2,3  1,2,3\n```\n\n**defer** : 延迟Observable创建，仅在被订阅的时候创建。\n\n```javascript\nconst fetchData = () => Observable.ajax(url);\nconst source$ = Rx.Observable.defer(fetchData);\n// 仅当source被订阅时才发出ajax请求\n```\n\n## 合并类操作符\n\n> 随着需求的复杂化，单一的操作符很难满足需求，因此操作符之间的组合让Rx发挥更大的威力。\n\n| 功能                                     | 操作符                                     |\n| ---------------------------------------- | :----------------------------------------- |\n| 把多个数据流以先到先得的方式合并         | merge， mergeAll                           |\n| 把多个数据流首尾相接的方式合并           | concat，concatAll                          |\n| 把多个数据流以一一对应的方式合并         | zip，zipAll                                |\n| 持续合并多个数据流中最新产生的数据       | combineLatest， combineAll, withLatestFrom |\n| 从多个数据流中选取第一个产生内容的数据流 | race                                       |\n| 在数据流前面添加一个指定数据             | startWith                                  |\n| 只获取多个数据流最后产生的那个数据       | forkJoin                                   |\n| 从高阶数据流中切换数据源                 | switch， exhaust                           |\n\n**concat** ： 首尾相接\n\n```javascript\nRx.Observable.of(1,2,3).concat(Observable.of(4,5,6)).subscribe(console.log)\n// output: 1,2,3,4,5,6\n// 如果Observable对象没有complete则永远不会concat到下一个Observable\n```\n\n**merge** ： 先到先得\n\n```javascript\nconst mouseUp$ = fromEvent(document, 'mouseup');\nconst mouseDown$ = fromEvent(document, 'modedown');\nconst source$ = merge(mouse$, mouseDown$);\n// 鼠标点击则触发订阅的发生\n/*\n*@params Observable\n*@params Observable\n*@params number {可容纳Observable的数量}\n*/\n// 常用作合并异步数据流，http request， dom event等。\n```\n\n**zip** ： 一一对应\n\n```javascript\n//zip 会将上游数据转化为数组形式\n// 只要zip上游任何一个Observable完结， zip就会完结\nObservable.zip(of(1,2,3), of('a', 'b', 'c')).subscribe(console.log);\n// output [1,a], [2,b], [3,c]\n\n```\n\n**combineLatest** ： 合并最后一个数据\n\n```javascript\nconst run1$ = timer(500, 1000);\nconst run2$ = timer(1000, 1000);\ncombineLatest(run1$, run2$).subscribe(console.log);\n// output: [0,1], [1,1]...\n//每隔500毫秒产出一次数据， 最新最近有数据流流过则触发combineLatest的subscribe\n```\n\n**withLatestForm** : 仅根据上游的单一数据源向下游推送数据\n\n```javascript\nconst timer1$ = timer(0, 1000);\nconst timer2$ = timer(500, 1000);\nwithLatestForm(timer1$, timer2$).subscribe(console.log);\n// output: [1, 0], [2, 1]...\n```\n\n**race** :类似Promise.race，仅处理最先到达的Observable\n\n```javascript\nconst timer1$ = timer(0, 1000);\nconst timer2$ = timer(500, 1000);\nrace(timer1$, timer2$).subscribe(console.log);\n// 仅处理由timer$产出的Observable对象\n```\n\n**startWith** ： 在被订阅时先突出一定的数据\n\n```javascript\nconst timer1$ = timer(0, 1000).startWith('start');\nconst timer2$ = timer(500, 1000);\nrace(timer1$, timer2$).subscribe(console.log);\n// output: start 0 1 2\n```\n\n**forkJoin** : 等待所有Observable对象处理完结，选取每个最后一个对象传递给下游。\n\n```javascript\nconst timer1$ = timer(0, 1000).take(1);\nconst timer2$ = timer(500, 1000).take(3);\nforkJoin(timer1$, timer2$).subscribe(console.log);\n//output: 0, 2\n```\n\n**switch**： 总是切换到最新的内部Observable对象获取数据；\n\n```javascript\nconst stream$ = Observable.interval(1000).take(2).map(v => Observable.interval(1500).map(v => `${x},${y}`).take(2));\nconst result = stream$.switch();\n// output: 1,0 1,1\n```\n\n**exhaust** : 耗尽当前Observable之前不会切换到下一个；\n\n```javascript\nconst stream$ = Observable.interval(1000).take(2).map(v => Observable.interval(1500).map(v => `${x},${y}`).take(2));\nconst result = stream$.exhaust();\n// output: 0,0 0,1\n```\n\n\n\n## 辅助操作符\n\n| 功能                                     | 操作符          |\n| ---------------------------------------- | --------------- |\n| 统计数据流中所有数据的个数               | count           |\n| 获得数据流中最大和最小的数据             | Max, min        |\n| 对数据流传输数据进行规约操作             | reduce          |\n| 判断是否所有数据满足判断条件             | every           |\n| 找到的一个满足判定条件的数据             | Find, findIndex |\n| 判断一个数据流是否不包含任何数据         | isEmpty         |\n| 如果一个数据流为空就默认产生一个指定数据 | defaultIfEmpty  |\n\n**count** ： 统计上游Observable对象吐出的所有数据。\n\n```javascript\nObservable.timer(1000).concat(Observable.timer(100)).count();\n//output: 2\nObservable.timer(1000).concat(Observable.timer(100), Observable.timer(100)).count();\n// output: 3\n```\n\n**max， min** ： 获得Observable对象的最大值和最小值。\n\n```javascript\nObservable.of(1,2,3).min((a,b) => a - b)\n// output: 1\n```\n\n**reduce** : 规约统计，类似于JavaScript的数组方法reduce。\n\n```javascript\nRx.Observable.of(1,2,3).reduce((acc, curr) =>acc + curr).subscribe(console.log);\n//output: 6\n```\n\n**every** ：类似数组方法every，当所有的Observable对象满足某个条件时，返回true，否则false；\n\n```javascript\nRx.Observable.of(1,2,3).every((x) => x > 2)\n// output: false\n```\n\n**find，findIndex** ：类似数组方法；\n\n```javascript\nRx.Observable.of(1,2,3).find((x) => x > 2).subscribe(console.log);\n// output: 3\nRx.Observable.of(1,2,3).findIndex((x) => x > 2).subscribe(console.log);\n// output: 2\n```\n\n**isEmpty** ：\n\n```javascript\nRx.Observable.create(observer => {\n    setTimeout(() => observer.complete(1), 1000);\n}).isEmpty().subscribe(console.log);\n// output: 一秒后。。 true\n```\n\n**defaultIfEmpty** ：\n\n```javascript\nRx.Observable.create(observer => {\n    setTimeout(() => observer.complete(1), 1000);\n}).defaultIfEmpty().subscribe(console.log);\n// output: 一秒后。。 null\n```\n\n\n\n## \t过滤数据流\n\n| 功能                               | 操作符                                        |\n| ---------------------------------- | --------------------------------------------- |\n| 过滤掉不满足条件的操作符           | filter                                        |\n| 获得满足条件的第一个数据           | first                                         |\n| 获得满足判断条件的最后一个条件     | last                                          |\n| 从数据流中取出最先出现的若干年数据 | take                                          |\n| 从数据流中取出最后出现的若干数据   | takeLast                                      |\n| 从数据流中选取数据直到某种情况发生 | takeWhile，takeUntil                          |\n| 从数据流中忽略最先出现的若干数据   | skip                                          |\n| 从数据流中忽略数据直到某种情况发生 | skip， skipUntil                              |\n| 基于时间的数据流量筛选             | throttleTime, debounceTime, auditTime         |\n| 基于数据内容的数据流量筛选         | throttle，debounce，audit                     |\n| 基于采样方式的数据流量筛选         | sample，sanpleTime                            |\n| 删除重复的数据                     | distinct                                      |\n| 删除重复的连续数据                 | distinceUntilChanged， distinctUntilKyChanged |\n| 忽略数据流中的所有数据             | ignoreElements                                |\n| 只选取指定出现位置的数据           | elementAt                                     |\n| 判断是否只有一个数据满足判定条件   | single                                        |\n\n**filter** ：类似数组的filter方法，过滤掉不满足条件的数据。\n\n```javascript\nObservable.of(1,2,3).filter(v => v%2 == 0).subscribe(console.log);\n// output: 2\n```\n\n**first** : 满足条件的第一个数据。\n\n```javascript\nObservable.of(1,2,3).first(v => v%3 == 0).subscribe(console.log);\n// output: 3\nObservable.of(1,2,3).first().subscribe(console.log);\n// output: 1\n```\n\n**last** ： 与first相反。\n\n```javascript\nObservable.of(1,2,3).last(v => v%3 == 0).subscribe(console.log);\n// output: 3\nObservable.of(1,2,3).last().subscribe(console.log);\n// output: 3\n```\n\n**take，takeLast，takeWhile， takeUntil** ： 从数据流中取出多个数据，或按照条件中取出多个数据。\n\n```javascript\nObservable.of(1,2,3，4).take(3).subscribe(console.log);\n// output: 1，2，3\nObservable.of(1,2,3).takeLast(3).subscribe(console.log);\n// output: 2,3,4\nObservable.of(1,2,3).takeWhile(x => x < 2).subscribe(console.log);\n// output: 1\nObservable.interval(1000).takeUntil(Observable.interval(2500)).subscribe(console.log);\n// 需要另行订阅高阶Observable\n// output: 0,1\n\n```\n\n**skip ** ：跳过前n个\n\n```javascript\nObservable.of(1,2,3).skip(1).subscribe(console.log);\n// output: 2,3\n```\n\n**skipWhile, skipUntil**\n\n```javascript\nObservable.interval(1000).skipWhile(v => v%2 == 0).subscribe(console.log)\n// output: 1,2,3,4,5,6.....\nObservable.interval(1000).takeUntil(Observable.interval(2500)).subscribe(v => console.log(\"I'm in v\", v))\n// output 1,2,3,4\n// takeUntile skipUntil 行为相反\n```\n\n\n\n**throttleTime** ： 在限定时间范围内，从上游向下游传递数据的个数。\n\n```javascript\nObservable.interval(1000).throttleTime(2000).subscribe(console.log);\n// output: 0, 2, 4, 6.....\n```\n\n**debounceTime** : 让传递给下游数据间隔不能够小雨给定时间。\n\n```javascript\nObservable.interval(1000).filter(v => v % 3 === 0).debounceTime(2000).subscribe(console.log);\n// output: 0, 3, 6.....\n```\n\n**throttle** : 根据duorationSelector触发的时机来传递上游的值。\n\n```javascript\nObservable.interval(1000).throttle(v => {\n          console.log(\"v\", v);\n          return Observable.interval(2000);\n        }).subscribe(console.log)\n// output: v0 0 , v2 2.....\n```\n\n**debounce** : 根据duorationSelector触发的时机来传递上游的值。\n\n```javascript\nObservable.interval(1000).debounce(v => {\n          console.log(\"v\", v);\n          return Observable.interval(2000);\n        }).subscribe(console.log)\n// output: 时间间隔总有数据产生所以永远不会打印数据\n\n```\n\n**auditTime， audit** ： 与throttle类似但是传递的是最后一个数据。\n\n```javascript\nObservable.interval(1000).auditTime(3000).subscribe(console.log);\n// output: 2, 5, 8,10\n```\n\n**sample, sampleTime**: 根据规则在一个范围内取一个数据抛弃其他数据。\n\n```javascript\nObservable.interval(1000).sampleTime(3000).subscribe(console.log);\n// output： 1,4,7,10,13...\n// sample 会在接收到notifer$产生数据后采集最后一个数据传递给下游\n```\n\n**distinct**： 只返回从没有出现过的数据。\n\n```javascript\nObservable.of(0,1,2,3,3,4,5,5,6).distinct().subscribe(console.log);\n// output: 0,1,2,3,4,5,6\n// @params func rule\n// @params Observable flush \n// 理解为去重\n```\n\n**distinctUntilChanged， distinctUntilKeyChanged** ： 删除掉和上一个相同的数据。\n\n```javascript\nObservable.of(0,1,2,3,3,4,5,5,6,1).distinctUntilChanged().subscribe(console.log);\n// output: 0,1,2,3,4,5,6,1\n// @params func rule 判断对象相等的规则\n// 理解为去重\n```\n\n## 转化操作符\n\n| 功能                             | 操作符                                                 |\n| -------------------------------- | ------------------------------------------------------ |\n| 将每个元素映射函数产生新的数据   | map                                                    |\n| 将数据流中每个元素映射为同一数据 | mapTo                                                  |\n| 提取数据流中每个数据的某个字段   | pluck                                                  |\n| 产生高阶ObservabTime,bule对象    | windowTime, windowCount,windowWhen,windowToggle,window |\n| 产生数组构成的数据流             | bufferTime,bufferCount,bufferWhen,bufferToggle,buffer  |\n| 映射产生高阶Observable对象并合并 | concatMap, mergeMap, switchMap, exhaustMap             |\n| 产生规约运算结果组成的数据流     | scan， mergeScan                                       |\n\n**map**\n\n```javascript\nconst func = function(value) {\n    return [value, this.cont]\n}\nconst context = {cont: 'test'};            \nObservable.of(1,2,3).map(func, context).subscribe(console.log);\n// output: [0, 'test'] [1, 'test'] [2, 'test']           \n```\n\n**pluck** : 将上游的数据按字段取出。\n\n```javascript\nObservable.of({name: 'mark'}).pluck('name').subscribe(console.log);\n// output: mark\n```\n\n**windowTime, bufferTime**\n\n```javascript\n      Observable.interval(1000).windowTime(2000).subscribe(v => v.subscribe(console.log));\n// output: 1,2,3,4...\n// windowToggle //以source为数据源，第一个Observable为凭据，进行Toggle操作\n```\n\n\n\n**window， buffer**\n\n```javascript\nconst source$ = Observable.timer(0, 100);\nconst notifer$ = Observable.timer(400, 400);\nsource$.window(notifer$);\n// 每400毫秒产生一个Observable的窗口\n```\n\n**concatMap, mergeMap, switchMap, exhaustMap** \n\n```javascript\nObservable.of(1,2,3).concatMap(v => Observable.interval(100).take(3)).subscribe(console.log);\n// output: 012012012\nObservable.of(1,2,3).mergeMap(v => Observable.interval(100).take(3)).subscribe(console.log);\n// output: 001122\nObservable.of(1,2,3).switchMap(v => Observable.interval(100).take(3)).subscribe(console.log);\n// output: 012\n```\n\n**groupBy**\n\n```javascript\nObservable.of(1,2,3,4).groupBy(v => v %2 === 0).subscribe((v) => v.subscribe(console.log));\n// output: 2 , 4\n// return Observable\n```\n\n**scan** ： 可以理解为可以持续传递数据的reduce\n\n**mergeScan** ： 返回Observable的scan\n\n## 异常处理\n\n| 功能                         | 操作符           |\n| ---------------------------- | ---------------- |\n| 捕获上游的错误               | catch            |\n| 当上游产生错误时重试         | retry，retryWhen |\n| 无论是否出错都要进行一些操作 | finally          |\n\n**catch**\n\n```javascript\nObservable.of(1,2,3,4).map((v) => {\n          if(v == 4) {\n            throw new Error('test');\n          }\n          return v;\n        }).catch((err, caught$) => {\n          console.log(\"test\", err);\n          return caught$;\n        }).take(10).subscribe(console.log);\n// output: 1,2,3,Error: test\n```\n\n**retry, retryWhen**\n\n```javascript\nObservable.of(1,2,3,4).map((v) => {\n          if(v == 4) {\n            throw new Error('test');\n          }\n          return v;\n        }).retry(1).catch((err, caught$) => {\n          return Observable.of(8);\n        }).subscribe(console.log);\n// output: 1,2,3,1,2,3,8\n\nObservable.of(1,2,3,4).map((v) => {\n          if(v == 4) {\n            throw new Error('test');\n          }\n          return v;\n        }).retryWhen(err$ => Observable.interval(10)).catch((err, caught$) => {\n          return Observable.of(8);\n        }).subscribe(console.log);\n// output: 123123123123123123123....\n```\n\n**finally** : 同Javascript的finally方法。\n\n## 多播\n\n| 功能                             | 操作符          |\n| -------------------------------- | --------------- |\n| 灵活选取Subject对象进行多播      | multicast       |\n| 只多播数据流中最后一个数据       | publishLast     |\n| 对数据流中给定数量的数据进行多播 | publishReplay   |\n| 拥有默认数据的多播               | publishBehavior |\n\n> Cold Observable: 每次subscribe都产生一个全新的数据序列的数据流。\n>\n> Hot Observable： 真正的数据源与Observer没有关系，达到统一数据源的效果（fromEvent, fromPromise）。\n\n```javascript\nconst subject = new Subject();\nconst subjectTest = subject.subscribe((v) => console.log('v1',v));\nsubject.next(1);\nsubject.subscribe(v => console.log('v2', v), null, ()=> console.log('v2 complete'));\nsubject.next(2);\nsubjectTest.unsubscribe();\nsubject.complete();\n// output: v1,1 v1,2 v2,2 v2complete\n```\n\n> subject可以有多个数据源，起到的作用就是把多个数据源的内容汇总到一个Observable中去。\n\n**multicast**\n\n```javascript\nconst tick$ = Observable.interval(1000).take(10);\nconst source = tick$.multicast(new Subject()).refCount();\nsource.subscribe(v => console.log(\"v1\", v))\nsource.subscribe(v => console.log(\"v2\", v))\n// output: v1 0, v2 0 v1 1, v2 1....\n// multicast产生的connectableObservable会去subscribe的Observable\nconst tick$ = Observable.interval(1000).take(2);\nconst source = tick$.multicast(new Subject(), (shared) => shared.concat(Observable.of('Done')))\nsource.subscribe(v => console.log(\"I'm in v1\", v))\nsource.subscribe(v => console.log(\"I'm in v\", v))\n// I'm in v1 0\n// I'm in v 0\n// I'm in v1 0\n// I'm in v 0\n// I'm in v1 1\n// I'm in v 1\n// I'm in v1 Done\n//'m in v Done\n\n```\n\n**publish**\n\n```javascript\nconst publish = (selector) => {\n    if(selector){\n        return this.multicast(new Subject(), selector)\n    }\n    return this.multicast(new Subject())\n}\n// publish实际是对multicast的封装\n```\n\n**share**\n\n```javascript\nconst share = () {\n    this.multicast(() => new Subject()).refcount();\n}\n\n// share也是对multicast的封装\n```\n\n**publishLast，AsyncSubject**\n\n```javascript\nfunction publishLast() {\n    return this.multicast.call(this, new AsyncSubject())\n}\n// 由AsyncSubject封装的publishLast方法\n```\n\n**publishReplay， replaySubject**\n\n```javascript\nfunction publishReplay(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY) {\n    return multicast.call(this, new ReplaySubject(bufferSize, windowTime))\n}\n```\n\n**publishBehavior, BehaviorSubject**\n\n```javascript\nfunction publishBehavior(value) {\n    return multicast.call(this, new BehaviorSubject(value));\n}\n```\n\n\n\n## Scheduler\n\n> Scheduler 可以作为创造类和合并类操作符的函数使用，Rx还提供了observeOn和subscribeOn两个操作符，用于在管道任何位置插入Scheduler\n\n```\nconsole.log('before');\nObservable.range(1, 3).subscribeOn(asap).subscribe(console.log)\nconsole.log('after');\n// output: 1,2,3,before, after\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/RxjsSummary.md","raw":"---\ntitle: Rxjs 总结\ndate: 2017/09/09\ncover: https://technologybook.tech/assets/img/rxjs.png\ncategories:\n- reactive programming\ntags: \n- rxjs\n\n---\n# Rxjs 总结（一）\n![rx](https://cdn-images-1.medium.com/max/2000/1*gD37OB2-PtMqZdk3X1YnEQ.png)\n\n# 操作符汇总\n\n> 在Rx的世界发生的一切现象都是围绕着数据流展开的，数据流以Observable对象的的形式存在，而对Rx的应用实际就是使用操作符对数据流进行操作。按照使用方式，大体上可以将操作符划分为四类，分别是创建类，合并类，过滤类，转化类操作符。\n\n## 创建类操作符\n\n> 顾名思义，创建类数据流的产出是一个Observable对象。\n\n#### 一. 创建同步数据流\n\n**create** :create的本质是直接调用Observable的构造函数。\n\n```javascript\nObservable.create = function(subscribe) {\n    return new Observable(subscribe)\n}\n```\n\n **of**  : 利用of操作符可以轻松产生包含给定数据集合的Observable对象。\n\n```javascript\nRx.Observable.of(1,2,3).subscribe(console.log);\n//output: 1,2,3\n```\n\n**range** : 返回一定范围上，以第一个参数为起点，持续加一作为数据的Observable对象\n\n```javascript\nRx.Observable.range(1,100).subscribe(console.log);\n//output: 1......100\nRx.Observable.range(1.5,100).subscribe(console.log);\n//output: 1.5,2.5,3.5....100.5\n```\n\n**generate**  : 类似于for循环，包含条件判断，递增值设置，返回结果规则，创建一组Observable。\n\n```javascript\nRx.Observable.generate(2,v <= 10, v => v+2, v => v**2).subscribe(console.log)\n// output 4, 16, 36, 64, 100\n```\n\n**repeat** ： repeat操作符是一个实例操作符，能够复制上游的Observable中的数据若干次，使用repeat操作符实际上是将Observable订阅了若干次\t。\n\n```javascript\nRx.Observable.of(1,2,3).repeat(3).subscribe(console.log);\n// output 1,2,3,1,2,3,1,2,3\n```\n\n**empty** : 产生一个空的直接完结的Observable对象。\n\n**throw** ： 产生一个直接抛出错误的Observable对象。\n\n```javascript\nRx.Observable.throw(new Error('Test')).subscribe(console.log, console.log, console.log('complete'))\n\n// output complete \n// Error: Test\n```\n\n**never** : 产生一个既不抛错也不完结，也没有什么动作，就那么呆着的一个Observable。。。。。\n\n```javascript\nRx.Observable.generate(2,v => v <= 10, v => v+2, v => v**2).subscribe(console.log)\n// output 4, 16, 36, 64, 100\n```\n\n#### 二. 创建异步数据流\n\n**interval** ： 创建出一个根据设置时间递增的Observable对象，interval不会主动停止，需要下游调用complete才会终止。\n\n```javascript\nRx.Observable.interval(1000).subscribe(console.log)\n// output 1，2，3.....\n```\n\n**timer** ： （时间/毫秒数, ？时间间隔）=> 若没有第二个参数，timer会在指定时间返回0，若有第二个参数则以第一个参数为起点，第二个参数为时间间隔，持续产生一个递增的Observable对象。\n\n```javascript\nRx.Observable.timer(Date.now() + 1000).subscribe(console.log)\n// output 0\nRx.Observable.timer(Date.now() + 1000, 1000).subscribe(console.log)\n// output 0, 1, 2, 3, 4\n```\n\n#### 三. 把其他类型的数据转化为Observable\n\n**from** : 可以把任何js对象转化为Observable对象。\n\n```javascript\nRx.Observable.from([1,2,3]).subscribe(console.log);\n// output: 1, 2, 3\n```\n\n**fromPromise** : 将promise类型的对象转化为Observable 对象；\n\n```javascript\nRx.Observable.fromPromise(Promise.resolve(\"test\")).map(v => `hello, ${v}`).subscribe(console.log)\n\n// output: hello test\n```\n\n**fromEvent** : 将DOM事件，或nodejs的event对象转化为Observable；\n\n```javascript\nRx.Observable.fromEvent(document.getElementById('app'), 'click').subscribe(console.log);\n// node \nconst emitter = new EventEmitter();\nRx.Observable.fromEvent(emitter, 'test').subscribe(console.log);\nemitter.emit('msg', 1);\n// output: 1\n\n```\n\n\n\n#### 四. 其他\n\n**repeatWhen** ： 相比于repeat可控的重复订阅上游。\n\n```javascript\nRx.Observable.of(1,2,3).repeatWhen((notifier$) => notifier$.delay(1000)).subscribe(console.log)\n// output: 1,2,3  1,2,3\n```\n\n**defer** : 延迟Observable创建，仅在被订阅的时候创建。\n\n```javascript\nconst fetchData = () => Observable.ajax(url);\nconst source$ = Rx.Observable.defer(fetchData);\n// 仅当source被订阅时才发出ajax请求\n```\n\n## 合并类操作符\n\n> 随着需求的复杂化，单一的操作符很难满足需求，因此操作符之间的组合让Rx发挥更大的威力。\n\n| 功能                                     | 操作符                                     |\n| ---------------------------------------- | :----------------------------------------- |\n| 把多个数据流以先到先得的方式合并         | merge， mergeAll                           |\n| 把多个数据流首尾相接的方式合并           | concat，concatAll                          |\n| 把多个数据流以一一对应的方式合并         | zip，zipAll                                |\n| 持续合并多个数据流中最新产生的数据       | combineLatest， combineAll, withLatestFrom |\n| 从多个数据流中选取第一个产生内容的数据流 | race                                       |\n| 在数据流前面添加一个指定数据             | startWith                                  |\n| 只获取多个数据流最后产生的那个数据       | forkJoin                                   |\n| 从高阶数据流中切换数据源                 | switch， exhaust                           |\n\n**concat** ： 首尾相接\n\n```javascript\nRx.Observable.of(1,2,3).concat(Observable.of(4,5,6)).subscribe(console.log)\n// output: 1,2,3,4,5,6\n// 如果Observable对象没有complete则永远不会concat到下一个Observable\n```\n\n**merge** ： 先到先得\n\n```javascript\nconst mouseUp$ = fromEvent(document, 'mouseup');\nconst mouseDown$ = fromEvent(document, 'modedown');\nconst source$ = merge(mouse$, mouseDown$);\n// 鼠标点击则触发订阅的发生\n/*\n*@params Observable\n*@params Observable\n*@params number {可容纳Observable的数量}\n*/\n// 常用作合并异步数据流，http request， dom event等。\n```\n\n**zip** ： 一一对应\n\n```javascript\n//zip 会将上游数据转化为数组形式\n// 只要zip上游任何一个Observable完结， zip就会完结\nObservable.zip(of(1,2,3), of('a', 'b', 'c')).subscribe(console.log);\n// output [1,a], [2,b], [3,c]\n\n```\n\n**combineLatest** ： 合并最后一个数据\n\n```javascript\nconst run1$ = timer(500, 1000);\nconst run2$ = timer(1000, 1000);\ncombineLatest(run1$, run2$).subscribe(console.log);\n// output: [0,1], [1,1]...\n//每隔500毫秒产出一次数据， 最新最近有数据流流过则触发combineLatest的subscribe\n```\n\n**withLatestForm** : 仅根据上游的单一数据源向下游推送数据\n\n```javascript\nconst timer1$ = timer(0, 1000);\nconst timer2$ = timer(500, 1000);\nwithLatestForm(timer1$, timer2$).subscribe(console.log);\n// output: [1, 0], [2, 1]...\n```\n\n**race** :类似Promise.race，仅处理最先到达的Observable\n\n```javascript\nconst timer1$ = timer(0, 1000);\nconst timer2$ = timer(500, 1000);\nrace(timer1$, timer2$).subscribe(console.log);\n// 仅处理由timer$产出的Observable对象\n```\n\n**startWith** ： 在被订阅时先突出一定的数据\n\n```javascript\nconst timer1$ = timer(0, 1000).startWith('start');\nconst timer2$ = timer(500, 1000);\nrace(timer1$, timer2$).subscribe(console.log);\n// output: start 0 1 2\n```\n\n**forkJoin** : 等待所有Observable对象处理完结，选取每个最后一个对象传递给下游。\n\n```javascript\nconst timer1$ = timer(0, 1000).take(1);\nconst timer2$ = timer(500, 1000).take(3);\nforkJoin(timer1$, timer2$).subscribe(console.log);\n//output: 0, 2\n```\n\n**switch**： 总是切换到最新的内部Observable对象获取数据；\n\n```javascript\nconst stream$ = Observable.interval(1000).take(2).map(v => Observable.interval(1500).map(v => `${x},${y}`).take(2));\nconst result = stream$.switch();\n// output: 1,0 1,1\n```\n\n**exhaust** : 耗尽当前Observable之前不会切换到下一个；\n\n```javascript\nconst stream$ = Observable.interval(1000).take(2).map(v => Observable.interval(1500).map(v => `${x},${y}`).take(2));\nconst result = stream$.exhaust();\n// output: 0,0 0,1\n```\n\n\n\n## 辅助操作符\n\n| 功能                                     | 操作符          |\n| ---------------------------------------- | --------------- |\n| 统计数据流中所有数据的个数               | count           |\n| 获得数据流中最大和最小的数据             | Max, min        |\n| 对数据流传输数据进行规约操作             | reduce          |\n| 判断是否所有数据满足判断条件             | every           |\n| 找到的一个满足判定条件的数据             | Find, findIndex |\n| 判断一个数据流是否不包含任何数据         | isEmpty         |\n| 如果一个数据流为空就默认产生一个指定数据 | defaultIfEmpty  |\n\n**count** ： 统计上游Observable对象吐出的所有数据。\n\n```javascript\nObservable.timer(1000).concat(Observable.timer(100)).count();\n//output: 2\nObservable.timer(1000).concat(Observable.timer(100), Observable.timer(100)).count();\n// output: 3\n```\n\n**max， min** ： 获得Observable对象的最大值和最小值。\n\n```javascript\nObservable.of(1,2,3).min((a,b) => a - b)\n// output: 1\n```\n\n**reduce** : 规约统计，类似于JavaScript的数组方法reduce。\n\n```javascript\nRx.Observable.of(1,2,3).reduce((acc, curr) =>acc + curr).subscribe(console.log);\n//output: 6\n```\n\n**every** ：类似数组方法every，当所有的Observable对象满足某个条件时，返回true，否则false；\n\n```javascript\nRx.Observable.of(1,2,3).every((x) => x > 2)\n// output: false\n```\n\n**find，findIndex** ：类似数组方法；\n\n```javascript\nRx.Observable.of(1,2,3).find((x) => x > 2).subscribe(console.log);\n// output: 3\nRx.Observable.of(1,2,3).findIndex((x) => x > 2).subscribe(console.log);\n// output: 2\n```\n\n**isEmpty** ：\n\n```javascript\nRx.Observable.create(observer => {\n    setTimeout(() => observer.complete(1), 1000);\n}).isEmpty().subscribe(console.log);\n// output: 一秒后。。 true\n```\n\n**defaultIfEmpty** ：\n\n```javascript\nRx.Observable.create(observer => {\n    setTimeout(() => observer.complete(1), 1000);\n}).defaultIfEmpty().subscribe(console.log);\n// output: 一秒后。。 null\n```\n\n\n\n## \t过滤数据流\n\n| 功能                               | 操作符                                        |\n| ---------------------------------- | --------------------------------------------- |\n| 过滤掉不满足条件的操作符           | filter                                        |\n| 获得满足条件的第一个数据           | first                                         |\n| 获得满足判断条件的最后一个条件     | last                                          |\n| 从数据流中取出最先出现的若干年数据 | take                                          |\n| 从数据流中取出最后出现的若干数据   | takeLast                                      |\n| 从数据流中选取数据直到某种情况发生 | takeWhile，takeUntil                          |\n| 从数据流中忽略最先出现的若干数据   | skip                                          |\n| 从数据流中忽略数据直到某种情况发生 | skip， skipUntil                              |\n| 基于时间的数据流量筛选             | throttleTime, debounceTime, auditTime         |\n| 基于数据内容的数据流量筛选         | throttle，debounce，audit                     |\n| 基于采样方式的数据流量筛选         | sample，sanpleTime                            |\n| 删除重复的数据                     | distinct                                      |\n| 删除重复的连续数据                 | distinceUntilChanged， distinctUntilKyChanged |\n| 忽略数据流中的所有数据             | ignoreElements                                |\n| 只选取指定出现位置的数据           | elementAt                                     |\n| 判断是否只有一个数据满足判定条件   | single                                        |\n\n**filter** ：类似数组的filter方法，过滤掉不满足条件的数据。\n\n```javascript\nObservable.of(1,2,3).filter(v => v%2 == 0).subscribe(console.log);\n// output: 2\n```\n\n**first** : 满足条件的第一个数据。\n\n```javascript\nObservable.of(1,2,3).first(v => v%3 == 0).subscribe(console.log);\n// output: 3\nObservable.of(1,2,3).first().subscribe(console.log);\n// output: 1\n```\n\n**last** ： 与first相反。\n\n```javascript\nObservable.of(1,2,3).last(v => v%3 == 0).subscribe(console.log);\n// output: 3\nObservable.of(1,2,3).last().subscribe(console.log);\n// output: 3\n```\n\n**take，takeLast，takeWhile， takeUntil** ： 从数据流中取出多个数据，或按照条件中取出多个数据。\n\n```javascript\nObservable.of(1,2,3，4).take(3).subscribe(console.log);\n// output: 1，2，3\nObservable.of(1,2,3).takeLast(3).subscribe(console.log);\n// output: 2,3,4\nObservable.of(1,2,3).takeWhile(x => x < 2).subscribe(console.log);\n// output: 1\nObservable.interval(1000).takeUntil(Observable.interval(2500)).subscribe(console.log);\n// 需要另行订阅高阶Observable\n// output: 0,1\n\n```\n\n**skip ** ：跳过前n个\n\n```javascript\nObservable.of(1,2,3).skip(1).subscribe(console.log);\n// output: 2,3\n```\n\n**skipWhile, skipUntil**\n\n```javascript\nObservable.interval(1000).skipWhile(v => v%2 == 0).subscribe(console.log)\n// output: 1,2,3,4,5,6.....\nObservable.interval(1000).takeUntil(Observable.interval(2500)).subscribe(v => console.log(\"I'm in v\", v))\n// output 1,2,3,4\n// takeUntile skipUntil 行为相反\n```\n\n\n\n**throttleTime** ： 在限定时间范围内，从上游向下游传递数据的个数。\n\n```javascript\nObservable.interval(1000).throttleTime(2000).subscribe(console.log);\n// output: 0, 2, 4, 6.....\n```\n\n**debounceTime** : 让传递给下游数据间隔不能够小雨给定时间。\n\n```javascript\nObservable.interval(1000).filter(v => v % 3 === 0).debounceTime(2000).subscribe(console.log);\n// output: 0, 3, 6.....\n```\n\n**throttle** : 根据duorationSelector触发的时机来传递上游的值。\n\n```javascript\nObservable.interval(1000).throttle(v => {\n          console.log(\"v\", v);\n          return Observable.interval(2000);\n        }).subscribe(console.log)\n// output: v0 0 , v2 2.....\n```\n\n**debounce** : 根据duorationSelector触发的时机来传递上游的值。\n\n```javascript\nObservable.interval(1000).debounce(v => {\n          console.log(\"v\", v);\n          return Observable.interval(2000);\n        }).subscribe(console.log)\n// output: 时间间隔总有数据产生所以永远不会打印数据\n\n```\n\n**auditTime， audit** ： 与throttle类似但是传递的是最后一个数据。\n\n```javascript\nObservable.interval(1000).auditTime(3000).subscribe(console.log);\n// output: 2, 5, 8,10\n```\n\n**sample, sampleTime**: 根据规则在一个范围内取一个数据抛弃其他数据。\n\n```javascript\nObservable.interval(1000).sampleTime(3000).subscribe(console.log);\n// output： 1,4,7,10,13...\n// sample 会在接收到notifer$产生数据后采集最后一个数据传递给下游\n```\n\n**distinct**： 只返回从没有出现过的数据。\n\n```javascript\nObservable.of(0,1,2,3,3,4,5,5,6).distinct().subscribe(console.log);\n// output: 0,1,2,3,4,5,6\n// @params func rule\n// @params Observable flush \n// 理解为去重\n```\n\n**distinctUntilChanged， distinctUntilKeyChanged** ： 删除掉和上一个相同的数据。\n\n```javascript\nObservable.of(0,1,2,3,3,4,5,5,6,1).distinctUntilChanged().subscribe(console.log);\n// output: 0,1,2,3,4,5,6,1\n// @params func rule 判断对象相等的规则\n// 理解为去重\n```\n\n## 转化操作符\n\n| 功能                             | 操作符                                                 |\n| -------------------------------- | ------------------------------------------------------ |\n| 将每个元素映射函数产生新的数据   | map                                                    |\n| 将数据流中每个元素映射为同一数据 | mapTo                                                  |\n| 提取数据流中每个数据的某个字段   | pluck                                                  |\n| 产生高阶ObservabTime,bule对象    | windowTime, windowCount,windowWhen,windowToggle,window |\n| 产生数组构成的数据流             | bufferTime,bufferCount,bufferWhen,bufferToggle,buffer  |\n| 映射产生高阶Observable对象并合并 | concatMap, mergeMap, switchMap, exhaustMap             |\n| 产生规约运算结果组成的数据流     | scan， mergeScan                                       |\n\n**map**\n\n```javascript\nconst func = function(value) {\n    return [value, this.cont]\n}\nconst context = {cont: 'test'};            \nObservable.of(1,2,3).map(func, context).subscribe(console.log);\n// output: [0, 'test'] [1, 'test'] [2, 'test']           \n```\n\n**pluck** : 将上游的数据按字段取出。\n\n```javascript\nObservable.of({name: 'mark'}).pluck('name').subscribe(console.log);\n// output: mark\n```\n\n**windowTime, bufferTime**\n\n```javascript\n      Observable.interval(1000).windowTime(2000).subscribe(v => v.subscribe(console.log));\n// output: 1,2,3,4...\n// windowToggle //以source为数据源，第一个Observable为凭据，进行Toggle操作\n```\n\n\n\n**window， buffer**\n\n```javascript\nconst source$ = Observable.timer(0, 100);\nconst notifer$ = Observable.timer(400, 400);\nsource$.window(notifer$);\n// 每400毫秒产生一个Observable的窗口\n```\n\n**concatMap, mergeMap, switchMap, exhaustMap** \n\n```javascript\nObservable.of(1,2,3).concatMap(v => Observable.interval(100).take(3)).subscribe(console.log);\n// output: 012012012\nObservable.of(1,2,3).mergeMap(v => Observable.interval(100).take(3)).subscribe(console.log);\n// output: 001122\nObservable.of(1,2,3).switchMap(v => Observable.interval(100).take(3)).subscribe(console.log);\n// output: 012\n```\n\n**groupBy**\n\n```javascript\nObservable.of(1,2,3,4).groupBy(v => v %2 === 0).subscribe((v) => v.subscribe(console.log));\n// output: 2 , 4\n// return Observable\n```\n\n**scan** ： 可以理解为可以持续传递数据的reduce\n\n**mergeScan** ： 返回Observable的scan\n\n## 异常处理\n\n| 功能                         | 操作符           |\n| ---------------------------- | ---------------- |\n| 捕获上游的错误               | catch            |\n| 当上游产生错误时重试         | retry，retryWhen |\n| 无论是否出错都要进行一些操作 | finally          |\n\n**catch**\n\n```javascript\nObservable.of(1,2,3,4).map((v) => {\n          if(v == 4) {\n            throw new Error('test');\n          }\n          return v;\n        }).catch((err, caught$) => {\n          console.log(\"test\", err);\n          return caught$;\n        }).take(10).subscribe(console.log);\n// output: 1,2,3,Error: test\n```\n\n**retry, retryWhen**\n\n```javascript\nObservable.of(1,2,3,4).map((v) => {\n          if(v == 4) {\n            throw new Error('test');\n          }\n          return v;\n        }).retry(1).catch((err, caught$) => {\n          return Observable.of(8);\n        }).subscribe(console.log);\n// output: 1,2,3,1,2,3,8\n\nObservable.of(1,2,3,4).map((v) => {\n          if(v == 4) {\n            throw new Error('test');\n          }\n          return v;\n        }).retryWhen(err$ => Observable.interval(10)).catch((err, caught$) => {\n          return Observable.of(8);\n        }).subscribe(console.log);\n// output: 123123123123123123123....\n```\n\n**finally** : 同Javascript的finally方法。\n\n## 多播\n\n| 功能                             | 操作符          |\n| -------------------------------- | --------------- |\n| 灵活选取Subject对象进行多播      | multicast       |\n| 只多播数据流中最后一个数据       | publishLast     |\n| 对数据流中给定数量的数据进行多播 | publishReplay   |\n| 拥有默认数据的多播               | publishBehavior |\n\n> Cold Observable: 每次subscribe都产生一个全新的数据序列的数据流。\n>\n> Hot Observable： 真正的数据源与Observer没有关系，达到统一数据源的效果（fromEvent, fromPromise）。\n\n```javascript\nconst subject = new Subject();\nconst subjectTest = subject.subscribe((v) => console.log('v1',v));\nsubject.next(1);\nsubject.subscribe(v => console.log('v2', v), null, ()=> console.log('v2 complete'));\nsubject.next(2);\nsubjectTest.unsubscribe();\nsubject.complete();\n// output: v1,1 v1,2 v2,2 v2complete\n```\n\n> subject可以有多个数据源，起到的作用就是把多个数据源的内容汇总到一个Observable中去。\n\n**multicast**\n\n```javascript\nconst tick$ = Observable.interval(1000).take(10);\nconst source = tick$.multicast(new Subject()).refCount();\nsource.subscribe(v => console.log(\"v1\", v))\nsource.subscribe(v => console.log(\"v2\", v))\n// output: v1 0, v2 0 v1 1, v2 1....\n// multicast产生的connectableObservable会去subscribe的Observable\nconst tick$ = Observable.interval(1000).take(2);\nconst source = tick$.multicast(new Subject(), (shared) => shared.concat(Observable.of('Done')))\nsource.subscribe(v => console.log(\"I'm in v1\", v))\nsource.subscribe(v => console.log(\"I'm in v\", v))\n// I'm in v1 0\n// I'm in v 0\n// I'm in v1 0\n// I'm in v 0\n// I'm in v1 1\n// I'm in v 1\n// I'm in v1 Done\n//'m in v Done\n\n```\n\n**publish**\n\n```javascript\nconst publish = (selector) => {\n    if(selector){\n        return this.multicast(new Subject(), selector)\n    }\n    return this.multicast(new Subject())\n}\n// publish实际是对multicast的封装\n```\n\n**share**\n\n```javascript\nconst share = () {\n    this.multicast(() => new Subject()).refcount();\n}\n\n// share也是对multicast的封装\n```\n\n**publishLast，AsyncSubject**\n\n```javascript\nfunction publishLast() {\n    return this.multicast.call(this, new AsyncSubject())\n}\n// 由AsyncSubject封装的publishLast方法\n```\n\n**publishReplay， replaySubject**\n\n```javascript\nfunction publishReplay(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY) {\n    return multicast.call(this, new ReplaySubject(bufferSize, windowTime))\n}\n```\n\n**publishBehavior, BehaviorSubject**\n\n```javascript\nfunction publishBehavior(value) {\n    return multicast.call(this, new BehaviorSubject(value));\n}\n```\n\n\n\n## Scheduler\n\n> Scheduler 可以作为创造类和合并类操作符的函数使用，Rx还提供了observeOn和subscribeOn两个操作符，用于在管道任何位置插入Scheduler\n\n```\nconsole.log('before');\nObservable.range(1, 3).subscribeOn(asap).subscribe(console.log)\nconsole.log('after');\n// output: 1,2,3,before, after\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"RxjsSummary","published":1,"updated":"2024-04-10T17:46:25.876Z","_id":"cluvjqddy002h0wpdd9m279mq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Rxjs-总结（一）\"><a href=\"#Rxjs-总结（一）\" class=\"headerlink\" title=\"Rxjs 总结（一）\"></a>Rxjs 总结（一）</h1><p><img src=\"https://cdn-images-1.medium.com/max/2000/1*gD37OB2-PtMqZdk3X1YnEQ.png\" alt=\"rx\"></p>\n<h1 id=\"操作符汇总\"><a href=\"#操作符汇总\" class=\"headerlink\" title=\"操作符汇总\"></a>操作符汇总</h1><blockquote>\n<p>在Rx的世界发生的一切现象都是围绕着数据流展开的，数据流以Observable对象的的形式存在，而对Rx的应用实际就是使用操作符对数据流进行操作。按照使用方式，大体上可以将操作符划分为四类，分别是创建类，合并类，过滤类，转化类操作符。</p>\n</blockquote>\n<h2 id=\"创建类操作符\"><a href=\"#创建类操作符\" class=\"headerlink\" title=\"创建类操作符\"></a>创建类操作符</h2><blockquote>\n<p>顾名思义，创建类数据流的产出是一个Observable对象。</p>\n</blockquote>\n<h4 id=\"一-创建同步数据流\"><a href=\"#一-创建同步数据流\" class=\"headerlink\" title=\"一. 创建同步数据流\"></a>一. 创建同步数据流</h4><p><strong>create</strong> :create的本质是直接调用Observable的构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"property\">create</span> = <span class=\"keyword\">function</span>(<span class=\"params\">subscribe</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(subscribe)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>of</strong>  : 利用of操作符可以轻松产生包含给定数据集合的Observable对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>range</strong> : 返回一定范围上，以第一个参数为起点，持续加一作为数据的Observable对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">100</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 1......100</span></span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">range</span>(<span class=\"number\">1.5</span>,<span class=\"number\">100</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 1.5,2.5,3.5....100.5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>generate</strong>  : 类似于for循环，包含条件判断，递增值设置，返回结果规则，创建一组Observable。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">generate</span>(<span class=\"number\">2</span>,v &lt;= <span class=\"number\">10</span>, <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v+<span class=\"number\">2</span>, <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v**<span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 4, 16, 36, 64, 100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>repeat</strong> ： repeat操作符是一个实例操作符，能够复制上游的Observable中的数据若干次，使用repeat操作符实际上是将Observable订阅了若干次\t。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">repeat</span>(<span class=\"number\">3</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output 1,2,3,1,2,3,1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>empty</strong> : 产生一个空的直接完结的Observable对象。</p>\n<p><strong>throw</strong> ： 产生一个直接抛出错误的Observable对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"keyword\">throw</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Test&#x27;</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;complete&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output complete </span></span><br><span class=\"line\"><span class=\"comment\">// Error: Test</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>never</strong> : 产生一个既不抛错也不完结，也没有什么动作，就那么呆着的一个Observable。。。。。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">generate</span>(<span class=\"number\">2</span>,<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v &lt;= <span class=\"number\">10</span>, <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v+<span class=\"number\">2</span>, <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v**<span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 4, 16, 36, 64, 100</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二-创建异步数据流\"><a href=\"#二-创建异步数据流\" class=\"headerlink\" title=\"二. 创建异步数据流\"></a>二. 创建异步数据流</h4><p><strong>interval</strong> ： 创建出一个根据设置时间递增的Observable对象，interval不会主动停止，需要下游调用complete才会终止。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 1，2，3.....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>timer</strong> ： （时间&#x2F;毫秒数, ？时间间隔）&#x3D;&gt; 若没有第二个参数，timer会在指定时间返回0，若有第二个参数则以第一个参数为起点，第二个参数为时间间隔，持续产生一个递增的Observable对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() + <span class=\"number\">1000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 0</span></span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() + <span class=\"number\">1000</span>, <span class=\"number\">1000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 0, 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三-把其他类型的数据转化为Observable\"><a href=\"#三-把其他类型的数据转化为Observable\" class=\"headerlink\" title=\"三. 把其他类型的数据转化为Observable\"></a>三. 把其他类型的数据转化为Observable</h4><p><strong>from</strong> : 可以把任何js对象转化为Observable对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">from</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1, 2, 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>fromPromise</strong> : 将promise类型的对象转化为Observable 对象；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">fromPromise</span>(<span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;test&quot;</span>)).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"string\">`hello, <span class=\"subst\">$&#123;v&#125;</span>`</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output: hello test</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>fromEvent</strong> : 将DOM事件，或nodejs的event对象转化为Observable；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;app&#x27;</span>), <span class=\"string\">&#x27;click&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// node </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> emitter = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>();</span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">fromEvent</span>(emitter, <span class=\"string\">&#x27;test&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\">emitter.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;msg&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"四-其他\"><a href=\"#四-其他\" class=\"headerlink\" title=\"四. 其他\"></a>四. 其他</h4><p><strong>repeatWhen</strong> ： 相比于repeat可控的重复订阅上游。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">repeatWhen</span>(<span class=\"function\">(<span class=\"params\">notifier$</span>) =&gt;</span> notifier$.<span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3  1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>defer</strong> : 延迟Observable创建，仅在被订阅的时候创建。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchData</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title class_\">Observable</span>.<span class=\"title function_\">ajax</span>(url);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">defer</span>(fetchData);</span><br><span class=\"line\"><span class=\"comment\">// 仅当source被订阅时才发出ajax请求</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并类操作符\"><a href=\"#合并类操作符\" class=\"headerlink\" title=\"合并类操作符\"></a>合并类操作符</h2><blockquote>\n<p>随着需求的复杂化，单一的操作符很难满足需求，因此操作符之间的组合让Rx发挥更大的威力。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th align=\"left\">操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>把多个数据流以先到先得的方式合并</td>\n<td align=\"left\">merge， mergeAll</td>\n</tr>\n<tr>\n<td>把多个数据流首尾相接的方式合并</td>\n<td align=\"left\">concat，concatAll</td>\n</tr>\n<tr>\n<td>把多个数据流以一一对应的方式合并</td>\n<td align=\"left\">zip，zipAll</td>\n</tr>\n<tr>\n<td>持续合并多个数据流中最新产生的数据</td>\n<td align=\"left\">combineLatest， combineAll, withLatestFrom</td>\n</tr>\n<tr>\n<td>从多个数据流中选取第一个产生内容的数据流</td>\n<td align=\"left\">race</td>\n</tr>\n<tr>\n<td>在数据流前面添加一个指定数据</td>\n<td align=\"left\">startWith</td>\n</tr>\n<tr>\n<td>只获取多个数据流最后产生的那个数据</td>\n<td align=\"left\">forkJoin</td>\n</tr>\n<tr>\n<td>从高阶数据流中切换数据源</td>\n<td align=\"left\">switch， exhaust</td>\n</tr>\n</tbody></table>\n<p><strong>concat</strong> ： 首尾相接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">concat</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,4,5,6</span></span><br><span class=\"line\"><span class=\"comment\">// 如果Observable对象没有complete则永远不会concat到下一个Observable</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>merge</strong> ： 先到先得</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mouseUp$ = <span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">document</span>, <span class=\"string\">&#x27;mouseup&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mouseDown$ = <span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">document</span>, <span class=\"string\">&#x27;modedown&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"title function_\">merge</span>(mouse$, mouseDown$);</span><br><span class=\"line\"><span class=\"comment\">// 鼠标点击则触发订阅的发生</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*@params Observable</span></span><br><span class=\"line\"><span class=\"comment\">*@params Observable</span></span><br><span class=\"line\"><span class=\"comment\">*@params number &#123;可容纳Observable的数量&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 常用作合并异步数据流，http request， dom event等。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>zip</strong> ： 一一对应</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//zip 会将上游数据转化为数组形式</span></span><br><span class=\"line\"><span class=\"comment\">// 只要zip上游任何一个Observable完结， zip就会完结</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">zip</span>(<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>), <span class=\"title function_\">of</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output [1,a], [2,b], [3,c]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>combineLatest</strong> ： 合并最后一个数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> run1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> run2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">1000</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"title function_\">combineLatest</span>(run1$, run2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: [0,1], [1,1]...</span></span><br><span class=\"line\"><span class=\"comment\">//每隔500毫秒产出一次数据， 最新最近有数据流流过则触发combineLatest的subscribe</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>withLatestForm</strong> : 仅根据上游的单一数据源向下游推送数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"title function_\">withLatestForm</span>(timer1$, timer2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 0], [2, 1]...</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>race</strong> :类似Promise.race，仅处理最先到达的Observable</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"title function_\">race</span>(timer1$, timer2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// 仅处理由timer$产出的Observable对象</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>startWith</strong> ： 在被订阅时先突出一定的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>).<span class=\"title function_\">startWith</span>(<span class=\"string\">&#x27;start&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"title function_\">race</span>(timer1$, timer2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: start 0 1 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>forkJoin</strong> : 等待所有Observable对象处理完结，选取每个最后一个对象传递给下游。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"title function_\">forkJoin</span>(timer1$, timer2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 0, 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>switch</strong>： 总是切换到最新的内部Observable对象获取数据；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stream$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1500</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>,<span class=\"subst\">$&#123;y&#125;</span>`</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = stream$.<span class=\"title function_\">switch</span>();</span><br><span class=\"line\"><span class=\"comment\">// output: 1,0 1,1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>exhaust</strong> : 耗尽当前Observable之前不会切换到下一个；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stream$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1500</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>,<span class=\"subst\">$&#123;y&#125;</span>`</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = stream$.<span class=\"title function_\">exhaust</span>();</span><br><span class=\"line\"><span class=\"comment\">// output: 0,0 0,1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"辅助操作符\"><a href=\"#辅助操作符\" class=\"headerlink\" title=\"辅助操作符\"></a>辅助操作符</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>统计数据流中所有数据的个数</td>\n<td>count</td>\n</tr>\n<tr>\n<td>获得数据流中最大和最小的数据</td>\n<td>Max, min</td>\n</tr>\n<tr>\n<td>对数据流传输数据进行规约操作</td>\n<td>reduce</td>\n</tr>\n<tr>\n<td>判断是否所有数据满足判断条件</td>\n<td>every</td>\n</tr>\n<tr>\n<td>找到的一个满足判定条件的数据</td>\n<td>Find, findIndex</td>\n</tr>\n<tr>\n<td>判断一个数据流是否不包含任何数据</td>\n<td>isEmpty</td>\n</tr>\n<tr>\n<td>如果一个数据流为空就默认产生一个指定数据</td>\n<td>defaultIfEmpty</td>\n</tr>\n</tbody></table>\n<p><strong>count</strong> ： 统计上游Observable对象吐出的所有数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">concat</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">100</span>)).<span class=\"title function_\">count</span>();</span><br><span class=\"line\"><span class=\"comment\">//output: 2</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">concat</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">100</span>), <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">100</span>)).<span class=\"title function_\">count</span>();</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>max， min</strong> ： 获得Observable对象的最大值和最小值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">min</span>(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a - b)</span><br><span class=\"line\"><span class=\"comment\">// output: 1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>reduce</strong> : 规约统计，类似于JavaScript的数组方法reduce。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, curr</span>) =&gt;</span>acc + curr).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>every</strong> ：类似数组方法every，当所有的Observable对象满足某个条件时，返回true，否则false；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>find，findIndex</strong> ：类似数组方法；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x &gt; <span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x &gt; <span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>isEmpty</strong> ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">create</span>(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> observer.<span class=\"title function_\">complete</span>(<span class=\"number\">1</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">isEmpty</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 一秒后。。 true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>defaultIfEmpty</strong> ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">create</span>(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> observer.<span class=\"title function_\">complete</span>(<span class=\"number\">1</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">defaultIfEmpty</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 一秒后。。 null</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"过滤数据流\"><a href=\"#过滤数据流\" class=\"headerlink\" title=\"过滤数据流\"></a>过滤数据流</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>过滤掉不满足条件的操作符</td>\n<td>filter</td>\n</tr>\n<tr>\n<td>获得满足条件的第一个数据</td>\n<td>first</td>\n</tr>\n<tr>\n<td>获得满足判断条件的最后一个条件</td>\n<td>last</td>\n</tr>\n<tr>\n<td>从数据流中取出最先出现的若干年数据</td>\n<td>take</td>\n</tr>\n<tr>\n<td>从数据流中取出最后出现的若干数据</td>\n<td>takeLast</td>\n</tr>\n<tr>\n<td>从数据流中选取数据直到某种情况发生</td>\n<td>takeWhile，takeUntil</td>\n</tr>\n<tr>\n<td>从数据流中忽略最先出现的若干数据</td>\n<td>skip</td>\n</tr>\n<tr>\n<td>从数据流中忽略数据直到某种情况发生</td>\n<td>skip， skipUntil</td>\n</tr>\n<tr>\n<td>基于时间的数据流量筛选</td>\n<td>throttleTime, debounceTime, auditTime</td>\n</tr>\n<tr>\n<td>基于数据内容的数据流量筛选</td>\n<td>throttle，debounce，audit</td>\n</tr>\n<tr>\n<td>基于采样方式的数据流量筛选</td>\n<td>sample，sanpleTime</td>\n</tr>\n<tr>\n<td>删除重复的数据</td>\n<td>distinct</td>\n</tr>\n<tr>\n<td>删除重复的连续数据</td>\n<td>distinceUntilChanged， distinctUntilKyChanged</td>\n</tr>\n<tr>\n<td>忽略数据流中的所有数据</td>\n<td>ignoreElements</td>\n</tr>\n<tr>\n<td>只选取指定出现位置的数据</td>\n<td>elementAt</td>\n</tr>\n<tr>\n<td>判断是否只有一个数据满足判定条件</td>\n<td>single</td>\n</tr>\n</tbody></table>\n<p><strong>filter</strong> ：类似数组的filter方法，过滤掉不满足条件的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v%<span class=\"number\">2</span> == <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>first</strong> : 满足条件的第一个数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">first</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v%<span class=\"number\">3</span> == <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">first</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>last</strong> ： 与first相反。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">last</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v%<span class=\"number\">3</span> == <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">last</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>take，takeLast，takeWhile， takeUntil</strong> ： 从数据流中取出多个数据，或按照条件中取出多个数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>，<span class=\"number\">4</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1，2，3</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">takeLast</span>(<span class=\"number\">3</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2,3,4</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">takeWhile</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x &lt; <span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">takeUntil</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">2500</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// 需要另行订阅高阶Observable</span></span><br><span class=\"line\"><span class=\"comment\">// output: 0,1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>**skip ** ：跳过前n个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">skip</span>(<span class=\"number\">1</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2,3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>skipWhile, skipUntil</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">skipWhile</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v%<span class=\"number\">2</span> == <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,4,5,6.....</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">takeUntil</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">2500</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in v&quot;</span>, v))</span><br><span class=\"line\"><span class=\"comment\">// output 1,2,3,4</span></span><br><span class=\"line\"><span class=\"comment\">// takeUntile skipUntil 行为相反</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>throttleTime</strong> ： 在限定时间范围内，从上游向下游传递数据的个数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">throttleTime</span>(<span class=\"number\">2000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 0, 2, 4, 6.....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>debounceTime</strong> : 让传递给下游数据间隔不能够小雨给定时间。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v % <span class=\"number\">3</span> === <span class=\"number\">0</span>).<span class=\"title function_\">debounceTime</span>(<span class=\"number\">2000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 0, 3, 6.....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>throttle</strong> : 根据duorationSelector触发的时机来传递上游的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">throttle</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;v&quot;</span>, v);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: v0 0 , v2 2.....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>debounce</strong> : 根据duorationSelector触发的时机来传递上游的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">debounce</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;v&quot;</span>, v);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: 时间间隔总有数据产生所以永远不会打印数据</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>auditTime， audit</strong> ： 与throttle类似但是传递的是最后一个数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">auditTime</span>(<span class=\"number\">3000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2, 5, 8,10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>sample, sampleTime</strong>: 根据规则在一个范围内取一个数据抛弃其他数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">sampleTime</span>(<span class=\"number\">3000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output： 1,4,7,10,13...</span></span><br><span class=\"line\"><span class=\"comment\">// sample 会在接收到notifer$产生数据后采集最后一个数据传递给下游</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>distinct</strong>： 只返回从没有出现过的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>).<span class=\"title function_\">distinct</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 0,1,2,3,4,5,6</span></span><br><span class=\"line\"><span class=\"comment\">// @params func rule</span></span><br><span class=\"line\"><span class=\"comment\">// @params Observable flush </span></span><br><span class=\"line\"><span class=\"comment\">// 理解为去重</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>distinctUntilChanged， distinctUntilKeyChanged</strong> ： 删除掉和上一个相同的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>).<span class=\"title function_\">distinctUntilChanged</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 0,1,2,3,4,5,6,1</span></span><br><span class=\"line\"><span class=\"comment\">// @params func rule 判断对象相等的规则</span></span><br><span class=\"line\"><span class=\"comment\">// 理解为去重</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转化操作符\"><a href=\"#转化操作符\" class=\"headerlink\" title=\"转化操作符\"></a>转化操作符</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>将每个元素映射函数产生新的数据</td>\n<td>map</td>\n</tr>\n<tr>\n<td>将数据流中每个元素映射为同一数据</td>\n<td>mapTo</td>\n</tr>\n<tr>\n<td>提取数据流中每个数据的某个字段</td>\n<td>pluck</td>\n</tr>\n<tr>\n<td>产生高阶ObservabTime,bule对象</td>\n<td>windowTime, windowCount,windowWhen,windowToggle,window</td>\n</tr>\n<tr>\n<td>产生数组构成的数据流</td>\n<td>bufferTime,bufferCount,bufferWhen,bufferToggle,buffer</td>\n</tr>\n<tr>\n<td>映射产生高阶Observable对象并合并</td>\n<td>concatMap, mergeMap, switchMap, exhaustMap</td>\n</tr>\n<tr>\n<td>产生规约运算结果组成的数据流</td>\n<td>scan， mergeScan</td>\n</tr>\n</tbody></table>\n<p><strong>map</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [value, <span class=\"variable language_\">this</span>.<span class=\"property\">cont</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = &#123;<span class=\"attr\">cont</span>: <span class=\"string\">&#x27;test&#x27;</span>&#125;;            </span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">map</span>(func, context).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: [0, &#x27;test&#x27;] [1, &#x27;test&#x27;] [2, &#x27;test&#x27;]           </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>pluck</strong> : 将上游的数据按字段取出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;mark&#x27;</span>&#125;).<span class=\"title function_\">pluck</span>(<span class=\"string\">&#x27;name&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: mark</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>windowTime, bufferTime</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">windowTime</span>(<span class=\"number\">2000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v.<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>));</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,4...</span></span><br><span class=\"line\"><span class=\"comment\">// windowToggle //以source为数据源，第一个Observable为凭据，进行Toggle操作</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>window， buffer</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> notifer$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">400</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">source$.<span class=\"title function_\">window</span>(notifer$);</span><br><span class=\"line\"><span class=\"comment\">// 每400毫秒产生一个Observable的窗口</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>concatMap, mergeMap, switchMap, exhaustMap</strong> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">concatMap</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">100</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 012012012</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">mergeMap</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">100</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 001122</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">switchMap</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">100</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 012</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>groupBy</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"title function_\">groupBy</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v %<span class=\"number\">2</span> === <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>));</span><br><span class=\"line\"><span class=\"comment\">// output: 2 , 4</span></span><br><span class=\"line\"><span class=\"comment\">// return Observable</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>scan</strong> ： 可以理解为可以持续传递数据的reduce</p>\n<p><strong>mergeScan</strong> ： 返回Observable的scan</p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>捕获上游的错误</td>\n<td>catch</td>\n</tr>\n<tr>\n<td>当上游产生错误时重试</td>\n<td>retry，retryWhen</td>\n</tr>\n<tr>\n<td>无论是否出错都要进行一些操作</td>\n<td>finally</td>\n</tr>\n</tbody></table>\n<p><strong>catch</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(v == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err, caught$</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test&quot;</span>, err);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> caught$;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">take</span>(<span class=\"number\">10</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,Error: test</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>retry, retryWhen</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(v == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">retry</span>(<span class=\"number\">1</span>).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err, caught$</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,1,2,3,8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(v == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">retryWhen</span>(err$ =&gt; <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">10</span>)).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err, caught$</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 123123123123123123123....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>finally</strong> : 同Javascript的finally方法。</p>\n<h2 id=\"多播\"><a href=\"#多播\" class=\"headerlink\" title=\"多播\"></a>多播</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>灵活选取Subject对象进行多播</td>\n<td>multicast</td>\n</tr>\n<tr>\n<td>只多播数据流中最后一个数据</td>\n<td>publishLast</td>\n</tr>\n<tr>\n<td>对数据流中给定数量的数据进行多播</td>\n<td>publishReplay</td>\n</tr>\n<tr>\n<td>拥有默认数据的多播</td>\n<td>publishBehavior</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Cold Observable: 每次subscribe都产生一个全新的数据序列的数据流。</p>\n<p>Hot Observable： 真正的数据源与Observer没有关系，达到统一数据源的效果（fromEvent, fromPromise）。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> subjectTest = subject.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;v1&#x27;</span>,v));</span><br><span class=\"line\">subject.<span class=\"title function_\">next</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">subject.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;v2&#x27;</span>, v), <span class=\"literal\">null</span>, <span class=\"function\">()=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;v2 complete&#x27;</span>));</span><br><span class=\"line\">subject.<span class=\"title function_\">next</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">subjectTest.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">subject.<span class=\"title function_\">complete</span>();</span><br><span class=\"line\"><span class=\"comment\">// output: v1,1 v1,2 v2,2 v2complete</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>subject可以有多个数据源，起到的作用就是把多个数据源的内容汇总到一个Observable中去。</p>\n</blockquote>\n<p><strong>multicast</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tick$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = tick$.<span class=\"title function_\">multicast</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>()).<span class=\"title function_\">refCount</span>();</span><br><span class=\"line\">source.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;v1&quot;</span>, v))</span><br><span class=\"line\">source.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;v2&quot;</span>, v))</span><br><span class=\"line\"><span class=\"comment\">// output: v1 0, v2 0 v1 1, v2 1....</span></span><br><span class=\"line\"><span class=\"comment\">// multicast产生的connectableObservable会去subscribe的Observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> tick$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = tick$.<span class=\"title function_\">multicast</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>(), <span class=\"function\">(<span class=\"params\">shared</span>) =&gt;</span> shared.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"string\">&#x27;Done&#x27;</span>)))</span><br><span class=\"line\">source.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in v1&quot;</span>, v))</span><br><span class=\"line\">source.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in v&quot;</span>, v))</span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v1 0</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v 0</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v1 0</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v 0</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v1 1</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v 1</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v1 Done</span></span><br><span class=\"line\"><span class=\"comment\">//&#x27;m in v Done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>publish</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">publish</span> = (<span class=\"params\">selector</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(selector)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">multicast</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>(), selector)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">multicast</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// publish实际是对multicast的封装</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>share</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> share = () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">multicast</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>()).<span class=\"title function_\">refcount</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// share也是对multicast的封装</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>publishLast，AsyncSubject</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">publishLast</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">multicast</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSubject</span>())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 由AsyncSubject封装的publishLast方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>publishReplay， replaySubject</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">publishReplay</span>(<span class=\"params\">bufferSize = <span class=\"built_in\">Number</span>.POSITIVE_INFINITY, windowTime = <span class=\"built_in\">Number</span>.POSITIVE_INFINITY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> multicast.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">ReplaySubject</span>(bufferSize, windowTime))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>publishBehavior, BehaviorSubject</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">publishBehavior</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> multicast.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>(value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><blockquote>\n<p>Scheduler 可以作为创造类和合并类操作符的函数使用，Rx还提供了observeOn和subscribeOn两个操作符，用于在管道任何位置插入Scheduler</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#x27;before&#x27;);</span><br><span class=\"line\">Observable.range(1, 3).subscribeOn(asap).subscribe(console.log)</span><br><span class=\"line\">console.log(&#x27;after&#x27;);</span><br><span class=\"line\">// output: 1,2,3,before, after</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Rxjs-总结（一）\"><a href=\"#Rxjs-总结（一）\" class=\"headerlink\" title=\"Rxjs 总结（一）\"></a>Rxjs 总结（一）</h1><p><img src=\"https://cdn-images-1.medium.com/max/2000/1*gD37OB2-PtMqZdk3X1YnEQ.png\" alt=\"rx\"></p>\n<h1 id=\"操作符汇总\"><a href=\"#操作符汇总\" class=\"headerlink\" title=\"操作符汇总\"></a>操作符汇总</h1><blockquote>\n<p>在Rx的世界发生的一切现象都是围绕着数据流展开的，数据流以Observable对象的的形式存在，而对Rx的应用实际就是使用操作符对数据流进行操作。按照使用方式，大体上可以将操作符划分为四类，分别是创建类，合并类，过滤类，转化类操作符。</p>\n</blockquote>\n<h2 id=\"创建类操作符\"><a href=\"#创建类操作符\" class=\"headerlink\" title=\"创建类操作符\"></a>创建类操作符</h2><blockquote>\n<p>顾名思义，创建类数据流的产出是一个Observable对象。</p>\n</blockquote>\n<h4 id=\"一-创建同步数据流\"><a href=\"#一-创建同步数据流\" class=\"headerlink\" title=\"一. 创建同步数据流\"></a>一. 创建同步数据流</h4><p><strong>create</strong> :create的本质是直接调用Observable的构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"property\">create</span> = <span class=\"keyword\">function</span>(<span class=\"params\">subscribe</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(subscribe)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>of</strong>  : 利用of操作符可以轻松产生包含给定数据集合的Observable对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>range</strong> : 返回一定范围上，以第一个参数为起点，持续加一作为数据的Observable对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">100</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 1......100</span></span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">range</span>(<span class=\"number\">1.5</span>,<span class=\"number\">100</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 1.5,2.5,3.5....100.5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>generate</strong>  : 类似于for循环，包含条件判断，递增值设置，返回结果规则，创建一组Observable。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">generate</span>(<span class=\"number\">2</span>,v &lt;= <span class=\"number\">10</span>, <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v+<span class=\"number\">2</span>, <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v**<span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 4, 16, 36, 64, 100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>repeat</strong> ： repeat操作符是一个实例操作符，能够复制上游的Observable中的数据若干次，使用repeat操作符实际上是将Observable订阅了若干次\t。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">repeat</span>(<span class=\"number\">3</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output 1,2,3,1,2,3,1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>empty</strong> : 产生一个空的直接完结的Observable对象。</p>\n<p><strong>throw</strong> ： 产生一个直接抛出错误的Observable对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"keyword\">throw</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Test&#x27;</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;complete&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output complete </span></span><br><span class=\"line\"><span class=\"comment\">// Error: Test</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>never</strong> : 产生一个既不抛错也不完结，也没有什么动作，就那么呆着的一个Observable。。。。。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">generate</span>(<span class=\"number\">2</span>,<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v &lt;= <span class=\"number\">10</span>, <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v+<span class=\"number\">2</span>, <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v**<span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 4, 16, 36, 64, 100</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二-创建异步数据流\"><a href=\"#二-创建异步数据流\" class=\"headerlink\" title=\"二. 创建异步数据流\"></a>二. 创建异步数据流</h4><p><strong>interval</strong> ： 创建出一个根据设置时间递增的Observable对象，interval不会主动停止，需要下游调用complete才会终止。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 1，2，3.....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>timer</strong> ： （时间&#x2F;毫秒数, ？时间间隔）&#x3D;&gt; 若没有第二个参数，timer会在指定时间返回0，若有第二个参数则以第一个参数为起点，第二个参数为时间间隔，持续产生一个递增的Observable对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() + <span class=\"number\">1000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 0</span></span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() + <span class=\"number\">1000</span>, <span class=\"number\">1000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output 0, 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三-把其他类型的数据转化为Observable\"><a href=\"#三-把其他类型的数据转化为Observable\" class=\"headerlink\" title=\"三. 把其他类型的数据转化为Observable\"></a>三. 把其他类型的数据转化为Observable</h4><p><strong>from</strong> : 可以把任何js对象转化为Observable对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">from</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1, 2, 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>fromPromise</strong> : 将promise类型的对象转化为Observable 对象；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">fromPromise</span>(<span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;test&quot;</span>)).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"string\">`hello, <span class=\"subst\">$&#123;v&#125;</span>`</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output: hello test</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>fromEvent</strong> : 将DOM事件，或nodejs的event对象转化为Observable；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;app&#x27;</span>), <span class=\"string\">&#x27;click&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// node </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> emitter = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>();</span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">fromEvent</span>(emitter, <span class=\"string\">&#x27;test&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\">emitter.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;msg&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"四-其他\"><a href=\"#四-其他\" class=\"headerlink\" title=\"四. 其他\"></a>四. 其他</h4><p><strong>repeatWhen</strong> ： 相比于repeat可控的重复订阅上游。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">repeatWhen</span>(<span class=\"function\">(<span class=\"params\">notifier$</span>) =&gt;</span> notifier$.<span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3  1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>defer</strong> : 延迟Observable创建，仅在被订阅的时候创建。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchData</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title class_\">Observable</span>.<span class=\"title function_\">ajax</span>(url);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">defer</span>(fetchData);</span><br><span class=\"line\"><span class=\"comment\">// 仅当source被订阅时才发出ajax请求</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并类操作符\"><a href=\"#合并类操作符\" class=\"headerlink\" title=\"合并类操作符\"></a>合并类操作符</h2><blockquote>\n<p>随着需求的复杂化，单一的操作符很难满足需求，因此操作符之间的组合让Rx发挥更大的威力。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th align=\"left\">操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>把多个数据流以先到先得的方式合并</td>\n<td align=\"left\">merge， mergeAll</td>\n</tr>\n<tr>\n<td>把多个数据流首尾相接的方式合并</td>\n<td align=\"left\">concat，concatAll</td>\n</tr>\n<tr>\n<td>把多个数据流以一一对应的方式合并</td>\n<td align=\"left\">zip，zipAll</td>\n</tr>\n<tr>\n<td>持续合并多个数据流中最新产生的数据</td>\n<td align=\"left\">combineLatest， combineAll, withLatestFrom</td>\n</tr>\n<tr>\n<td>从多个数据流中选取第一个产生内容的数据流</td>\n<td align=\"left\">race</td>\n</tr>\n<tr>\n<td>在数据流前面添加一个指定数据</td>\n<td align=\"left\">startWith</td>\n</tr>\n<tr>\n<td>只获取多个数据流最后产生的那个数据</td>\n<td align=\"left\">forkJoin</td>\n</tr>\n<tr>\n<td>从高阶数据流中切换数据源</td>\n<td align=\"left\">switch， exhaust</td>\n</tr>\n</tbody></table>\n<p><strong>concat</strong> ： 首尾相接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">concat</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,4,5,6</span></span><br><span class=\"line\"><span class=\"comment\">// 如果Observable对象没有complete则永远不会concat到下一个Observable</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>merge</strong> ： 先到先得</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mouseUp$ = <span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">document</span>, <span class=\"string\">&#x27;mouseup&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mouseDown$ = <span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">document</span>, <span class=\"string\">&#x27;modedown&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"title function_\">merge</span>(mouse$, mouseDown$);</span><br><span class=\"line\"><span class=\"comment\">// 鼠标点击则触发订阅的发生</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*@params Observable</span></span><br><span class=\"line\"><span class=\"comment\">*@params Observable</span></span><br><span class=\"line\"><span class=\"comment\">*@params number &#123;可容纳Observable的数量&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 常用作合并异步数据流，http request， dom event等。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>zip</strong> ： 一一对应</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//zip 会将上游数据转化为数组形式</span></span><br><span class=\"line\"><span class=\"comment\">// 只要zip上游任何一个Observable完结， zip就会完结</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">zip</span>(<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>), <span class=\"title function_\">of</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output [1,a], [2,b], [3,c]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>combineLatest</strong> ： 合并最后一个数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> run1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> run2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">1000</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"title function_\">combineLatest</span>(run1$, run2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: [0,1], [1,1]...</span></span><br><span class=\"line\"><span class=\"comment\">//每隔500毫秒产出一次数据， 最新最近有数据流流过则触发combineLatest的subscribe</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>withLatestForm</strong> : 仅根据上游的单一数据源向下游推送数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"title function_\">withLatestForm</span>(timer1$, timer2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: [1, 0], [2, 1]...</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>race</strong> :类似Promise.race，仅处理最先到达的Observable</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"title function_\">race</span>(timer1$, timer2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// 仅处理由timer$产出的Observable对象</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>startWith</strong> ： 在被订阅时先突出一定的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>).<span class=\"title function_\">startWith</span>(<span class=\"string\">&#x27;start&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"title function_\">race</span>(timer1$, timer2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: start 0 1 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>forkJoin</strong> : 等待所有Observable对象处理完结，选取每个最后一个对象传递给下游。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer1$ = <span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> timer2$ = <span class=\"title function_\">timer</span>(<span class=\"number\">500</span>, <span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"title function_\">forkJoin</span>(timer1$, timer2$).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 0, 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>switch</strong>： 总是切换到最新的内部Observable对象获取数据；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stream$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1500</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>,<span class=\"subst\">$&#123;y&#125;</span>`</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = stream$.<span class=\"title function_\">switch</span>();</span><br><span class=\"line\"><span class=\"comment\">// output: 1,0 1,1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>exhaust</strong> : 耗尽当前Observable之前不会切换到下一个；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stream$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1500</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>,<span class=\"subst\">$&#123;y&#125;</span>`</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = stream$.<span class=\"title function_\">exhaust</span>();</span><br><span class=\"line\"><span class=\"comment\">// output: 0,0 0,1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"辅助操作符\"><a href=\"#辅助操作符\" class=\"headerlink\" title=\"辅助操作符\"></a>辅助操作符</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>统计数据流中所有数据的个数</td>\n<td>count</td>\n</tr>\n<tr>\n<td>获得数据流中最大和最小的数据</td>\n<td>Max, min</td>\n</tr>\n<tr>\n<td>对数据流传输数据进行规约操作</td>\n<td>reduce</td>\n</tr>\n<tr>\n<td>判断是否所有数据满足判断条件</td>\n<td>every</td>\n</tr>\n<tr>\n<td>找到的一个满足判定条件的数据</td>\n<td>Find, findIndex</td>\n</tr>\n<tr>\n<td>判断一个数据流是否不包含任何数据</td>\n<td>isEmpty</td>\n</tr>\n<tr>\n<td>如果一个数据流为空就默认产生一个指定数据</td>\n<td>defaultIfEmpty</td>\n</tr>\n</tbody></table>\n<p><strong>count</strong> ： 统计上游Observable对象吐出的所有数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">concat</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">100</span>)).<span class=\"title function_\">count</span>();</span><br><span class=\"line\"><span class=\"comment\">//output: 2</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">concat</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">100</span>), <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">100</span>)).<span class=\"title function_\">count</span>();</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>max， min</strong> ： 获得Observable对象的最大值和最小值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">min</span>(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a - b)</span><br><span class=\"line\"><span class=\"comment\">// output: 1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>reduce</strong> : 规约统计，类似于JavaScript的数组方法reduce。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, curr</span>) =&gt;</span>acc + curr).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">//output: 6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>every</strong> ：类似数组方法every，当所有的Observable对象满足某个条件时，返回true，否则false；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>find，findIndex</strong> ：类似数组方法；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x &gt; <span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x &gt; <span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>isEmpty</strong> ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">create</span>(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> observer.<span class=\"title function_\">complete</span>(<span class=\"number\">1</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">isEmpty</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 一秒后。。 true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>defaultIfEmpty</strong> ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">create</span>(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> observer.<span class=\"title function_\">complete</span>(<span class=\"number\">1</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">defaultIfEmpty</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 一秒后。。 null</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"过滤数据流\"><a href=\"#过滤数据流\" class=\"headerlink\" title=\"过滤数据流\"></a>过滤数据流</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>过滤掉不满足条件的操作符</td>\n<td>filter</td>\n</tr>\n<tr>\n<td>获得满足条件的第一个数据</td>\n<td>first</td>\n</tr>\n<tr>\n<td>获得满足判断条件的最后一个条件</td>\n<td>last</td>\n</tr>\n<tr>\n<td>从数据流中取出最先出现的若干年数据</td>\n<td>take</td>\n</tr>\n<tr>\n<td>从数据流中取出最后出现的若干数据</td>\n<td>takeLast</td>\n</tr>\n<tr>\n<td>从数据流中选取数据直到某种情况发生</td>\n<td>takeWhile，takeUntil</td>\n</tr>\n<tr>\n<td>从数据流中忽略最先出现的若干数据</td>\n<td>skip</td>\n</tr>\n<tr>\n<td>从数据流中忽略数据直到某种情况发生</td>\n<td>skip， skipUntil</td>\n</tr>\n<tr>\n<td>基于时间的数据流量筛选</td>\n<td>throttleTime, debounceTime, auditTime</td>\n</tr>\n<tr>\n<td>基于数据内容的数据流量筛选</td>\n<td>throttle，debounce，audit</td>\n</tr>\n<tr>\n<td>基于采样方式的数据流量筛选</td>\n<td>sample，sanpleTime</td>\n</tr>\n<tr>\n<td>删除重复的数据</td>\n<td>distinct</td>\n</tr>\n<tr>\n<td>删除重复的连续数据</td>\n<td>distinceUntilChanged， distinctUntilKyChanged</td>\n</tr>\n<tr>\n<td>忽略数据流中的所有数据</td>\n<td>ignoreElements</td>\n</tr>\n<tr>\n<td>只选取指定出现位置的数据</td>\n<td>elementAt</td>\n</tr>\n<tr>\n<td>判断是否只有一个数据满足判定条件</td>\n<td>single</td>\n</tr>\n</tbody></table>\n<p><strong>filter</strong> ：类似数组的filter方法，过滤掉不满足条件的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v%<span class=\"number\">2</span> == <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>first</strong> : 满足条件的第一个数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">first</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v%<span class=\"number\">3</span> == <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">first</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>last</strong> ： 与first相反。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">last</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v%<span class=\"number\">3</span> == <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">last</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>take，takeLast，takeWhile， takeUntil</strong> ： 从数据流中取出多个数据，或按照条件中取出多个数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>，<span class=\"number\">4</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1，2，3</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">takeLast</span>(<span class=\"number\">3</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2,3,4</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">takeWhile</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x &lt; <span class=\"number\">2</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">takeUntil</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">2500</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// 需要另行订阅高阶Observable</span></span><br><span class=\"line\"><span class=\"comment\">// output: 0,1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>**skip ** ：跳过前n个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">skip</span>(<span class=\"number\">1</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2,3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>skipWhile, skipUntil</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">skipWhile</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v%<span class=\"number\">2</span> == <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,4,5,6.....</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">takeUntil</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">2500</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in v&quot;</span>, v))</span><br><span class=\"line\"><span class=\"comment\">// output 1,2,3,4</span></span><br><span class=\"line\"><span class=\"comment\">// takeUntile skipUntil 行为相反</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>throttleTime</strong> ： 在限定时间范围内，从上游向下游传递数据的个数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">throttleTime</span>(<span class=\"number\">2000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 0, 2, 4, 6.....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>debounceTime</strong> : 让传递给下游数据间隔不能够小雨给定时间。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v % <span class=\"number\">3</span> === <span class=\"number\">0</span>).<span class=\"title function_\">debounceTime</span>(<span class=\"number\">2000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 0, 3, 6.....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>throttle</strong> : 根据duorationSelector触发的时机来传递上游的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">throttle</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;v&quot;</span>, v);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: v0 0 , v2 2.....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>debounce</strong> : 根据duorationSelector触发的时机来传递上游的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">debounce</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;v&quot;</span>, v);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: 时间间隔总有数据产生所以永远不会打印数据</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>auditTime， audit</strong> ： 与throttle类似但是传递的是最后一个数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">auditTime</span>(<span class=\"number\">3000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 2, 5, 8,10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>sample, sampleTime</strong>: 根据规则在一个范围内取一个数据抛弃其他数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">sampleTime</span>(<span class=\"number\">3000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output： 1,4,7,10,13...</span></span><br><span class=\"line\"><span class=\"comment\">// sample 会在接收到notifer$产生数据后采集最后一个数据传递给下游</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>distinct</strong>： 只返回从没有出现过的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>).<span class=\"title function_\">distinct</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 0,1,2,3,4,5,6</span></span><br><span class=\"line\"><span class=\"comment\">// @params func rule</span></span><br><span class=\"line\"><span class=\"comment\">// @params Observable flush </span></span><br><span class=\"line\"><span class=\"comment\">// 理解为去重</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>distinctUntilChanged， distinctUntilKeyChanged</strong> ： 删除掉和上一个相同的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>).<span class=\"title function_\">distinctUntilChanged</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 0,1,2,3,4,5,6,1</span></span><br><span class=\"line\"><span class=\"comment\">// @params func rule 判断对象相等的规则</span></span><br><span class=\"line\"><span class=\"comment\">// 理解为去重</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转化操作符\"><a href=\"#转化操作符\" class=\"headerlink\" title=\"转化操作符\"></a>转化操作符</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>将每个元素映射函数产生新的数据</td>\n<td>map</td>\n</tr>\n<tr>\n<td>将数据流中每个元素映射为同一数据</td>\n<td>mapTo</td>\n</tr>\n<tr>\n<td>提取数据流中每个数据的某个字段</td>\n<td>pluck</td>\n</tr>\n<tr>\n<td>产生高阶ObservabTime,bule对象</td>\n<td>windowTime, windowCount,windowWhen,windowToggle,window</td>\n</tr>\n<tr>\n<td>产生数组构成的数据流</td>\n<td>bufferTime,bufferCount,bufferWhen,bufferToggle,buffer</td>\n</tr>\n<tr>\n<td>映射产生高阶Observable对象并合并</td>\n<td>concatMap, mergeMap, switchMap, exhaustMap</td>\n</tr>\n<tr>\n<td>产生规约运算结果组成的数据流</td>\n<td>scan， mergeScan</td>\n</tr>\n</tbody></table>\n<p><strong>map</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [value, <span class=\"variable language_\">this</span>.<span class=\"property\">cont</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = &#123;<span class=\"attr\">cont</span>: <span class=\"string\">&#x27;test&#x27;</span>&#125;;            </span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">map</span>(func, context).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: [0, &#x27;test&#x27;] [1, &#x27;test&#x27;] [2, &#x27;test&#x27;]           </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>pluck</strong> : 将上游的数据按字段取出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;mark&#x27;</span>&#125;).<span class=\"title function_\">pluck</span>(<span class=\"string\">&#x27;name&#x27;</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: mark</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>windowTime, bufferTime</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">windowTime</span>(<span class=\"number\">2000</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v.<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>));</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,4...</span></span><br><span class=\"line\"><span class=\"comment\">// windowToggle //以source为数据源，第一个Observable为凭据，进行Toggle操作</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>window， buffer</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> notifer$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">timer</span>(<span class=\"number\">400</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">source$.<span class=\"title function_\">window</span>(notifer$);</span><br><span class=\"line\"><span class=\"comment\">// 每400毫秒产生一个Observable的窗口</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>concatMap, mergeMap, switchMap, exhaustMap</strong> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">concatMap</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">100</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 012012012</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">mergeMap</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">100</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 001122</span></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">switchMap</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">100</span>).<span class=\"title function_\">take</span>(<span class=\"number\">3</span>)).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 012</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>groupBy</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"title function_\">groupBy</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v %<span class=\"number\">2</span> === <span class=\"number\">0</span>).<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>));</span><br><span class=\"line\"><span class=\"comment\">// output: 2 , 4</span></span><br><span class=\"line\"><span class=\"comment\">// return Observable</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>scan</strong> ： 可以理解为可以持续传递数据的reduce</p>\n<p><strong>mergeScan</strong> ： 返回Observable的scan</p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>捕获上游的错误</td>\n<td>catch</td>\n</tr>\n<tr>\n<td>当上游产生错误时重试</td>\n<td>retry，retryWhen</td>\n</tr>\n<tr>\n<td>无论是否出错都要进行一些操作</td>\n<td>finally</td>\n</tr>\n</tbody></table>\n<p><strong>catch</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(v == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err, caught$</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test&quot;</span>, err);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> caught$;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">take</span>(<span class=\"number\">10</span>).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,Error: test</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>retry, retryWhen</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(v == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">retry</span>(<span class=\"number\">1</span>).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err, caught$</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 1,2,3,1,2,3,8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(v == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">retryWhen</span>(err$ =&gt; <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">10</span>)).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err, caught$</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// output: 123123123123123123123....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>finally</strong> : 同Javascript的finally方法。</p>\n<h2 id=\"多播\"><a href=\"#多播\" class=\"headerlink\" title=\"多播\"></a>多播</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>灵活选取Subject对象进行多播</td>\n<td>multicast</td>\n</tr>\n<tr>\n<td>只多播数据流中最后一个数据</td>\n<td>publishLast</td>\n</tr>\n<tr>\n<td>对数据流中给定数量的数据进行多播</td>\n<td>publishReplay</td>\n</tr>\n<tr>\n<td>拥有默认数据的多播</td>\n<td>publishBehavior</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Cold Observable: 每次subscribe都产生一个全新的数据序列的数据流。</p>\n<p>Hot Observable： 真正的数据源与Observer没有关系，达到统一数据源的效果（fromEvent, fromPromise）。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> subjectTest = subject.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;v1&#x27;</span>,v));</span><br><span class=\"line\">subject.<span class=\"title function_\">next</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">subject.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;v2&#x27;</span>, v), <span class=\"literal\">null</span>, <span class=\"function\">()=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;v2 complete&#x27;</span>));</span><br><span class=\"line\">subject.<span class=\"title function_\">next</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">subjectTest.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">subject.<span class=\"title function_\">complete</span>();</span><br><span class=\"line\"><span class=\"comment\">// output: v1,1 v1,2 v2,2 v2complete</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>subject可以有多个数据源，起到的作用就是把多个数据源的内容汇总到一个Observable中去。</p>\n</blockquote>\n<p><strong>multicast</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tick$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = tick$.<span class=\"title function_\">multicast</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>()).<span class=\"title function_\">refCount</span>();</span><br><span class=\"line\">source.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;v1&quot;</span>, v))</span><br><span class=\"line\">source.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;v2&quot;</span>, v))</span><br><span class=\"line\"><span class=\"comment\">// output: v1 0, v2 0 v1 1, v2 1....</span></span><br><span class=\"line\"><span class=\"comment\">// multicast产生的connectableObservable会去subscribe的Observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> tick$ = <span class=\"title class_\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">take</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = tick$.<span class=\"title function_\">multicast</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>(), <span class=\"function\">(<span class=\"params\">shared</span>) =&gt;</span> shared.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Observable</span>.<span class=\"title function_\">of</span>(<span class=\"string\">&#x27;Done&#x27;</span>)))</span><br><span class=\"line\">source.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in v1&quot;</span>, v))</span><br><span class=\"line\">source.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m in v&quot;</span>, v))</span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v1 0</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v 0</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v1 0</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v 0</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v1 1</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v 1</span></span><br><span class=\"line\"><span class=\"comment\">// I&#x27;m in v1 Done</span></span><br><span class=\"line\"><span class=\"comment\">//&#x27;m in v Done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>publish</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">publish</span> = (<span class=\"params\">selector</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(selector)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">multicast</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>(), selector)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">multicast</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// publish实际是对multicast的封装</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>share</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> share = () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">multicast</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>()).<span class=\"title function_\">refcount</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// share也是对multicast的封装</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>publishLast，AsyncSubject</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">publishLast</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">multicast</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSubject</span>())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 由AsyncSubject封装的publishLast方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>publishReplay， replaySubject</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">publishReplay</span>(<span class=\"params\">bufferSize = <span class=\"built_in\">Number</span>.POSITIVE_INFINITY, windowTime = <span class=\"built_in\">Number</span>.POSITIVE_INFINITY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> multicast.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">ReplaySubject</span>(bufferSize, windowTime))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>publishBehavior, BehaviorSubject</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">publishBehavior</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> multicast.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>(value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><blockquote>\n<p>Scheduler 可以作为创造类和合并类操作符的函数使用，Rx还提供了observeOn和subscribeOn两个操作符，用于在管道任何位置插入Scheduler</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#x27;before&#x27;);</span><br><span class=\"line\">Observable.range(1, 3).subscribeOn(asap).subscribe(console.log)</span><br><span class=\"line\">console.log(&#x27;after&#x27;);</span><br><span class=\"line\">// output: 1,2,3,before, after</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"webcomponent","date":"2020-01-27T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/wc.png","_content":"# webcomponent\n\n> 我始终认为 ~~webcomponent有着巨大的潜力，就像PWA注定是未来~~。\n\n### 什么事web compoennt\n\n> Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。\n>\n> - **Custom elements（自定义元素）：**一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。\n> - **Shadow DOM（影子DOM）**：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。\n> - **HTML templates（HTML模板）：** [`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template) 和 [``](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/slot) 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。\n>\n> from mdn\n\n## APIS\n\n- **`customElements`**\n\n  > **`customElements`** 是[`Window`](https://developer.mozilla.org/zh-CN/docs/Web/API/Window)对象上的一个只读属性，接口返回一个[`CustomElementRegistry`](https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry) 对象的引用，可用于注册新的 [custom elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements)，或者获取之前定义过的自定义元素的信息。\n\n  ```javascript\n  \n  \n  class Test extends HTMLElement {\n    constructor() {\n      super();\n  \n      const content = document.createElement('div');\n      const p = document.createElement('p');\n      p.innerText = 'Hello';\n      content.append(p);\n      // this => Html element\n      this.append(content);\n    }\n  }\n  \n  window.customElements.define('test', Test);\n  ```\n\n  [生命周期回调](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks)\n\n  定义在自定义元素的类定义中的特殊回调函数，影响其行为：\n\n  - `connectedCallback`: 当自定义元素第一次被连接到文档DOM时被调用。\n  - `disconnectedCallback`: 当自定义元素与文档DOM断开连接时被调用。\n  - `adoptedCallback`: 当自定义元素被移动到新文档时被调用。\n  - `attributeChangedCallback`: 当自定义元素的一个属性被增加、移除或更改时被调用。\n\n  ```javascript\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (attributeName===\"\") {\n          console.log(oldValue, newValue)\n      }\n  }\n  ```\n\n  \n\n- ## Template标签\n\n  如果使用template 上述代码的写法应该是\n\n```html\n\n<template id=\"test\">\n  <div class=\"content\">\n    <p>Hello</p>\n  </div>\n</template>\n```\n\n```javascript\n\nclass UserCard extends HTMLElement {\n  constructor() {\n    super();\n\t\tconst shadow = this.attachShadow( { mode: 'closed' } );\n    const t = document.getElementById('test');\n    const content = t.content.cloneNode(true);\n    this.appendChild(content);\n  }\n}\n```\n\n- ## Shadow DOM\n\n  Web Component 允许内部代码隐藏起来，这叫做 Shadow DOM，即这部分 DOM 默认与外部 DOM 隔离，内部任何代码都无法影响外部。\n\n  自定义元素的`this.attachShadow()`方法开启 Shadow DOM，详见下面的代码。\n\n  当想添加事件给shadow的时候\n\n  ```javascript\n  \n  p = shadow.querySelector('p');\n  ```\n\n  \n\n## 一个例子\n\n```javascript\n<template>\n    <style>\n        .coloured {\n            color: red;\n        }\n    </style>\n    <p>the first webcompnent is  <strong class=\"coloured\">Hello World</strong></p>\n</template>\n<script>\n    (function() {\n        // Creates an object based in the HTML Element prototype\n        // 基于HTML Element prototype 创建obj\n        var element = Object.create(HTMLElement.prototype);\n        // 获取特mplate的内容\n        var template = document.currentScript.ownerDocument.querySelector('template').content;\n        // element创建完成之后的回调\n        element.createdCallback = function() {\n            // 创建 shadow root\n            var shadowRoot = this.createShadowRoot();\n            // 向root中加入模板\n            var clone = document.importNode(template, true);\n            shadowRoot.appendChild(clone);\n        };\n        document.registerElement('hellow-world', {\n            prototype: element\n        });\n    }());\n</script>\n```\n\n\n\n","source":"_posts/webcomponent.md","raw":"title: webcomponent\ndate: 2020/01/28\ncover: https://technologybook.tech/assets/img/wc.png\ncategories:\n- html\ntags:\n- webComponent\n\n---\n# webcomponent\n\n> 我始终认为 ~~webcomponent有着巨大的潜力，就像PWA注定是未来~~。\n\n### 什么事web compoennt\n\n> Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。\n>\n> - **Custom elements（自定义元素）：**一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。\n> - **Shadow DOM（影子DOM）**：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。\n> - **HTML templates（HTML模板）：** [`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template) 和 [``](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/slot) 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。\n>\n> from mdn\n\n## APIS\n\n- **`customElements`**\n\n  > **`customElements`** 是[`Window`](https://developer.mozilla.org/zh-CN/docs/Web/API/Window)对象上的一个只读属性，接口返回一个[`CustomElementRegistry`](https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry) 对象的引用，可用于注册新的 [custom elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements)，或者获取之前定义过的自定义元素的信息。\n\n  ```javascript\n  \n  \n  class Test extends HTMLElement {\n    constructor() {\n      super();\n  \n      const content = document.createElement('div');\n      const p = document.createElement('p');\n      p.innerText = 'Hello';\n      content.append(p);\n      // this => Html element\n      this.append(content);\n    }\n  }\n  \n  window.customElements.define('test', Test);\n  ```\n\n  [生命周期回调](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks)\n\n  定义在自定义元素的类定义中的特殊回调函数，影响其行为：\n\n  - `connectedCallback`: 当自定义元素第一次被连接到文档DOM时被调用。\n  - `disconnectedCallback`: 当自定义元素与文档DOM断开连接时被调用。\n  - `adoptedCallback`: 当自定义元素被移动到新文档时被调用。\n  - `attributeChangedCallback`: 当自定义元素的一个属性被增加、移除或更改时被调用。\n\n  ```javascript\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (attributeName===\"\") {\n          console.log(oldValue, newValue)\n      }\n  }\n  ```\n\n  \n\n- ## Template标签\n\n  如果使用template 上述代码的写法应该是\n\n```html\n\n<template id=\"test\">\n  <div class=\"content\">\n    <p>Hello</p>\n  </div>\n</template>\n```\n\n```javascript\n\nclass UserCard extends HTMLElement {\n  constructor() {\n    super();\n\t\tconst shadow = this.attachShadow( { mode: 'closed' } );\n    const t = document.getElementById('test');\n    const content = t.content.cloneNode(true);\n    this.appendChild(content);\n  }\n}\n```\n\n- ## Shadow DOM\n\n  Web Component 允许内部代码隐藏起来，这叫做 Shadow DOM，即这部分 DOM 默认与外部 DOM 隔离，内部任何代码都无法影响外部。\n\n  自定义元素的`this.attachShadow()`方法开启 Shadow DOM，详见下面的代码。\n\n  当想添加事件给shadow的时候\n\n  ```javascript\n  \n  p = shadow.querySelector('p');\n  ```\n\n  \n\n## 一个例子\n\n```javascript\n<template>\n    <style>\n        .coloured {\n            color: red;\n        }\n    </style>\n    <p>the first webcompnent is  <strong class=\"coloured\">Hello World</strong></p>\n</template>\n<script>\n    (function() {\n        // Creates an object based in the HTML Element prototype\n        // 基于HTML Element prototype 创建obj\n        var element = Object.create(HTMLElement.prototype);\n        // 获取特mplate的内容\n        var template = document.currentScript.ownerDocument.querySelector('template').content;\n        // element创建完成之后的回调\n        element.createdCallback = function() {\n            // 创建 shadow root\n            var shadowRoot = this.createShadowRoot();\n            // 向root中加入模板\n            var clone = document.importNode(template, true);\n            shadowRoot.appendChild(clone);\n        };\n        document.registerElement('hellow-world', {\n            prototype: element\n        });\n    }());\n</script>\n```\n\n\n\n","slug":"webcomponent","published":1,"updated":"2024-04-10T17:46:25.878Z","_id":"cluvjqddy002j0wpd8n961e3h","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"webcomponent\"><a href=\"#webcomponent\" class=\"headerlink\" title=\"webcomponent\"></a>webcomponent</h1><blockquote>\n<p>我始终认为 <del>webcomponent有着巨大的潜力，就像PWA注定是未来</del>。</p>\n</blockquote>\n<h3 id=\"什么事web-compoennt\"><a href=\"#什么事web-compoennt\" class=\"headerlink\" title=\"什么事web compoennt\"></a>什么事web compoennt</h3><blockquote>\n<p>Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>\n<ul>\n<li><strong>Custom elements（自定义元素）：</strong>一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。</li>\n<li><strong>Shadow DOM（影子DOM）</strong>：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li>\n<li><strong>HTML templates（HTML模板）：</strong> [&#96;](<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template</a>) 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/slot\">&#96;&#96;</a> 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li>\n</ul>\n<p>from mdn</p>\n</blockquote>\n<h2 id=\"APIS\"><a href=\"#APIS\" class=\"headerlink\" title=\"APIS\"></a>APIS</h2><ul>\n<li><p><strong><code>customElements</code></strong></p>\n<blockquote>\n<p><strong><code>customElements</code></strong> 是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window\"><code>Window</code></a>对象上的一个只读属性，接口返回一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> 对象的引用，可用于注册新的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\">custom elements</a>，或者获取之前定义过的自定义元素的信息。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> content = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> p = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;p&#x27;</span>);</span><br><span class=\"line\">    p.<span class=\"property\">innerText</span> = <span class=\"string\">&#x27;Hello&#x27;</span>;</span><br><span class=\"line\">    content.<span class=\"title function_\">append</span>(p);</span><br><span class=\"line\">    <span class=\"comment\">// this =&gt; Html element</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">append</span>(content);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">customElements</span>.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"title class_\">Test</span>);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\">生命周期回调</a></p>\n<p>定义在自定义元素的类定义中的特殊回调函数，影响其行为：</p>\n<ul>\n<li><code>connectedCallback</code>: 当自定义元素第一次被连接到文档DOM时被调用。</li>\n<li><code>disconnectedCallback</code>: 当自定义元素与文档DOM断开连接时被调用。</li>\n<li><code>adoptedCallback</code>: 当自定义元素被移动到新文档时被调用。</li>\n<li><code>attributeChangedCallback</code>: 当自定义元素的一个属性被增加、移除或更改时被调用。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">attributeChangedCallback</span>(<span class=\"params\">attributeName, oldValue, newValue</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attributeName===<span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(oldValue, newValue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><h2 id=\"Template标签\"><a href=\"#Template标签\" class=\"headerlink\" title=\"Template标签\"></a>Template标签</h2><p>如果使用template 上述代码的写法应该是</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserCard</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> shadow = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>( &#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;closed&#x27;</span> &#125; );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> t = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> content = t.<span class=\"property\">content</span>.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">appendChild</span>(content);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h2 id=\"Shadow-DOM\"><a href=\"#Shadow-DOM\" class=\"headerlink\" title=\"Shadow DOM\"></a>Shadow DOM</h2><p>Web Component 允许内部代码隐藏起来，这叫做 Shadow DOM，即这部分 DOM 默认与外部 DOM 隔离，内部任何代码都无法影响外部。</p>\n<p>自定义元素的<code>this.attachShadow()</code>方法开启 Shadow DOM，详见下面的代码。</p>\n<p>当想添加事件给shadow的时候</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">p = shadow.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;p&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        <span class=\"selector-class\">.coloured</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">            <span class=\"attribute\">color</span>: red;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>the first webcompnent is  <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;coloured&quot;</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// Creates an object based in the HTML Element prototype</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// 基于HTML Element prototype 创建obj</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> element = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">HTMLElement</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// 获取特mplate的内容</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> template = <span class=\"variable language_\">document</span>.<span class=\"property\">currentScript</span>.<span class=\"property\">ownerDocument</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;template&#x27;</span>).<span class=\"property\">content</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// element创建完成之后的回调</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        element.<span class=\"property\">createdCallback</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 创建 shadow root</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">var</span> shadowRoot = <span class=\"variable language_\">this</span>.<span class=\"title function_\">createShadowRoot</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 向root中加入模板</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">var</span> clone = <span class=\"variable language_\">document</span>.importNode(template, <span class=\"literal\">true</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            shadowRoot.<span class=\"title function_\">appendChild</span>(clone);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">registerElement</span>(<span class=\"string\">&#x27;hellow-world&#x27;</span>, &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">prototype</span>: element</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;());</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webcomponent\"><a href=\"#webcomponent\" class=\"headerlink\" title=\"webcomponent\"></a>webcomponent</h1><blockquote>\n<p>我始终认为 <del>webcomponent有着巨大的潜力，就像PWA注定是未来</del>。</p>\n</blockquote>\n<h3 id=\"什么事web-compoennt\"><a href=\"#什么事web-compoennt\" class=\"headerlink\" title=\"什么事web compoennt\"></a>什么事web compoennt</h3><blockquote>\n<p>Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>\n<ul>\n<li><strong>Custom elements（自定义元素）：</strong>一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。</li>\n<li><strong>Shadow DOM（影子DOM）</strong>：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li>\n<li><strong>HTML templates（HTML模板）：</strong> [&#96;](<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template</a>) 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/slot\">&#96;&#96;</a> 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li>\n</ul>\n<p>from mdn</p>\n</blockquote>\n<h2 id=\"APIS\"><a href=\"#APIS\" class=\"headerlink\" title=\"APIS\"></a>APIS</h2><ul>\n<li><p><strong><code>customElements</code></strong></p>\n<blockquote>\n<p><strong><code>customElements</code></strong> 是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window\"><code>Window</code></a>对象上的一个只读属性，接口返回一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> 对象的引用，可用于注册新的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\">custom elements</a>，或者获取之前定义过的自定义元素的信息。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> content = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> p = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;p&#x27;</span>);</span><br><span class=\"line\">    p.<span class=\"property\">innerText</span> = <span class=\"string\">&#x27;Hello&#x27;</span>;</span><br><span class=\"line\">    content.<span class=\"title function_\">append</span>(p);</span><br><span class=\"line\">    <span class=\"comment\">// this =&gt; Html element</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">append</span>(content);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">customElements</span>.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"title class_\">Test</span>);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\">生命周期回调</a></p>\n<p>定义在自定义元素的类定义中的特殊回调函数，影响其行为：</p>\n<ul>\n<li><code>connectedCallback</code>: 当自定义元素第一次被连接到文档DOM时被调用。</li>\n<li><code>disconnectedCallback</code>: 当自定义元素与文档DOM断开连接时被调用。</li>\n<li><code>adoptedCallback</code>: 当自定义元素被移动到新文档时被调用。</li>\n<li><code>attributeChangedCallback</code>: 当自定义元素的一个属性被增加、移除或更改时被调用。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">attributeChangedCallback</span>(<span class=\"params\">attributeName, oldValue, newValue</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attributeName===<span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(oldValue, newValue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><h2 id=\"Template标签\"><a href=\"#Template标签\" class=\"headerlink\" title=\"Template标签\"></a>Template标签</h2><p>如果使用template 上述代码的写法应该是</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserCard</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> shadow = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>( &#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;closed&#x27;</span> &#125; );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> t = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> content = t.<span class=\"property\">content</span>.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">appendChild</span>(content);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h2 id=\"Shadow-DOM\"><a href=\"#Shadow-DOM\" class=\"headerlink\" title=\"Shadow DOM\"></a>Shadow DOM</h2><p>Web Component 允许内部代码隐藏起来，这叫做 Shadow DOM，即这部分 DOM 默认与外部 DOM 隔离，内部任何代码都无法影响外部。</p>\n<p>自定义元素的<code>this.attachShadow()</code>方法开启 Shadow DOM，详见下面的代码。</p>\n<p>当想添加事件给shadow的时候</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">p = shadow.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;p&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        <span class=\"selector-class\">.coloured</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">            <span class=\"attribute\">color</span>: red;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>the first webcompnent is  <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;coloured&quot;</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// Creates an object based in the HTML Element prototype</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// 基于HTML Element prototype 创建obj</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> element = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">HTMLElement</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// 获取特mplate的内容</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> template = <span class=\"variable language_\">document</span>.<span class=\"property\">currentScript</span>.<span class=\"property\">ownerDocument</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;template&#x27;</span>).<span class=\"property\">content</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// element创建完成之后的回调</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        element.<span class=\"property\">createdCallback</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 创建 shadow root</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">var</span> shadowRoot = <span class=\"variable language_\">this</span>.<span class=\"title function_\">createShadowRoot</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 向root中加入模板</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">var</span> clone = <span class=\"variable language_\">document</span>.importNode(template, <span class=\"literal\">true</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            shadowRoot.<span class=\"title function_\">appendChild</span>(clone);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">registerElement</span>(<span class=\"string\">&#x27;hellow-world&#x27;</span>, &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">prototype</span>: element</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;());</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Html5 WebSocket","date":"2019-11-20T16:00:00.000Z","_content":"# Html5 WebSocket\n\n一，WebSocket创建过程\n\n- 创建监听事件\n- 断开连接\n- 消息时间\n- 发送消息返回服务器\n- 关闭连接\n\n```javascript\n// 创建一个Socket实例\nvar socket = new WebSocket('ws://localhost:8080'); \n// 打开Socket \nsocket.onopen = function(event) { \n  // 发送一个初始化消息\n  socket.send('I am the client and I\\'m listening!'); \n  // 监听消息\n  socket.onmessage = function(event) { \n    console.log('Client received a message',event); \n  }; \n  // 监听Socket的关闭\n  socket.onclose = function(event) { \n    console.log('Client notified socket has closed',event); \n  }; \n  // 关闭Socket.... \n  //socket.close() \n};\n```\n\n## NodeJS和Socket.IO联合开发\n\nSocket.IO提供的服务器端解决方案，允许统一的客户端和服务器端的API。使用Node，你可以**创建一个典型的HTTP服务器**，然后**把服务器的实例传递到Socket.IO**。从这里，你创建连接、断开连接、建立消息监听器，跟在客户端一样。\n\n```javascript\n// 需要HTTP 模块来启动服务器和Socket.IO\nvar http= require('http'), io= require('socket.io'); \n// 在8080端口启动服务器\nvar server= http.createServer(function(req, res){ \n  // 发送HTML的headers和message\n  res.writeHead(200,{ 'Content-Type': 'text/html' }); \n  res.end('<h1>Hello Socket Lover!</h1>'); \n}); \nserver.listen(8080); \n// 创建一个Socket.IO实例，把它传递给服务器\nvar socket= io.listen(server); \n// 添加一个连接监听器\nsocket.on('connection', function(client){ \n  // 成功！现在开始监听接收到的消息\n  client.on('message',function(event){ \n    console.log('Received message from client!',event); \n  }); \n  client.on('disconnect',function(){ \n    clearInterval(interval); \n    console.log('Server has disconnected'); \n  }); \n});\n```\n\n你可以运行服务器部分，假定已安装了NodeJS，从命令行执行：\n\n> node socket-server.js\n\n现在客户端和服务器都能来回推送消息了！在NodeJS脚本内，可以使用简单的JavaScript创建一个定期消息发送器：\n\n```javascript\n// 创建一个定期（每5秒）发送消息到客户端的发送器\nvar interval= setInterval(function() { \n  client.send('This is a message from the server! ' + new Date().getTime()); \n},5000);\n```\n\n------\n\n------\n\n服务器端将会每5秒推送消息到客户端！\n\n## 指南介绍\n\n**WebSocket内容**：全双工，一旦建立WebSocket连接，客户端和服务端可以在任何时候互相传送消息（不是采用响应请求的方式），每个基于WebSockt的服务都必须定义自己的子协议用于传输数据（兼容性差多版本），WebSocket包含一种协商机制（用于挑选）可以传一个字符串数组给WebSocket构造函数服务器端会生成一个子协议列表传递给客户端，客户端通过protocol检查是哪种协议\n\n1. 首先创建一个socket\n\n```\n var socket = new WebSocket(\"ws:/ws.example.com:1234/resource\")\n```\n\n1. 创建套接字通常需要注册一个事件处理程序\n\n```javascript\nsocket.onopen = function(e){/* connection*/ };\nsocket.onclose = function(e){/*close */};\nsocket.onerror = function(e){ /* error*/}\nsocket.onmessage = function(e){\n        var mes = e.data//向服务器发送一条消息\n}\n```\n\n1. 调用send方法\n\n```\n scocket.send(\"Hello\");//send();\n```\n\n1. close 关闭","source":"_posts/websocket.md","raw":"title: Html5 WebSocket\ndate: 2019/11/21\ncategories:\n- html\ntags:\n- webSocket\n\n---\n# Html5 WebSocket\n\n一，WebSocket创建过程\n\n- 创建监听事件\n- 断开连接\n- 消息时间\n- 发送消息返回服务器\n- 关闭连接\n\n```javascript\n// 创建一个Socket实例\nvar socket = new WebSocket('ws://localhost:8080'); \n// 打开Socket \nsocket.onopen = function(event) { \n  // 发送一个初始化消息\n  socket.send('I am the client and I\\'m listening!'); \n  // 监听消息\n  socket.onmessage = function(event) { \n    console.log('Client received a message',event); \n  }; \n  // 监听Socket的关闭\n  socket.onclose = function(event) { \n    console.log('Client notified socket has closed',event); \n  }; \n  // 关闭Socket.... \n  //socket.close() \n};\n```\n\n## NodeJS和Socket.IO联合开发\n\nSocket.IO提供的服务器端解决方案，允许统一的客户端和服务器端的API。使用Node，你可以**创建一个典型的HTTP服务器**，然后**把服务器的实例传递到Socket.IO**。从这里，你创建连接、断开连接、建立消息监听器，跟在客户端一样。\n\n```javascript\n// 需要HTTP 模块来启动服务器和Socket.IO\nvar http= require('http'), io= require('socket.io'); \n// 在8080端口启动服务器\nvar server= http.createServer(function(req, res){ \n  // 发送HTML的headers和message\n  res.writeHead(200,{ 'Content-Type': 'text/html' }); \n  res.end('<h1>Hello Socket Lover!</h1>'); \n}); \nserver.listen(8080); \n// 创建一个Socket.IO实例，把它传递给服务器\nvar socket= io.listen(server); \n// 添加一个连接监听器\nsocket.on('connection', function(client){ \n  // 成功！现在开始监听接收到的消息\n  client.on('message',function(event){ \n    console.log('Received message from client!',event); \n  }); \n  client.on('disconnect',function(){ \n    clearInterval(interval); \n    console.log('Server has disconnected'); \n  }); \n});\n```\n\n你可以运行服务器部分，假定已安装了NodeJS，从命令行执行：\n\n> node socket-server.js\n\n现在客户端和服务器都能来回推送消息了！在NodeJS脚本内，可以使用简单的JavaScript创建一个定期消息发送器：\n\n```javascript\n// 创建一个定期（每5秒）发送消息到客户端的发送器\nvar interval= setInterval(function() { \n  client.send('This is a message from the server! ' + new Date().getTime()); \n},5000);\n```\n\n------\n\n------\n\n服务器端将会每5秒推送消息到客户端！\n\n## 指南介绍\n\n**WebSocket内容**：全双工，一旦建立WebSocket连接，客户端和服务端可以在任何时候互相传送消息（不是采用响应请求的方式），每个基于WebSockt的服务都必须定义自己的子协议用于传输数据（兼容性差多版本），WebSocket包含一种协商机制（用于挑选）可以传一个字符串数组给WebSocket构造函数服务器端会生成一个子协议列表传递给客户端，客户端通过protocol检查是哪种协议\n\n1. 首先创建一个socket\n\n```\n var socket = new WebSocket(\"ws:/ws.example.com:1234/resource\")\n```\n\n1. 创建套接字通常需要注册一个事件处理程序\n\n```javascript\nsocket.onopen = function(e){/* connection*/ };\nsocket.onclose = function(e){/*close */};\nsocket.onerror = function(e){ /* error*/}\nsocket.onmessage = function(e){\n        var mes = e.data//向服务器发送一条消息\n}\n```\n\n1. 调用send方法\n\n```\n scocket.send(\"Hello\");//send();\n```\n\n1. close 关闭","slug":"websocket","published":1,"updated":"2024-04-10T17:46:25.879Z","_id":"cluvjqde000320wpd24zof5xh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Html5-WebSocket\"><a href=\"#Html5-WebSocket\" class=\"headerlink\" title=\"Html5 WebSocket\"></a>Html5 WebSocket</h1><p>一，WebSocket创建过程</p>\n<ul>\n<li>创建监听事件</li>\n<li>断开连接</li>\n<li>消息时间</li>\n<li>发送消息返回服务器</li>\n<li>关闭连接</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个Socket实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&#x27;ws://localhost:8080&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// 打开Socket </span></span><br><span class=\"line\">socket.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123; </span><br><span class=\"line\">  <span class=\"comment\">// 发送一个初始化消息</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;I am the client and I\\&#x27;m listening!&#x27;</span>); </span><br><span class=\"line\">  <span class=\"comment\">// 监听消息</span></span><br><span class=\"line\">  socket.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Client received a message&#x27;</span>,event); </span><br><span class=\"line\">  &#125;; </span><br><span class=\"line\">  <span class=\"comment\">// 监听Socket的关闭</span></span><br><span class=\"line\">  socket.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Client notified socket has closed&#x27;</span>,event); </span><br><span class=\"line\">  &#125;; </span><br><span class=\"line\">  <span class=\"comment\">// 关闭Socket.... </span></span><br><span class=\"line\">  <span class=\"comment\">//socket.close() </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NodeJS和Socket-IO联合开发\"><a href=\"#NodeJS和Socket-IO联合开发\" class=\"headerlink\" title=\"NodeJS和Socket.IO联合开发\"></a>NodeJS和Socket.IO联合开发</h2><p>Socket.IO提供的服务器端解决方案，允许统一的客户端和服务器端的API。使用Node，你可以<strong>创建一个典型的HTTP服务器</strong>，然后<strong>把服务器的实例传递到Socket.IO</strong>。从这里，你创建连接、断开连接、建立消息监听器，跟在客户端一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要HTTP 模块来启动服务器和Socket.IO</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http= <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>), io= <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;socket.io&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// 在8080端口启动服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server= http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123; </span><br><span class=\"line\">  <span class=\"comment\">// 发送HTML的headers和message</span></span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>,&#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;text/html&#x27;</span> &#125;); </span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;&lt;h1&gt;Hello Socket Lover!&lt;/h1&gt;&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>); </span><br><span class=\"line\"><span class=\"comment\">// 创建一个Socket.IO实例，把它传递给服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> socket= io.<span class=\"title function_\">listen</span>(server); </span><br><span class=\"line\"><span class=\"comment\">// 添加一个连接监听器</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;connection&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">client</span>)&#123; </span><br><span class=\"line\">  <span class=\"comment\">// 成功！现在开始监听接收到的消息</span></span><br><span class=\"line\">  client.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;message&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Received message from client!&#x27;</span>,event); </span><br><span class=\"line\">  &#125;); </span><br><span class=\"line\">  client.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;disconnect&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(interval); </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Server has disconnected&#x27;</span>); </span><br><span class=\"line\">  &#125;); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>你可以运行服务器部分，假定已安装了NodeJS，从命令行执行：</p>\n<blockquote>\n<p>node socket-server.js</p>\n</blockquote>\n<p>现在客户端和服务器都能来回推送消息了！在NodeJS脚本内，可以使用简单的JavaScript创建一个定期消息发送器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个定期（每5秒）发送消息到客户端的发送器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> interval= <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  client.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;This is a message from the server! &#x27;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()); </span><br><span class=\"line\">&#125;,<span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<hr>\n<p>服务器端将会每5秒推送消息到客户端！</p>\n<h2 id=\"指南介绍\"><a href=\"#指南介绍\" class=\"headerlink\" title=\"指南介绍\"></a>指南介绍</h2><p><strong>WebSocket内容</strong>：全双工，一旦建立WebSocket连接，客户端和服务端可以在任何时候互相传送消息（不是采用响应请求的方式），每个基于WebSockt的服务都必须定义自己的子协议用于传输数据（兼容性差多版本），WebSocket包含一种协商机制（用于挑选）可以传一个字符串数组给WebSocket构造函数服务器端会生成一个子协议列表传递给客户端，客户端通过protocol检查是哪种协议</p>\n<ol>\n<li>首先创建一个socket</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var socket = new WebSocket(&quot;ws:/ws.example.com:1234/resource&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>创建套接字通常需要注册一个事件处理程序</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"comment\">/* connection*/</span> &#125;;</span><br><span class=\"line\">socket.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"comment\">/*close */</span>&#125;;</span><br><span class=\"line\">socket.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123; <span class=\"comment\">/* error*/</span>&#125;</span><br><span class=\"line\">socket.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mes = e.<span class=\"property\">data</span><span class=\"comment\">//向服务器发送一条消息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>调用send方法</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scocket.send(&quot;Hello&quot;);//send();</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>close 关闭</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Html5-WebSocket\"><a href=\"#Html5-WebSocket\" class=\"headerlink\" title=\"Html5 WebSocket\"></a>Html5 WebSocket</h1><p>一，WebSocket创建过程</p>\n<ul>\n<li>创建监听事件</li>\n<li>断开连接</li>\n<li>消息时间</li>\n<li>发送消息返回服务器</li>\n<li>关闭连接</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个Socket实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&#x27;ws://localhost:8080&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// 打开Socket </span></span><br><span class=\"line\">socket.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123; </span><br><span class=\"line\">  <span class=\"comment\">// 发送一个初始化消息</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;I am the client and I\\&#x27;m listening!&#x27;</span>); </span><br><span class=\"line\">  <span class=\"comment\">// 监听消息</span></span><br><span class=\"line\">  socket.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Client received a message&#x27;</span>,event); </span><br><span class=\"line\">  &#125;; </span><br><span class=\"line\">  <span class=\"comment\">// 监听Socket的关闭</span></span><br><span class=\"line\">  socket.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Client notified socket has closed&#x27;</span>,event); </span><br><span class=\"line\">  &#125;; </span><br><span class=\"line\">  <span class=\"comment\">// 关闭Socket.... </span></span><br><span class=\"line\">  <span class=\"comment\">//socket.close() </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NodeJS和Socket-IO联合开发\"><a href=\"#NodeJS和Socket-IO联合开发\" class=\"headerlink\" title=\"NodeJS和Socket.IO联合开发\"></a>NodeJS和Socket.IO联合开发</h2><p>Socket.IO提供的服务器端解决方案，允许统一的客户端和服务器端的API。使用Node，你可以<strong>创建一个典型的HTTP服务器</strong>，然后<strong>把服务器的实例传递到Socket.IO</strong>。从这里，你创建连接、断开连接、建立消息监听器，跟在客户端一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要HTTP 模块来启动服务器和Socket.IO</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http= <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>), io= <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;socket.io&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// 在8080端口启动服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server= http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123; </span><br><span class=\"line\">  <span class=\"comment\">// 发送HTML的headers和message</span></span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>,&#123; <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;text/html&#x27;</span> &#125;); </span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;&lt;h1&gt;Hello Socket Lover!&lt;/h1&gt;&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>); </span><br><span class=\"line\"><span class=\"comment\">// 创建一个Socket.IO实例，把它传递给服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> socket= io.<span class=\"title function_\">listen</span>(server); </span><br><span class=\"line\"><span class=\"comment\">// 添加一个连接监听器</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;connection&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">client</span>)&#123; </span><br><span class=\"line\">  <span class=\"comment\">// 成功！现在开始监听接收到的消息</span></span><br><span class=\"line\">  client.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;message&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Received message from client!&#x27;</span>,event); </span><br><span class=\"line\">  &#125;); </span><br><span class=\"line\">  client.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;disconnect&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(interval); </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Server has disconnected&#x27;</span>); </span><br><span class=\"line\">  &#125;); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>你可以运行服务器部分，假定已安装了NodeJS，从命令行执行：</p>\n<blockquote>\n<p>node socket-server.js</p>\n</blockquote>\n<p>现在客户端和服务器都能来回推送消息了！在NodeJS脚本内，可以使用简单的JavaScript创建一个定期消息发送器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个定期（每5秒）发送消息到客户端的发送器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> interval= <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  client.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;This is a message from the server! &#x27;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()); </span><br><span class=\"line\">&#125;,<span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<hr>\n<p>服务器端将会每5秒推送消息到客户端！</p>\n<h2 id=\"指南介绍\"><a href=\"#指南介绍\" class=\"headerlink\" title=\"指南介绍\"></a>指南介绍</h2><p><strong>WebSocket内容</strong>：全双工，一旦建立WebSocket连接，客户端和服务端可以在任何时候互相传送消息（不是采用响应请求的方式），每个基于WebSockt的服务都必须定义自己的子协议用于传输数据（兼容性差多版本），WebSocket包含一种协商机制（用于挑选）可以传一个字符串数组给WebSocket构造函数服务器端会生成一个子协议列表传递给客户端，客户端通过protocol检查是哪种协议</p>\n<ol>\n<li>首先创建一个socket</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var socket = new WebSocket(&quot;ws:/ws.example.com:1234/resource&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>创建套接字通常需要注册一个事件处理程序</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"comment\">/* connection*/</span> &#125;;</span><br><span class=\"line\">socket.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"comment\">/*close */</span>&#125;;</span><br><span class=\"line\">socket.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123; <span class=\"comment\">/* error*/</span>&#125;</span><br><span class=\"line\">socket.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mes = e.<span class=\"property\">data</span><span class=\"comment\">//向服务器发送一条消息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>调用send方法</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scocket.send(&quot;Hello&quot;);//send();</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>close 关闭</li>\n</ol>\n"},{"title":"Typescript Template Literal Types","date":"2020-11-11T16:00:00.000Z","cover":"https://technologybook.tech/assets/img/t.png","_content":"# Typescript Template Literal Types\n\n> String literal types in TypeScript allow us to model functions and APIs that expect a set of specific strings.\n\n### 先看一下基本用法\n\n```typescript\ntype Color = \"red\" | \"blue\";\ntype Quantity = \"one\" | \"two\";\n\ntype SeussFish = `${Quantity | Color} fish`;\n//   ^ = type SeussFish = \"one fish\" | \"two fish\" | \"red fish\" | \"blue fish\"\n```\n\nTLT提供了一种在字符串中添加变量的能力，这给typescript提供了极大的想象力。\n\n```typescript\ntype VerticalAlignment = \"top\" | \"middle\" | \"bottom\";\ntype HorizontalAlignment = \"left\" | \"center\" | \"right\";\n\n// Takes\n//   | \"top-left\"    | \"top-center\"    | \"top-right\"\n//   | \"middle-left\" | \"middle-center\" | \"middle-right\"\n//   | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"\n\ndeclare function setAlignment(value: `${VerticalAlignment}-${HorizontalAlignment}`): void;\n\nsetAlignment(\"top-left\");   // works!\nsetAlignment(\"top-middel\"); // error!\nArgument of type '\"top-middel\"' is not assignable to parameter of type '\"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"'.\nsetAlignment(\"top-pot\");    // error! but good doughnuts if you're ever in Seattle\nArgument of type '\"top-pot\"' is not assignable to parameter of type '\"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"'.\n```\n\n对于tlt的使用，大家都已经玩出花了，诸如template parser的有趣的实现。\n\n## 这是一个提取params\n\n```typescript\ntype ExtractRouteParams<T extends string> =\n  string extends T\n  ? Record<string, string>\n  : T extends `${infer Start}:${infer Param}/${infer Rest}`\n  ? {[k in Param | keyof ExtractRouteParams<Rest>]: string}\n  : T extends `${infer Start}:${infer Param}`\n  ? {[k in Param]: string}\n  : {};\n\n\n```\n\n\n\n## 一个JSON Parser。。。\n\n```typescript\ntype ParserError<T extends string> = { error: true } & T\ntype EatWhitespace<State extends string> =\n  string extends State\n    ? ParserError<\"EatWhitespace got generic string type\">\n    : State extends ` ${infer State}` | `\\n${infer State}`\n      ? EatWhitespace<State>\n      : State\ntype AddKeyValue<Memo extends Record<string, any>, Key extends string, Value extends any> =\n  Memo & { [K in Key]: Value }\ntype ParseJsonObject<State extends string, Memo extends Record<string, any> = {}> =\n  string extends State\n    ? ParserError<\"ParseJsonObject got generic string type\">\n    : EatWhitespace<State> extends `}${infer State}`\n      ? [Memo, State]\n      : EatWhitespace<State> extends `\"${infer Key}\"${infer State}`\n        ? EatWhitespace<State> extends `:${infer State}`\n          ? ParseJsonValue<State> extends [infer Value, `${infer State}`]\n            ? EatWhitespace<State> extends `,${infer State}`\n              ? ParseJsonObject<State, AddKeyValue<Memo, Key, Value>>\n              : EatWhitespace<State> extends `}${infer State}`\n                ? [AddKeyValue<Memo, Key, Value>, State]\n                : ParserError<`ParseJsonObject received unexpected token: ${State}`>\n            : ParserError<`ParseJsonValue returned unexpected value for: ${State}`>\n          : ParserError<`ParseJsonObject received unexpected token: ${State}`>\n        : ParserError<`ParseJsonObject received unexpected token: ${State}`>\ntype ParseJsonArray<State extends string, Memo extends any[] = []> =\n  string extends State\n    ? ParserError<\"ParseJsonArray got generic string type\">\n    : EatWhitespace<State> extends `]${infer State}`\n      ? [Memo, State]\n      : ParseJsonValue<State> extends [infer Value, `${infer State}`]\n        ? EatWhitespace<State> extends `,${infer State}`\n          ? ParseJsonArray<EatWhitespace<State>, [...Memo, Value]>\n          : EatWhitespace<State> extends `]${infer State}`\n            ? [[...Memo, Value], State]\n            : ParserError<`ParseJsonArray received unexpected token: ${State}`>\n        : ParserError<`ParseJsonValue returned unexpected value for: ${State}`>\ntype ParseJsonValue<State extends string> =\n  string extends State\n    ? ParserError<\"ParseJsonValue got generic string type\">\n    : EatWhitespace<State> extends `null${infer State}`\n      ? [null, State]\n      : EatWhitespace<State> extends `true${infer State}`\n        ? [true, State]\n        : EatWhitespace<State> extends `false${infer State}`\n          ? [false, State]\n          : EatWhitespace<State> extends `\"${infer Value}\"${infer State}`\n            ? [Value, State]\n            : EatWhitespace<State> extends `[${infer State}`\n              ? ParseJsonArray<State>\n              : EatWhitespace<State> extends `{${infer State}`\n                ? ParseJsonObject<State>\n                : ParserError<`ParseJsonValue received unexpected token: ${State}`>\nexport type ParseJson<T extends string> =\n  ParseJsonValue<T> extends infer Result\n    ? Result extends [infer Value, string]\n      ? Value\n      : Result extends ParserError<any>\n        ? Result\n        : ParserError<\"ParseJsonValue returned unexpected Result\">\n    : ParserError<\"ParseJsonValue returned uninferrable Result\">\n```\n\n\n\n## 以及我的 extra url type\n\n```typescript\ntype ParsePathname<T extends string> = T extends `${infer Left}?${infer Right}`\n  ? Right extends `:${infer Rest}`\n    ? `${Left}?:${ParsePathname<Rest>}`\n    : Left\n  : T\ntype ParseQueryString<T extends string> = T extends `${infer _Left}?${infer Right}`\n  ? Right extends `:${infer Rest}`\n    ? ParseQueryString<Rest>\n    : Right\n  : ''\nexport type ParseUrl<T extends string> = CleanEmptyObject<{\n  pathname: string\n  params: ParseData<ParsePathname<T>>\n  query: ParseData<ParseQueryString<T>>\n}>\n```\n\n以下是一些效果\n\n![](/Users/user/Desktop/t1.png)\n\n### 以及更多的[花式应用...](https://github.com/ghoullier/awesome-template-literal-types)","source":"_posts/template string.md","raw":"title: Typescript Template Literal Types\ndate: 2020/11/12\ncover: https://technologybook.tech/assets/img/t.png\ncategories:\n- ts\ntags:\n- ts\n\n---\n# Typescript Template Literal Types\n\n> String literal types in TypeScript allow us to model functions and APIs that expect a set of specific strings.\n\n### 先看一下基本用法\n\n```typescript\ntype Color = \"red\" | \"blue\";\ntype Quantity = \"one\" | \"two\";\n\ntype SeussFish = `${Quantity | Color} fish`;\n//   ^ = type SeussFish = \"one fish\" | \"two fish\" | \"red fish\" | \"blue fish\"\n```\n\nTLT提供了一种在字符串中添加变量的能力，这给typescript提供了极大的想象力。\n\n```typescript\ntype VerticalAlignment = \"top\" | \"middle\" | \"bottom\";\ntype HorizontalAlignment = \"left\" | \"center\" | \"right\";\n\n// Takes\n//   | \"top-left\"    | \"top-center\"    | \"top-right\"\n//   | \"middle-left\" | \"middle-center\" | \"middle-right\"\n//   | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"\n\ndeclare function setAlignment(value: `${VerticalAlignment}-${HorizontalAlignment}`): void;\n\nsetAlignment(\"top-left\");   // works!\nsetAlignment(\"top-middel\"); // error!\nArgument of type '\"top-middel\"' is not assignable to parameter of type '\"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"'.\nsetAlignment(\"top-pot\");    // error! but good doughnuts if you're ever in Seattle\nArgument of type '\"top-pot\"' is not assignable to parameter of type '\"top-left\" | \"top-center\" | \"top-right\" | \"middle-left\" | \"middle-center\" | \"middle-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"'.\n```\n\n对于tlt的使用，大家都已经玩出花了，诸如template parser的有趣的实现。\n\n## 这是一个提取params\n\n```typescript\ntype ExtractRouteParams<T extends string> =\n  string extends T\n  ? Record<string, string>\n  : T extends `${infer Start}:${infer Param}/${infer Rest}`\n  ? {[k in Param | keyof ExtractRouteParams<Rest>]: string}\n  : T extends `${infer Start}:${infer Param}`\n  ? {[k in Param]: string}\n  : {};\n\n\n```\n\n\n\n## 一个JSON Parser。。。\n\n```typescript\ntype ParserError<T extends string> = { error: true } & T\ntype EatWhitespace<State extends string> =\n  string extends State\n    ? ParserError<\"EatWhitespace got generic string type\">\n    : State extends ` ${infer State}` | `\\n${infer State}`\n      ? EatWhitespace<State>\n      : State\ntype AddKeyValue<Memo extends Record<string, any>, Key extends string, Value extends any> =\n  Memo & { [K in Key]: Value }\ntype ParseJsonObject<State extends string, Memo extends Record<string, any> = {}> =\n  string extends State\n    ? ParserError<\"ParseJsonObject got generic string type\">\n    : EatWhitespace<State> extends `}${infer State}`\n      ? [Memo, State]\n      : EatWhitespace<State> extends `\"${infer Key}\"${infer State}`\n        ? EatWhitespace<State> extends `:${infer State}`\n          ? ParseJsonValue<State> extends [infer Value, `${infer State}`]\n            ? EatWhitespace<State> extends `,${infer State}`\n              ? ParseJsonObject<State, AddKeyValue<Memo, Key, Value>>\n              : EatWhitespace<State> extends `}${infer State}`\n                ? [AddKeyValue<Memo, Key, Value>, State]\n                : ParserError<`ParseJsonObject received unexpected token: ${State}`>\n            : ParserError<`ParseJsonValue returned unexpected value for: ${State}`>\n          : ParserError<`ParseJsonObject received unexpected token: ${State}`>\n        : ParserError<`ParseJsonObject received unexpected token: ${State}`>\ntype ParseJsonArray<State extends string, Memo extends any[] = []> =\n  string extends State\n    ? ParserError<\"ParseJsonArray got generic string type\">\n    : EatWhitespace<State> extends `]${infer State}`\n      ? [Memo, State]\n      : ParseJsonValue<State> extends [infer Value, `${infer State}`]\n        ? EatWhitespace<State> extends `,${infer State}`\n          ? ParseJsonArray<EatWhitespace<State>, [...Memo, Value]>\n          : EatWhitespace<State> extends `]${infer State}`\n            ? [[...Memo, Value], State]\n            : ParserError<`ParseJsonArray received unexpected token: ${State}`>\n        : ParserError<`ParseJsonValue returned unexpected value for: ${State}`>\ntype ParseJsonValue<State extends string> =\n  string extends State\n    ? ParserError<\"ParseJsonValue got generic string type\">\n    : EatWhitespace<State> extends `null${infer State}`\n      ? [null, State]\n      : EatWhitespace<State> extends `true${infer State}`\n        ? [true, State]\n        : EatWhitespace<State> extends `false${infer State}`\n          ? [false, State]\n          : EatWhitespace<State> extends `\"${infer Value}\"${infer State}`\n            ? [Value, State]\n            : EatWhitespace<State> extends `[${infer State}`\n              ? ParseJsonArray<State>\n              : EatWhitespace<State> extends `{${infer State}`\n                ? ParseJsonObject<State>\n                : ParserError<`ParseJsonValue received unexpected token: ${State}`>\nexport type ParseJson<T extends string> =\n  ParseJsonValue<T> extends infer Result\n    ? Result extends [infer Value, string]\n      ? Value\n      : Result extends ParserError<any>\n        ? Result\n        : ParserError<\"ParseJsonValue returned unexpected Result\">\n    : ParserError<\"ParseJsonValue returned uninferrable Result\">\n```\n\n\n\n## 以及我的 extra url type\n\n```typescript\ntype ParsePathname<T extends string> = T extends `${infer Left}?${infer Right}`\n  ? Right extends `:${infer Rest}`\n    ? `${Left}?:${ParsePathname<Rest>}`\n    : Left\n  : T\ntype ParseQueryString<T extends string> = T extends `${infer _Left}?${infer Right}`\n  ? Right extends `:${infer Rest}`\n    ? ParseQueryString<Rest>\n    : Right\n  : ''\nexport type ParseUrl<T extends string> = CleanEmptyObject<{\n  pathname: string\n  params: ParseData<ParsePathname<T>>\n  query: ParseData<ParseQueryString<T>>\n}>\n```\n\n以下是一些效果\n\n![](/Users/user/Desktop/t1.png)\n\n### 以及更多的[花式应用...](https://github.com/ghoullier/awesome-template-literal-types)","slug":"template string","published":1,"updated":"2024-04-10T17:46:25.878Z","_id":"cluvjqde000330wpdc12946bd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Typescript-Template-Literal-Types\"><a href=\"#Typescript-Template-Literal-Types\" class=\"headerlink\" title=\"Typescript Template Literal Types\"></a>Typescript Template Literal Types</h1><blockquote>\n<p>String literal types in TypeScript allow us to model functions and APIs that expect a set of specific strings.</p>\n</blockquote>\n<h3 id=\"先看一下基本用法\"><a href=\"#先看一下基本用法\" class=\"headerlink\" title=\"先看一下基本用法\"></a>先看一下基本用法</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Color</span> = <span class=\"string\">&quot;red&quot;</span> | <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Quantity</span> = <span class=\"string\">&quot;one&quot;</span> | <span class=\"string\">&quot;two&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">SeussFish</span> = <span class=\"string\">`<span class=\"subst\">$&#123;Quantity | Color&#125;</span> fish`</span>;</span><br><span class=\"line\"><span class=\"comment\">//   ^ = type SeussFish = &quot;one fish&quot; | &quot;two fish&quot; | &quot;red fish&quot; | &quot;blue fish&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>TLT提供了一种在字符串中添加变量的能力，这给typescript提供了极大的想象力。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">VerticalAlignment</span> = <span class=\"string\">&quot;top&quot;</span> | <span class=\"string\">&quot;middle&quot;</span> | <span class=\"string\">&quot;bottom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">HorizontalAlignment</span> = <span class=\"string\">&quot;left&quot;</span> | <span class=\"string\">&quot;center&quot;</span> | <span class=\"string\">&quot;right&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Takes</span></span><br><span class=\"line\"><span class=\"comment\">//   | &quot;top-left&quot;    | &quot;top-center&quot;    | &quot;top-right&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//   | &quot;middle-left&quot; | &quot;middle-center&quot; | &quot;middle-right&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//   | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">setAlignment</span>(<span class=\"params\">value: <span class=\"string\">`<span class=\"subst\">$&#123;VerticalAlignment&#125;</span>-<span class=\"subst\">$&#123;HorizontalAlignment&#125;</span>`</span></span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setAlignment</span>(<span class=\"string\">&quot;top-left&quot;</span>);   <span class=\"comment\">// works!</span></span><br><span class=\"line\"><span class=\"title function_\">setAlignment</span>(<span class=\"string\">&quot;top-middel&quot;</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\"><span class=\"title class_\">Argument</span> <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">&#x27;&quot;top-middel&quot;&#x27;</span> is not assignable to parameter <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">&#x27;&quot;top-left&quot; | &quot;top-center&quot; | &quot;top-right&quot; | &quot;middle-left&quot; | &quot;middle-center&quot; | &quot;middle-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;&#x27;</span>.</span><br><span class=\"line\"><span class=\"title function_\">setAlignment</span>(<span class=\"string\">&quot;top-pot&quot;</span>);    <span class=\"comment\">// error! but good doughnuts if you&#x27;re ever in Seattle</span></span><br><span class=\"line\"><span class=\"title class_\">Argument</span> <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">&#x27;&quot;top-pot&quot;&#x27;</span> is not assignable to parameter <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">&#x27;&quot;top-left&quot; | &quot;top-center&quot; | &quot;top-right&quot; | &quot;middle-left&quot; | &quot;middle-center&quot; | &quot;middle-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;&#x27;</span>.</span><br></pre></td></tr></table></figure>\n\n<p>对于tlt的使用，大家都已经玩出花了，诸如template parser的有趣的实现。</p>\n<h2 id=\"这是一个提取params\"><a href=\"#这是一个提取params\" class=\"headerlink\" title=\"这是一个提取params\"></a>这是一个提取params</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ExtractRouteParams</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> T</span><br><span class=\"line\">  ? <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\">  : T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer Start&#125;</span>:<span class=\"subst\">$&#123;infer Param&#125;</span>/<span class=\"subst\">$&#123;infer Rest&#125;</span>`</span></span><br><span class=\"line\">  ? &#123;[k <span class=\"keyword\">in</span> <span class=\"title class_\">Param</span> | keyof <span class=\"title class_\">ExtractRouteParams</span>&lt;<span class=\"title class_\">Rest</span>&gt;]: <span class=\"built_in\">string</span>&#125;</span><br><span class=\"line\">  : T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer Start&#125;</span>:<span class=\"subst\">$&#123;infer Param&#125;</span>`</span></span><br><span class=\"line\">  ? &#123;[k <span class=\"keyword\">in</span> <span class=\"title class_\">Param</span>]: <span class=\"built_in\">string</span>&#125;</span><br><span class=\"line\">  : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"一个JSON-Parser。。。\"><a href=\"#一个JSON-Parser。。。\" class=\"headerlink\" title=\"一个JSON Parser。。。\"></a>一个JSON Parser。。。</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParserError</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = &#123; <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125; &amp; T</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">State</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;EatWhitespace got generic string type&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"string\">` <span class=\"subst\">$&#123;infer State&#125;</span>`</span> | <span class=\"string\">`\\n<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">      ? <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">      : <span class=\"title class_\">State</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">AddKeyValue</span>&lt;<span class=\"title class_\">Memo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">any</span>&gt;, <span class=\"title class_\">Key</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, <span class=\"title class_\">Value</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span>&gt; =</span><br><span class=\"line\">  <span class=\"title class_\">Memo</span> &amp; &#123; [K <span class=\"keyword\">in</span> <span class=\"title class_\">Key</span>]: <span class=\"title class_\">Value</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParseJsonObject</span>&lt;<span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, <span class=\"title class_\">Memo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">any</span>&gt; = &#123;&#125;&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">State</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonObject got generic string type&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&#125;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">      ? [<span class=\"title class_\">Memo</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">      : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&quot;<span class=\"subst\">$&#123;infer Key&#125;</span>&quot;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">        ? <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`:<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">          ? <span class=\"title class_\">ParseJsonValue</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> [infer <span class=\"title class_\">Value</span>, <span class=\"string\">`<span class=\"subst\">$&#123;infer State&#125;</span>`</span>]</span><br><span class=\"line\">            ? <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`,<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">              ? <span class=\"title class_\">ParseJsonObject</span>&lt;<span class=\"title class_\">State</span>, <span class=\"title class_\">AddKeyValue</span>&lt;<span class=\"title class_\">Memo</span>, <span class=\"title class_\">Key</span>, <span class=\"title class_\">Value</span>&gt;&gt;</span><br><span class=\"line\">              : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&#125;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">                ? [<span class=\"title class_\">AddKeyValue</span>&lt;<span class=\"title class_\">Memo</span>, <span class=\"title class_\">Key</span>, <span class=\"title class_\">Value</span>&gt;, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">                : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonObject received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\">            : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonValue returned unexpected value for: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\">          : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonObject received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\">        : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonObject received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParseJsonArray</span>&lt;<span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, <span class=\"title class_\">Memo</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span>[] = []&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">State</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonArray got generic string type&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`]<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">      ? [<span class=\"title class_\">Memo</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">      : <span class=\"title class_\">ParseJsonValue</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> [infer <span class=\"title class_\">Value</span>, <span class=\"string\">`<span class=\"subst\">$&#123;infer State&#125;</span>`</span>]</span><br><span class=\"line\">        ? <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`,<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">          ? <span class=\"title class_\">ParseJsonArray</span>&lt;<span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt;, [...<span class=\"title class_\">Memo</span>, <span class=\"title class_\">Value</span>]&gt;</span><br><span class=\"line\">          : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`]<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">            ? [[...<span class=\"title class_\">Memo</span>, <span class=\"title class_\">Value</span>], <span class=\"title class_\">State</span>]</span><br><span class=\"line\">            : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonArray received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\">        : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonValue returned unexpected value for: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParseJsonValue</span>&lt;<span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">State</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonValue got generic string type&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`null<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">      ? [<span class=\"literal\">null</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">      : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`true<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">        ? [<span class=\"literal\">true</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">        : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`false<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">          ? [<span class=\"literal\">false</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">          : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&quot;<span class=\"subst\">$&#123;infer Value&#125;</span>&quot;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">            ? [<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">            : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`[<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">              ? <span class=\"title class_\">ParseJsonArray</span>&lt;<span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">              : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&#123;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">                ? <span class=\"title class_\">ParseJsonObject</span>&lt;<span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">                : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonValue received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ParseJson</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\">  <span class=\"title class_\">ParseJsonValue</span>&lt;T&gt; <span class=\"keyword\">extends</span> infer <span class=\"title class_\">Result</span></span><br><span class=\"line\">    ? <span class=\"title class_\">Result</span> <span class=\"keyword\">extends</span> [infer <span class=\"title class_\">Value</span>, <span class=\"built_in\">string</span>]</span><br><span class=\"line\">      ? <span class=\"title class_\">Value</span></span><br><span class=\"line\">      : <span class=\"title class_\">Result</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ParserError</span>&lt;<span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">        ? <span class=\"title class_\">Result</span></span><br><span class=\"line\">        : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonValue returned unexpected Result&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonValue returned uninferrable Result&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"以及我的-extra-url-type\"><a href=\"#以及我的-extra-url-type\" class=\"headerlink\" title=\"以及我的 extra url type\"></a>以及我的 extra url type</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParsePathname</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer Left&#125;</span>?<span class=\"subst\">$&#123;infer Right&#125;</span>`</span></span><br><span class=\"line\">  ? <span class=\"title class_\">Right</span> <span class=\"keyword\">extends</span> <span class=\"string\">`:<span class=\"subst\">$&#123;infer Rest&#125;</span>`</span></span><br><span class=\"line\">    ? <span class=\"string\">`<span class=\"subst\">$&#123;Left&#125;</span>?:<span class=\"subst\">$&#123;ParsePathname&lt;Rest&gt;&#125;</span>`</span></span><br><span class=\"line\">    : <span class=\"title class_\">Left</span></span><br><span class=\"line\">  : T</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParseQueryString</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer _Left&#125;</span>?<span class=\"subst\">$&#123;infer Right&#125;</span>`</span></span><br><span class=\"line\">  ? <span class=\"title class_\">Right</span> <span class=\"keyword\">extends</span> <span class=\"string\">`:<span class=\"subst\">$&#123;infer Rest&#125;</span>`</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParseQueryString</span>&lt;<span class=\"title class_\">Rest</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">Right</span></span><br><span class=\"line\">  : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ParseUrl</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = <span class=\"title class_\">CleanEmptyObject</span>&lt;&#123;</span><br><span class=\"line\">  <span class=\"attr\">pathname</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">params</span>: <span class=\"title class_\">ParseData</span>&lt;<span class=\"title class_\">ParsePathname</span>&lt;T&gt;&gt;</span><br><span class=\"line\">  <span class=\"attr\">query</span>: <span class=\"title class_\">ParseData</span>&lt;<span class=\"title class_\">ParseQueryString</span>&lt;T&gt;&gt;</span><br><span class=\"line\">&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以下是一些效果</p>\n<p><img src=\"/Users/user/Desktop/t1.png\"></p>\n<h3 id=\"以及更多的花式应用…\"><a href=\"#以及更多的花式应用…\" class=\"headerlink\" title=\"以及更多的花式应用…\"></a>以及更多的<a href=\"https://github.com/ghoullier/awesome-template-literal-types\">花式应用…</a></h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Typescript-Template-Literal-Types\"><a href=\"#Typescript-Template-Literal-Types\" class=\"headerlink\" title=\"Typescript Template Literal Types\"></a>Typescript Template Literal Types</h1><blockquote>\n<p>String literal types in TypeScript allow us to model functions and APIs that expect a set of specific strings.</p>\n</blockquote>\n<h3 id=\"先看一下基本用法\"><a href=\"#先看一下基本用法\" class=\"headerlink\" title=\"先看一下基本用法\"></a>先看一下基本用法</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Color</span> = <span class=\"string\">&quot;red&quot;</span> | <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Quantity</span> = <span class=\"string\">&quot;one&quot;</span> | <span class=\"string\">&quot;two&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">SeussFish</span> = <span class=\"string\">`<span class=\"subst\">$&#123;Quantity | Color&#125;</span> fish`</span>;</span><br><span class=\"line\"><span class=\"comment\">//   ^ = type SeussFish = &quot;one fish&quot; | &quot;two fish&quot; | &quot;red fish&quot; | &quot;blue fish&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>TLT提供了一种在字符串中添加变量的能力，这给typescript提供了极大的想象力。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">VerticalAlignment</span> = <span class=\"string\">&quot;top&quot;</span> | <span class=\"string\">&quot;middle&quot;</span> | <span class=\"string\">&quot;bottom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">HorizontalAlignment</span> = <span class=\"string\">&quot;left&quot;</span> | <span class=\"string\">&quot;center&quot;</span> | <span class=\"string\">&quot;right&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Takes</span></span><br><span class=\"line\"><span class=\"comment\">//   | &quot;top-left&quot;    | &quot;top-center&quot;    | &quot;top-right&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//   | &quot;middle-left&quot; | &quot;middle-center&quot; | &quot;middle-right&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//   | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">setAlignment</span>(<span class=\"params\">value: <span class=\"string\">`<span class=\"subst\">$&#123;VerticalAlignment&#125;</span>-<span class=\"subst\">$&#123;HorizontalAlignment&#125;</span>`</span></span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setAlignment</span>(<span class=\"string\">&quot;top-left&quot;</span>);   <span class=\"comment\">// works!</span></span><br><span class=\"line\"><span class=\"title function_\">setAlignment</span>(<span class=\"string\">&quot;top-middel&quot;</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\"><span class=\"title class_\">Argument</span> <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">&#x27;&quot;top-middel&quot;&#x27;</span> is not assignable to parameter <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">&#x27;&quot;top-left&quot; | &quot;top-center&quot; | &quot;top-right&quot; | &quot;middle-left&quot; | &quot;middle-center&quot; | &quot;middle-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;&#x27;</span>.</span><br><span class=\"line\"><span class=\"title function_\">setAlignment</span>(<span class=\"string\">&quot;top-pot&quot;</span>);    <span class=\"comment\">// error! but good doughnuts if you&#x27;re ever in Seattle</span></span><br><span class=\"line\"><span class=\"title class_\">Argument</span> <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">&#x27;&quot;top-pot&quot;&#x27;</span> is not assignable to parameter <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">&#x27;&quot;top-left&quot; | &quot;top-center&quot; | &quot;top-right&quot; | &quot;middle-left&quot; | &quot;middle-center&quot; | &quot;middle-right&quot; | &quot;bottom-left&quot; | &quot;bottom-center&quot; | &quot;bottom-right&quot;&#x27;</span>.</span><br></pre></td></tr></table></figure>\n\n<p>对于tlt的使用，大家都已经玩出花了，诸如template parser的有趣的实现。</p>\n<h2 id=\"这是一个提取params\"><a href=\"#这是一个提取params\" class=\"headerlink\" title=\"这是一个提取params\"></a>这是一个提取params</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ExtractRouteParams</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> T</span><br><span class=\"line\">  ? <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\">  : T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer Start&#125;</span>:<span class=\"subst\">$&#123;infer Param&#125;</span>/<span class=\"subst\">$&#123;infer Rest&#125;</span>`</span></span><br><span class=\"line\">  ? &#123;[k <span class=\"keyword\">in</span> <span class=\"title class_\">Param</span> | keyof <span class=\"title class_\">ExtractRouteParams</span>&lt;<span class=\"title class_\">Rest</span>&gt;]: <span class=\"built_in\">string</span>&#125;</span><br><span class=\"line\">  : T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer Start&#125;</span>:<span class=\"subst\">$&#123;infer Param&#125;</span>`</span></span><br><span class=\"line\">  ? &#123;[k <span class=\"keyword\">in</span> <span class=\"title class_\">Param</span>]: <span class=\"built_in\">string</span>&#125;</span><br><span class=\"line\">  : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"一个JSON-Parser。。。\"><a href=\"#一个JSON-Parser。。。\" class=\"headerlink\" title=\"一个JSON Parser。。。\"></a>一个JSON Parser。。。</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParserError</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = &#123; <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125; &amp; T</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">State</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;EatWhitespace got generic string type&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"string\">` <span class=\"subst\">$&#123;infer State&#125;</span>`</span> | <span class=\"string\">`\\n<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">      ? <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">      : <span class=\"title class_\">State</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">AddKeyValue</span>&lt;<span class=\"title class_\">Memo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">any</span>&gt;, <span class=\"title class_\">Key</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, <span class=\"title class_\">Value</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span>&gt; =</span><br><span class=\"line\">  <span class=\"title class_\">Memo</span> &amp; &#123; [K <span class=\"keyword\">in</span> <span class=\"title class_\">Key</span>]: <span class=\"title class_\">Value</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParseJsonObject</span>&lt;<span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, <span class=\"title class_\">Memo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">any</span>&gt; = &#123;&#125;&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">State</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonObject got generic string type&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&#125;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">      ? [<span class=\"title class_\">Memo</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">      : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&quot;<span class=\"subst\">$&#123;infer Key&#125;</span>&quot;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">        ? <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`:<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">          ? <span class=\"title class_\">ParseJsonValue</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> [infer <span class=\"title class_\">Value</span>, <span class=\"string\">`<span class=\"subst\">$&#123;infer State&#125;</span>`</span>]</span><br><span class=\"line\">            ? <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`,<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">              ? <span class=\"title class_\">ParseJsonObject</span>&lt;<span class=\"title class_\">State</span>, <span class=\"title class_\">AddKeyValue</span>&lt;<span class=\"title class_\">Memo</span>, <span class=\"title class_\">Key</span>, <span class=\"title class_\">Value</span>&gt;&gt;</span><br><span class=\"line\">              : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&#125;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">                ? [<span class=\"title class_\">AddKeyValue</span>&lt;<span class=\"title class_\">Memo</span>, <span class=\"title class_\">Key</span>, <span class=\"title class_\">Value</span>&gt;, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">                : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonObject received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\">            : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonValue returned unexpected value for: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\">          : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonObject received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\">        : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonObject received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParseJsonArray</span>&lt;<span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, <span class=\"title class_\">Memo</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span>[] = []&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">State</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonArray got generic string type&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`]<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">      ? [<span class=\"title class_\">Memo</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">      : <span class=\"title class_\">ParseJsonValue</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> [infer <span class=\"title class_\">Value</span>, <span class=\"string\">`<span class=\"subst\">$&#123;infer State&#125;</span>`</span>]</span><br><span class=\"line\">        ? <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`,<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">          ? <span class=\"title class_\">ParseJsonArray</span>&lt;<span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt;, [...<span class=\"title class_\">Memo</span>, <span class=\"title class_\">Value</span>]&gt;</span><br><span class=\"line\">          : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`]<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">            ? [[...<span class=\"title class_\">Memo</span>, <span class=\"title class_\">Value</span>], <span class=\"title class_\">State</span>]</span><br><span class=\"line\">            : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonArray received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\">        : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonValue returned unexpected value for: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParseJsonValue</span>&lt;<span class=\"title class_\">State</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">State</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonValue got generic string type&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`null<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">      ? [<span class=\"literal\">null</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">      : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`true<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">        ? [<span class=\"literal\">true</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">        : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`false<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">          ? [<span class=\"literal\">false</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">          : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&quot;<span class=\"subst\">$&#123;infer Value&#125;</span>&quot;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">            ? [<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>]</span><br><span class=\"line\">            : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`[<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">              ? <span class=\"title class_\">ParseJsonArray</span>&lt;<span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">              : <span class=\"title class_\">EatWhitespace</span>&lt;<span class=\"title class_\">State</span>&gt; <span class=\"keyword\">extends</span> <span class=\"string\">`&#123;<span class=\"subst\">$&#123;infer State&#125;</span>`</span></span><br><span class=\"line\">                ? <span class=\"title class_\">ParseJsonObject</span>&lt;<span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">                : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">`ParseJsonValue received unexpected token: <span class=\"subst\">$&#123;State&#125;</span>`</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ParseJson</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\">  <span class=\"title class_\">ParseJsonValue</span>&lt;T&gt; <span class=\"keyword\">extends</span> infer <span class=\"title class_\">Result</span></span><br><span class=\"line\">    ? <span class=\"title class_\">Result</span> <span class=\"keyword\">extends</span> [infer <span class=\"title class_\">Value</span>, <span class=\"built_in\">string</span>]</span><br><span class=\"line\">      ? <span class=\"title class_\">Value</span></span><br><span class=\"line\">      : <span class=\"title class_\">Result</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ParserError</span>&lt;<span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">        ? <span class=\"title class_\">Result</span></span><br><span class=\"line\">        : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonValue returned unexpected Result&quot;</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">ParserError</span>&lt;<span class=\"string\">&quot;ParseJsonValue returned uninferrable Result&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"以及我的-extra-url-type\"><a href=\"#以及我的-extra-url-type\" class=\"headerlink\" title=\"以及我的 extra url type\"></a>以及我的 extra url type</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParsePathname</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer Left&#125;</span>?<span class=\"subst\">$&#123;infer Right&#125;</span>`</span></span><br><span class=\"line\">  ? <span class=\"title class_\">Right</span> <span class=\"keyword\">extends</span> <span class=\"string\">`:<span class=\"subst\">$&#123;infer Rest&#125;</span>`</span></span><br><span class=\"line\">    ? <span class=\"string\">`<span class=\"subst\">$&#123;Left&#125;</span>?:<span class=\"subst\">$&#123;ParsePathname&lt;Rest&gt;&#125;</span>`</span></span><br><span class=\"line\">    : <span class=\"title class_\">Left</span></span><br><span class=\"line\">  : T</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ParseQueryString</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer _Left&#125;</span>?<span class=\"subst\">$&#123;infer Right&#125;</span>`</span></span><br><span class=\"line\">  ? <span class=\"title class_\">Right</span> <span class=\"keyword\">extends</span> <span class=\"string\">`:<span class=\"subst\">$&#123;infer Rest&#125;</span>`</span></span><br><span class=\"line\">    ? <span class=\"title class_\">ParseQueryString</span>&lt;<span class=\"title class_\">Rest</span>&gt;</span><br><span class=\"line\">    : <span class=\"title class_\">Right</span></span><br><span class=\"line\">  : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ParseUrl</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; = <span class=\"title class_\">CleanEmptyObject</span>&lt;&#123;</span><br><span class=\"line\">  <span class=\"attr\">pathname</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">params</span>: <span class=\"title class_\">ParseData</span>&lt;<span class=\"title class_\">ParsePathname</span>&lt;T&gt;&gt;</span><br><span class=\"line\">  <span class=\"attr\">query</span>: <span class=\"title class_\">ParseData</span>&lt;<span class=\"title class_\">ParseQueryString</span>&lt;T&gt;&gt;</span><br><span class=\"line\">&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以下是一些效果</p>\n<p><img src=\"/Users/user/Desktop/t1.png\"></p>\n<h3 id=\"以及更多的花式应用…\"><a href=\"#以及更多的花式应用…\" class=\"headerlink\" title=\"以及更多的花式应用…\"></a>以及更多的<a href=\"https://github.com/ghoullier/awesome-template-literal-types\">花式应用…</a></h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cluvjqdcf00020wpddpshel98","category_id":"cluvjqdcg00030wpd8yet5319","_id":"cluvjqdch00060wpd2fmb2xfi"},{"post_id":"cluvjqdcu00070wpdg2qoab06","category_id":"cluvjqdcu00080wpd6zkqg79e","_id":"cluvjqdcu000b0wpd3tw21wsg"},{"post_id":"cluvjqdcv000c0wpdd0vfdd7g","category_id":"cluvjqdcu00080wpd6zkqg79e","_id":"cluvjqdcv000e0wpdbzs1e8kk"},{"post_id":"cluvjqdcv000g0wpd58slgoth","category_id":"cluvjqdcg00030wpd8yet5319","_id":"cluvjqdcx000l0wpd4apkbn3c"},{"post_id":"cluvjqdcw000h0wpd0rnp5qbl","category_id":"cluvjqdcw000j0wpdfax99u2p","_id":"cluvjqdcx000n0wpdgfb66zuj"},{"post_id":"cluvjqdd9000o0wpdh5y0gn1p","category_id":"cluvjqdcg00030wpd8yet5319","_id":"cluvjqdd9000q0wpdhdft6856"},{"post_id":"cluvjqdd9000r0wpdfie7h299","category_id":"cluvjqdda000t0wpdd0su4gb0","_id":"cluvjqddb000y0wpd8d6mcjja"},{"post_id":"cluvjqdda000s0wpd4qu759jo","category_id":"cluvjqdda000t0wpdd0su4gb0","_id":"cluvjqddb00100wpd5lck52zx"},{"post_id":"cluvjqddb00110wpd7lm52ohj","category_id":"cluvjqddb00120wpd4yy8e8kv","_id":"cluvjqddc00150wpd495r14g0"},{"post_id":"cluvjqddc00160wpd4sgha55g","category_id":"cluvjqddc00170wpd32zjffc1","_id":"cluvjqddd001a0wpde2r3b9rq"},{"post_id":"cluvjqddp001b0wpdhk6m0t99","category_id":"cluvjqddp001c0wpd6bc445z2","_id":"cluvjqddq001f0wpd20oz1m9g"},{"post_id":"cluvjqdds001g0wpd3kxgg4c2","category_id":"cluvjqdcg00030wpd8yet5319","_id":"cluvjqddt001m0wpd6kw7abx7"},{"post_id":"cluvjqddt001h0wpdh2u91888","category_id":"cluvjqddp001c0wpd6bc445z2","_id":"cluvjqddu001p0wpdaa1u2ruw"},{"post_id":"cluvjqddt001j0wpdcetl0nrw","category_id":"cluvjqddp001c0wpd6bc445z2","_id":"cluvjqddu001s0wpd2arz50nr"},{"post_id":"cluvjqddu001o0wpdfrm22zyq","category_id":"cluvjqddc00170wpd32zjffc1","_id":"cluvjqddv001y0wpdezx7c87k"},{"post_id":"cluvjqddu001r0wpd37rjesoz","category_id":"cluvjqddc00170wpd32zjffc1","_id":"cluvjqddv00210wpdg3e87cvx"},{"post_id":"cluvjqddu001u0wpdf319hl57","category_id":"cluvjqddp001c0wpd6bc445z2","_id":"cluvjqddw00240wpd2mk78aez"},{"post_id":"cluvjqddt001l0wpd03ew6s69","category_id":"cluvjqddu001q0wpd371w9cxj","_id":"cluvjqddx00290wpdcalbaa2x"},{"post_id":"cluvjqddv001x0wpd0pjq1bph","category_id":"cluvjqddc00170wpd32zjffc1","_id":"cluvjqddx002c0wpdebuf5620"},{"post_id":"cluvjqddv00200wpd2x0t5rbw","category_id":"cluvjqddw00250wpdh7mseuf5","_id":"cluvjqddy002k0wpd9z0w3ul6"},{"post_id":"cluvjqddx002d0wpd1dp06n2b","category_id":"cluvjqdcg00030wpd8yet5319","_id":"cluvjqddz002o0wpd6fbbdh0f"},{"post_id":"cluvjqddy002h0wpdd9m279mq","category_id":"cluvjqdcw000j0wpdfax99u2p","_id":"cluvjqddz002q0wpd5pas2x67"},{"post_id":"cluvjqddw00230wpdb0avf1as","category_id":"cluvjqddx002e0wpd9n099sad","_id":"cluvjqddz002t0wpdgmb0fom5"},{"post_id":"cluvjqddw00280wpd61bigdc5","category_id":"cluvjqddy002l0wpdh4936i0n","_id":"cluvjqddz002w0wpdhdmsc87c"},{"post_id":"cluvjqddx002b0wpdampx89t5","category_id":"cluvjqddx002e0wpd9n099sad","_id":"cluvjqddz002z0wpdcebo3r1x"},{"post_id":"cluvjqddy002j0wpd8n961e3h","category_id":"cluvjqddz002v0wpd7dyh6x0j","_id":"cluvjqddz00310wpd8bkw59rm"},{"post_id":"cluvjqde000320wpd24zof5xh","category_id":"cluvjqddz002v0wpd7dyh6x0j","_id":"cluvjqde000360wpdbrns9dak"},{"post_id":"cluvjqde000330wpdc12946bd","category_id":"cluvjqde000350wpd3tf51l80","_id":"cluvjqde100390wpdhu876ct8"}],"PostTag":[{"post_id":"cluvjqdcf00020wpddpshel98","tag_id":"cluvjqdcg00040wpdefd1b9vc","_id":"cluvjqdcg00050wpdbn8w5m0g"},{"post_id":"cluvjqdcu00070wpdg2qoab06","tag_id":"cluvjqdcu00090wpdex96bupo","_id":"cluvjqdcu000a0wpd5n3i65vn"},{"post_id":"cluvjqdcv000c0wpdd0vfdd7g","tag_id":"cluvjqdcv000d0wpd4g6560up","_id":"cluvjqdcv000f0wpd6jjqgwjg"},{"post_id":"cluvjqdcv000g0wpd58slgoth","tag_id":"cluvjqdcg00040wpdefd1b9vc","_id":"cluvjqdcw000i0wpdhqmg2139"},{"post_id":"cluvjqdcw000h0wpd0rnp5qbl","tag_id":"cluvjqdcw000k0wpd5z5havkt","_id":"cluvjqdcx000m0wpd2ibo4lu2"},{"post_id":"cluvjqdd9000o0wpdh5y0gn1p","tag_id":"cluvjqdcg00040wpdefd1b9vc","_id":"cluvjqdd9000p0wpdbr1ahwrn"},{"post_id":"cluvjqdd9000r0wpdfie7h299","tag_id":"cluvjqdda000u0wpd5t4c6xrr","_id":"cluvjqddb000x0wpdgopthnrm"},{"post_id":"cluvjqdda000s0wpd4qu759jo","tag_id":"cluvjqdda000w0wpd2aofc6q7","_id":"cluvjqddb000z0wpdhhq07l9p"},{"post_id":"cluvjqddb00110wpd7lm52ohj","tag_id":"cluvjqddb00130wpd8qangv6o","_id":"cluvjqddc00140wpdbmg72zb7"},{"post_id":"cluvjqddc00160wpd4sgha55g","tag_id":"cluvjqddc00180wpd5fxb7wwf","_id":"cluvjqddd00190wpd59x57uj6"},{"post_id":"cluvjqddp001b0wpdhk6m0t99","tag_id":"cluvjqddq001d0wpdcgtk4j2d","_id":"cluvjqddq001e0wpd4grohuzr"},{"post_id":"cluvjqdds001g0wpd3kxgg4c2","tag_id":"cluvjqdcg00040wpdefd1b9vc","_id":"cluvjqddt001i0wpd7wura6sc"},{"post_id":"cluvjqddt001h0wpdh2u91888","tag_id":"cluvjqddq001d0wpdcgtk4j2d","_id":"cluvjqddt001k0wpd720d0ncj"},{"post_id":"cluvjqddu001o0wpdfrm22zyq","tag_id":"cluvjqddc00180wpd5fxb7wwf","_id":"cluvjqddu001t0wpd6ss94ydc"},{"post_id":"cluvjqddu001r0wpd37rjesoz","tag_id":"cluvjqddc00180wpd5fxb7wwf","_id":"cluvjqddv001w0wpdd2bw435v"},{"post_id":"cluvjqddt001j0wpdcetl0nrw","tag_id":"cluvjqddu001n0wpdazpx5m7l","_id":"cluvjqddv001z0wpded2let1i"},{"post_id":"cluvjqddu001u0wpdf319hl57","tag_id":"cluvjqddq001d0wpdcgtk4j2d","_id":"cluvjqddw00220wpdfjvphzpq"},{"post_id":"cluvjqddv001x0wpd0pjq1bph","tag_id":"cluvjqddc00180wpd5fxb7wwf","_id":"cluvjqddw00270wpd3e6x4t99"},{"post_id":"cluvjqddt001l0wpd03ew6s69","tag_id":"cluvjqddv001v0wpdg3cl3zya","_id":"cluvjqddx002a0wpdde2qdwle"},{"post_id":"cluvjqddv00200wpd2x0t5rbw","tag_id":"cluvjqddw00260wpdh61d8d0v","_id":"cluvjqddy002g0wpdf9qs6nk7"},{"post_id":"cluvjqddx002d0wpd1dp06n2b","tag_id":"cluvjqdcg00040wpdefd1b9vc","_id":"cluvjqddy002i0wpd98g6b5p0"},{"post_id":"cluvjqddy002h0wpdd9m279mq","tag_id":"cluvjqdcw000k0wpd5z5havkt","_id":"cluvjqddz002n0wpda2x903c3"},{"post_id":"cluvjqddw00230wpdb0avf1as","tag_id":"cluvjqddx002f0wpd3co4gb1e","_id":"cluvjqddz002p0wpd0f0zd32a"},{"post_id":"cluvjqddw00280wpd61bigdc5","tag_id":"cluvjqddy002m0wpdbrvtg1da","_id":"cluvjqddz002u0wpd5w921rwz"},{"post_id":"cluvjqddx002b0wpdampx89t5","tag_id":"cluvjqddz002s0wpd8s0y1b2y","_id":"cluvjqddz002y0wpdemhjc02o"},{"post_id":"cluvjqddy002j0wpd8n961e3h","tag_id":"cluvjqddz002x0wpdc6uz20yb","_id":"cluvjqddz00300wpdh9lvahv4"},{"post_id":"cluvjqde000320wpd24zof5xh","tag_id":"cluvjqde000340wpd1pl1aa3c","_id":"cluvjqde000380wpdh3zxf332"},{"post_id":"cluvjqde000330wpdc12946bd","tag_id":"cluvjqde000370wpdafn19ct5","_id":"cluvjqde1003a0wpd4yo3b4yj"}],"Tag":[{"name":"js","_id":"cluvjqdcg00040wpdefd1b9vc"},{"name":"ast","_id":"cluvjqdcu00090wpdex96bupo"},{"name":"babel","_id":"cluvjqdcv000d0wpd4g6560up"},{"name":"rxjs","_id":"cluvjqdcw000k0wpd5z5havkt"},{"name":"callbag","_id":"cluvjqdda000u0wpd5t4c6xrr"},{"name":"express","_id":"cluvjqdda000w0wpd2aofc6q7"},{"name":"decorate","_id":"cluvjqddb00130wpd8qangv6o"},{"name":"webpack","_id":"cluvjqddc00180wpd5fxb7wwf"},{"name":"react source","_id":"cluvjqddq001d0wpdcgtk4j2d"},{"name":"react","_id":"cluvjqddu001n0wpdazpx5m7l"},{"name":"redux source","_id":"cluvjqddv001v0wpdg3cl3zya"},{"name":"http","_id":"cluvjqddw00260wpdh61d8d0v"},{"name":"puppeteer","_id":"cluvjqddx002f0wpd3co4gb1e"},{"name":"redux","_id":"cluvjqddy002m0wpdbrvtg1da"},{"name":"form","_id":"cluvjqddz002s0wpd8s0y1b2y"},{"name":"webComponent","_id":"cluvjqddz002x0wpdc6uz20yb"},{"name":"webSocket","_id":"cluvjqde000340wpd1pl1aa3c"},{"name":"ts","_id":"cluvjqde000370wpdafn19ct5"}]}}